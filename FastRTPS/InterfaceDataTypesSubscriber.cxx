// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file InterfaceDataTypesSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>
#include <fastrtps/xmlparser/XMLProfileManager.h>

#include "InterfaceDataTypesSubscriber.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;




InterfaceDataTypesSubscriber::InterfaceDataTypesSubscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

InterfaceDataTypesSubscriber::~InterfaceDataTypesSubscriber() {	Domain::removeParticipant(mp_participant);}

bool InterfaceDataTypesSubscriber::init(std::string xml_name)
{
	// Create RTPSParticipant

	if(!xml_name.empty())
	{
		eprosima::fastrtps::Domain::loadXMLProfilesFile(xml_name);
	}
	
	if(xml_name.empty())
	{
		ParticipantAttributes PParam;
		PParam.rtps.builtin.domainId = 0; //MUST BE THE SAME AS IN THE PUBLISHER
		PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
		PParam.rtps.builtin.readerHistoryMemoryPolicy = eprosima::fastrtps::rtps::PREALLOCATED_WITH_REALLOC_MEMORY_MODE;
		PParam.rtps.builtin.writerHistoryMemoryPolicy = eprosima::fastrtps::rtps::PREALLOCATED_WITH_REALLOC_MEMORY_MODE;
		PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
		mp_participant = Domain::createParticipant(PParam);

	}
	else
	{
		mp_participant = Domain::createParticipant("participant_profile");
	}
	
	if(mp_participant == nullptr)
		return false;
		
	//Register the type

	
	
	Domain::registerType(mp_participant,(TopicDataType*) &myType);		
			
	// Create Subscriber
	
	SubscriberAttributes Rparam;
	if(xml_name.empty())
	{
		Rparam.topic.topicKind = NO_KEY;
		Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
		Rparam.topic.topicName = "chatter";
		Rparam.historyMemoryPolicy = eprosima::fastrtps::rtps::PREALLOCATED_WITH_REALLOC_MEMORY_MODE;
		Rparam.qos.m_reliability.kind = eprosima::fastrtps::RELIABLE_RELIABILITY_QOS;
		//Rparam.topic.historyQos.kind = KEEP_ALL_HISTORY_QOS;
	}
	else
	{
		if(eprosima::fastrtps::xmlparser::XMLP_ret::XML_ERROR == eprosima::fastrtps::xmlparser::XMLProfileManager::fillSubscriberAttributes("subscriber_profile", Rparam))
		{
			return false;
		}
		else
		{
			Rparam.topic.topicDataType = myType.getName();
		}
	}
	mp_subscriber = Domain::createSubscriber(mp_participant,Rparam,(SubscriberListener*)&m_listener);
	if(mp_subscriber == nullptr)
		return false;

	return true;
}

void InterfaceDataTypesSubscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
    
	if (info.status == MATCHED_MATCHING)
	{
		n_matched++;
		std::cout << "Subscriber matched" << std::endl;
	}
	else
	{
		n_matched--;
		std::cout << "Subscriber unmatched" << std::endl;
		save(0);
	}
}

void InterfaceDataTypesSubscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
    std::lock_guard<std::mutex> guard(m_mu);
		// Take data
		RTC::CameraImage st;
		
		if(sub->takeNextData(&st, &m_info))
		{
            
			if(m_info.sampleKind == ALIVE)
			{
                if (m_data.empty() || m_datasize == st.pixels().size())
                {
                    auto end = std::chrono::system_clock::now().time_since_epoch();
                    auto start = std::chrono::seconds(st.tm().sec()) + std::chrono::nanoseconds(st.tm().nsec());
                    double diff = std::chrono::duration<double>(end - start).count();
                    //m_file << msg->data.size() << "\t" << diff << std::endl;
                    m_data.push_back(diff);
                }
                else
                {
                    save(static_cast<unsigned long>(st.pixels().size()));
                }
			}
		}
}

void InterfaceDataTypesSubscriber::run()
{
	std::cout << "Waiting for Data, press Enter to stop the Subscriber. "<<std::endl;
	std::cin.ignore();
	
	std::cout << "Shutting down the Subscriber." << std::endl;
}


void InterfaceDataTypesSubscriber::SubListener::save(unsigned long newsize)
{
    if (m_data.size() == 0)
    {
        m_datasize = newsize;
        return;
    }
    double avg = 0;
    for (const auto &data : m_data)
    {
        avg += data;
    }

	avg /= m_data.size();
    std::cout << newsize << "\t" << avg << "\t" << m_data.size() << std::endl;
    m_file << m_datasize << "\t" << avg << "\t" << m_data.size() << std::endl;
	m_data.clear();

    m_datasize = newsize;
}