// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file BasicDataType.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _RTC_BASICDATATYPE_H_
#define _RTC_BASICDATATYPE_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(BasicDataType_SOURCE)
#define BasicDataType_DllAPI __declspec( dllexport )
#else
#define BasicDataType_DllAPI __declspec( dllimport )
#endif // BasicDataType_SOURCE
#else
#define BasicDataType_DllAPI
#endif
#else
#define BasicDataType_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace RTC
{
    /*!
     * @brief This class represents the structure Time defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class Time
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Time();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Time();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Time that will be copied.
         */
        eProsima_user_DllExport Time(const Time &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Time that will be copied.
         */
        eProsima_user_DllExport Time(Time &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Time that will be copied.
         */
        eProsima_user_DllExport Time& operator=(const Time &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Time that will be copied.
         */
        eProsima_user_DllExport Time& operator=(Time &&x);
        
        /*!
         * @brief This function sets a value in member sec
         * @param _sec New value for member sec
         */
        inline eProsima_user_DllExport void sec(uint32_t _sec)
        {
            m_sec = _sec;
        }

        /*!
         * @brief This function returns the value of member sec
         * @return Value of member sec
         */
        inline eProsima_user_DllExport uint32_t sec() const
        {
            return m_sec;
        }

        /*!
         * @brief This function returns a reference to member sec
         * @return Reference to member sec
         */
        inline eProsima_user_DllExport uint32_t& sec()
        {
            return m_sec;
        }
        /*!
         * @brief This function sets a value in member nsec
         * @param _nsec New value for member nsec
         */
        inline eProsima_user_DllExport void nsec(uint32_t _nsec)
        {
            m_nsec = _nsec;
        }

        /*!
         * @brief This function returns the value of member nsec
         * @return Value of member nsec
         */
        inline eProsima_user_DllExport uint32_t nsec() const
        {
            return m_nsec;
        }

        /*!
         * @brief This function returns a reference to member nsec
         * @return Reference to member nsec
         */
        inline eProsima_user_DllExport uint32_t& nsec()
        {
            return m_nsec;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Time& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        uint32_t m_sec;
        uint32_t m_nsec;
    };
    /*!
     * @brief This class represents the structure TimedState defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedState
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedState();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedState();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedState that will be copied.
         */
        eProsima_user_DllExport TimedState(const TimedState &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedState that will be copied.
         */
        eProsima_user_DllExport TimedState(TimedState &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedState that will be copied.
         */
        eProsima_user_DllExport TimedState& operator=(const TimedState &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedState that will be copied.
         */
        eProsima_user_DllExport TimedState& operator=(TimedState &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(int16_t _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport int16_t data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport int16_t& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedState& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        int16_t m_data;
    };
    /*!
     * @brief This class represents the structure TimedShort defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedShort
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedShort();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedShort();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedShort that will be copied.
         */
        eProsima_user_DllExport TimedShort(const TimedShort &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedShort that will be copied.
         */
        eProsima_user_DllExport TimedShort(TimedShort &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedShort that will be copied.
         */
        eProsima_user_DllExport TimedShort& operator=(const TimedShort &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedShort that will be copied.
         */
        eProsima_user_DllExport TimedShort& operator=(TimedShort &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(int16_t _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport int16_t data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport int16_t& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedShort& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        int16_t m_data;
    };
    /*!
     * @brief This class represents the structure TimedLong defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedLong
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedLong();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedLong();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedLong that will be copied.
         */
        eProsima_user_DllExport TimedLong(const TimedLong &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedLong that will be copied.
         */
        eProsima_user_DllExport TimedLong(TimedLong &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedLong that will be copied.
         */
        eProsima_user_DllExport TimedLong& operator=(const TimedLong &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedLong that will be copied.
         */
        eProsima_user_DllExport TimedLong& operator=(TimedLong &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(int32_t _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport int32_t data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport int32_t& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedLong& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        int32_t m_data;
    };
    /*!
     * @brief This class represents the structure TimedUShort defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedUShort
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedUShort();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedUShort();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedUShort that will be copied.
         */
        eProsima_user_DllExport TimedUShort(const TimedUShort &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedUShort that will be copied.
         */
        eProsima_user_DllExport TimedUShort(TimedUShort &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedUShort that will be copied.
         */
        eProsima_user_DllExport TimedUShort& operator=(const TimedUShort &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedUShort that will be copied.
         */
        eProsima_user_DllExport TimedUShort& operator=(TimedUShort &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(uint16_t _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport uint16_t data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport uint16_t& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedUShort& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        uint16_t m_data;
    };
    /*!
     * @brief This class represents the structure TimedULong defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedULong
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedULong();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedULong();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedULong that will be copied.
         */
        eProsima_user_DllExport TimedULong(const TimedULong &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedULong that will be copied.
         */
        eProsima_user_DllExport TimedULong(TimedULong &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedULong that will be copied.
         */
        eProsima_user_DllExport TimedULong& operator=(const TimedULong &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedULong that will be copied.
         */
        eProsima_user_DllExport TimedULong& operator=(TimedULong &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(uint32_t _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport uint32_t data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport uint32_t& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedULong& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        uint32_t m_data;
    };
    /*!
     * @brief This class represents the structure TimedFloat defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedFloat
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedFloat();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedFloat();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedFloat that will be copied.
         */
        eProsima_user_DllExport TimedFloat(const TimedFloat &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedFloat that will be copied.
         */
        eProsima_user_DllExport TimedFloat(TimedFloat &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedFloat that will be copied.
         */
        eProsima_user_DllExport TimedFloat& operator=(const TimedFloat &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedFloat that will be copied.
         */
        eProsima_user_DllExport TimedFloat& operator=(TimedFloat &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(float _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport float data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport float& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedFloat& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        float m_data;
    };
    /*!
     * @brief This class represents the structure TimedDouble defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedDouble
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedDouble();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedDouble();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedDouble that will be copied.
         */
        eProsima_user_DllExport TimedDouble(const TimedDouble &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedDouble that will be copied.
         */
        eProsima_user_DllExport TimedDouble(TimedDouble &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedDouble that will be copied.
         */
        eProsima_user_DllExport TimedDouble& operator=(const TimedDouble &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedDouble that will be copied.
         */
        eProsima_user_DllExport TimedDouble& operator=(TimedDouble &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(double _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport double data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport double& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedDouble& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        double m_data;
    };
    /*!
     * @brief This class represents the structure TimedChar defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedChar
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedChar();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedChar();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedChar that will be copied.
         */
        eProsima_user_DllExport TimedChar(const TimedChar &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedChar that will be copied.
         */
        eProsima_user_DllExport TimedChar(TimedChar &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedChar that will be copied.
         */
        eProsima_user_DllExport TimedChar& operator=(const TimedChar &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedChar that will be copied.
         */
        eProsima_user_DllExport TimedChar& operator=(TimedChar &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(char _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport char data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport char& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedChar& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        char m_data;
    };
    /*!
     * @brief This class represents the structure TimedBoolean defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedBoolean
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedBoolean();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedBoolean();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedBoolean that will be copied.
         */
        eProsima_user_DllExport TimedBoolean(const TimedBoolean &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedBoolean that will be copied.
         */
        eProsima_user_DllExport TimedBoolean(TimedBoolean &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedBoolean that will be copied.
         */
        eProsima_user_DllExport TimedBoolean& operator=(const TimedBoolean &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedBoolean that will be copied.
         */
        eProsima_user_DllExport TimedBoolean& operator=(TimedBoolean &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(bool _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport bool data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport bool& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedBoolean& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        bool m_data;
    };
    /*!
     * @brief This class represents the structure TimedOctet defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedOctet
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedOctet();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedOctet();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedOctet that will be copied.
         */
        eProsima_user_DllExport TimedOctet(const TimedOctet &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedOctet that will be copied.
         */
        eProsima_user_DllExport TimedOctet(TimedOctet &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedOctet that will be copied.
         */
        eProsima_user_DllExport TimedOctet& operator=(const TimedOctet &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedOctet that will be copied.
         */
        eProsima_user_DllExport TimedOctet& operator=(TimedOctet &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member data
         * @param _data New value for member data
         */
        inline eProsima_user_DllExport void data(uint8_t _data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function returns the value of member data
         * @return Value of member data
         */
        inline eProsima_user_DllExport uint8_t data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport uint8_t& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedOctet& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        uint8_t m_data;
    };
    /*!
     * @brief This class represents the structure TimedString defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedString
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedString();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedString();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedString that will be copied.
         */
        eProsima_user_DllExport TimedString(const TimedString &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedString that will be copied.
         */
        eProsima_user_DllExport TimedString(TimedString &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedString that will be copied.
         */
        eProsima_user_DllExport TimedString& operator=(const TimedString &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedString that will be copied.
         */
        eProsima_user_DllExport TimedString& operator=(TimedString &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::string &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::string &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::string& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::string& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedString& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::string m_data;
    };
    /*!
     * @brief This class represents the structure TimedShortSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedShortSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedShortSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedShortSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedShortSeq(const TimedShortSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedShortSeq(TimedShortSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedShortSeq& operator=(const TimedShortSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedShortSeq& operator=(TimedShortSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<int16_t> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<int16_t> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<int16_t>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<int16_t>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedShortSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<int16_t> m_data;
    };
    /*!
     * @brief This class represents the structure TimedLongSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedLongSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedLongSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedLongSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedLongSeq that will be copied.
         */
        eProsima_user_DllExport TimedLongSeq(const TimedLongSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedLongSeq that will be copied.
         */
        eProsima_user_DllExport TimedLongSeq(TimedLongSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedLongSeq that will be copied.
         */
        eProsima_user_DllExport TimedLongSeq& operator=(const TimedLongSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedLongSeq that will be copied.
         */
        eProsima_user_DllExport TimedLongSeq& operator=(TimedLongSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<int32_t> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<int32_t> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<int32_t>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<int32_t>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedLongSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<int32_t> m_data;
    };
    /*!
     * @brief This class represents the structure TimedUShortSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedUShortSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedUShortSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedUShortSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedUShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedUShortSeq(const TimedUShortSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedUShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedUShortSeq(TimedUShortSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedUShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedUShortSeq& operator=(const TimedUShortSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedUShortSeq that will be copied.
         */
        eProsima_user_DllExport TimedUShortSeq& operator=(TimedUShortSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<uint16_t> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<uint16_t> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<uint16_t>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<uint16_t>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedUShortSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<uint16_t> m_data;
    };
    /*!
     * @brief This class represents the structure TimedULongSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedULongSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedULongSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedULongSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedULongSeq that will be copied.
         */
        eProsima_user_DllExport TimedULongSeq(const TimedULongSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedULongSeq that will be copied.
         */
        eProsima_user_DllExport TimedULongSeq(TimedULongSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedULongSeq that will be copied.
         */
        eProsima_user_DllExport TimedULongSeq& operator=(const TimedULongSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedULongSeq that will be copied.
         */
        eProsima_user_DllExport TimedULongSeq& operator=(TimedULongSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<uint32_t> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<uint32_t> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<uint32_t>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<uint32_t>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedULongSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<uint32_t> m_data;
    };
    /*!
     * @brief This class represents the structure TimedFloatSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedFloatSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedFloatSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedFloatSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedFloatSeq that will be copied.
         */
        eProsima_user_DllExport TimedFloatSeq(const TimedFloatSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedFloatSeq that will be copied.
         */
        eProsima_user_DllExport TimedFloatSeq(TimedFloatSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedFloatSeq that will be copied.
         */
        eProsima_user_DllExport TimedFloatSeq& operator=(const TimedFloatSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedFloatSeq that will be copied.
         */
        eProsima_user_DllExport TimedFloatSeq& operator=(TimedFloatSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<float> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<float> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<float>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<float>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedFloatSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<float> m_data;
    };
    /*!
     * @brief This class represents the structure TimedDoubleSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedDoubleSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedDoubleSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedDoubleSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedDoubleSeq that will be copied.
         */
        eProsima_user_DllExport TimedDoubleSeq(const TimedDoubleSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedDoubleSeq that will be copied.
         */
        eProsima_user_DllExport TimedDoubleSeq(TimedDoubleSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedDoubleSeq that will be copied.
         */
        eProsima_user_DllExport TimedDoubleSeq& operator=(const TimedDoubleSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedDoubleSeq that will be copied.
         */
        eProsima_user_DllExport TimedDoubleSeq& operator=(TimedDoubleSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<double> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<double> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<double>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<double>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedDoubleSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<double> m_data;
    };
    /*!
     * @brief This class represents the structure TimedCharSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedCharSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedCharSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedCharSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedCharSeq that will be copied.
         */
        eProsima_user_DllExport TimedCharSeq(const TimedCharSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedCharSeq that will be copied.
         */
        eProsima_user_DllExport TimedCharSeq(TimedCharSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedCharSeq that will be copied.
         */
        eProsima_user_DllExport TimedCharSeq& operator=(const TimedCharSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedCharSeq that will be copied.
         */
        eProsima_user_DllExport TimedCharSeq& operator=(TimedCharSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<char> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<char> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<char>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<char>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedCharSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<char> m_data;
    };
    /*!
     * @brief This class represents the structure TimedBooleanSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedBooleanSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedBooleanSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedBooleanSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedBooleanSeq that will be copied.
         */
        eProsima_user_DllExport TimedBooleanSeq(const TimedBooleanSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedBooleanSeq that will be copied.
         */
        eProsima_user_DllExport TimedBooleanSeq(TimedBooleanSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedBooleanSeq that will be copied.
         */
        eProsima_user_DllExport TimedBooleanSeq& operator=(const TimedBooleanSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedBooleanSeq that will be copied.
         */
        eProsima_user_DllExport TimedBooleanSeq& operator=(TimedBooleanSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<bool> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<bool> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<bool>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<bool>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedBooleanSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<bool> m_data;
    };
    /*!
     * @brief This class represents the structure TimedOctetSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedOctetSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedOctetSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedOctetSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedOctetSeq that will be copied.
         */
        eProsima_user_DllExport TimedOctetSeq(const TimedOctetSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedOctetSeq that will be copied.
         */
        eProsima_user_DllExport TimedOctetSeq(TimedOctetSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedOctetSeq that will be copied.
         */
        eProsima_user_DllExport TimedOctetSeq& operator=(const TimedOctetSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedOctetSeq that will be copied.
         */
        eProsima_user_DllExport TimedOctetSeq& operator=(TimedOctetSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<uint8_t> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<uint8_t> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<uint8_t>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<uint8_t>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedOctetSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<uint8_t> m_data;
    };
    /*!
     * @brief This class represents the structure TimedStringSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedStringSeq
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedStringSeq();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedStringSeq();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedStringSeq that will be copied.
         */
        eProsima_user_DllExport TimedStringSeq(const TimedStringSeq &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedStringSeq that will be copied.
         */
        eProsima_user_DllExport TimedStringSeq(TimedStringSeq &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedStringSeq that will be copied.
         */
        eProsima_user_DllExport TimedStringSeq& operator=(const TimedStringSeq &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedStringSeq that will be copied.
         */
        eProsima_user_DllExport TimedStringSeq& operator=(TimedStringSeq &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::vector<std::string> &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::vector<std::string> &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::vector<std::string>& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::vector<std::string>& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedStringSeq& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        std::vector<std::string> m_data;
    };
}

#endif // _RTC_BASICDATATYPE_H_