// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ExtendedDataTypes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _RTC_EXTENDEDDATATYPES_H_
#define _RTC_EXTENDEDDATATYPES_H_

// TODO Poner en el contexto.
#include "BasicDataType.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ExtendedDataTypes_SOURCE)
#define ExtendedDataTypes_DllAPI __declspec( dllexport )
#else
#define ExtendedDataTypes_DllAPI __declspec( dllimport )
#endif // ExtendedDataTypes_SOURCE
#else
#define ExtendedDataTypes_DllAPI
#endif
#else
#define ExtendedDataTypes_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace RTC
{
    /*!
     * @brief This class represents the structure RGBColour defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class RGBColour
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport RGBColour();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~RGBColour();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::RGBColour that will be copied.
         */
        eProsima_user_DllExport RGBColour(const RGBColour &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::RGBColour that will be copied.
         */
        eProsima_user_DllExport RGBColour(RGBColour &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::RGBColour that will be copied.
         */
        eProsima_user_DllExport RGBColour& operator=(const RGBColour &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::RGBColour that will be copied.
         */
        eProsima_user_DllExport RGBColour& operator=(RGBColour &&x);
        
        /*!
         * @brief This function sets a value in member r
         * @param _r New value for member r
         */
        inline eProsima_user_DllExport void r(double _r)
        {
            m_r = _r;
        }

        /*!
         * @brief This function returns the value of member r
         * @return Value of member r
         */
        inline eProsima_user_DllExport double r() const
        {
            return m_r;
        }

        /*!
         * @brief This function returns a reference to member r
         * @return Reference to member r
         */
        inline eProsima_user_DllExport double& r()
        {
            return m_r;
        }
        /*!
         * @brief This function sets a value in member g
         * @param _g New value for member g
         */
        inline eProsima_user_DllExport void g(double _g)
        {
            m_g = _g;
        }

        /*!
         * @brief This function returns the value of member g
         * @return Value of member g
         */
        inline eProsima_user_DllExport double g() const
        {
            return m_g;
        }

        /*!
         * @brief This function returns a reference to member g
         * @return Reference to member g
         */
        inline eProsima_user_DllExport double& g()
        {
            return m_g;
        }
        /*!
         * @brief This function sets a value in member b
         * @param _b New value for member b
         */
        inline eProsima_user_DllExport void b(double _b)
        {
            m_b = _b;
        }

        /*!
         * @brief This function returns the value of member b
         * @return Value of member b
         */
        inline eProsima_user_DllExport double b() const
        {
            return m_b;
        }

        /*!
         * @brief This function returns a reference to member b
         * @return Reference to member b
         */
        inline eProsima_user_DllExport double& b()
        {
            return m_b;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::RGBColour& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_r;
        double m_g;
        double m_b;
    };
    /*!
     * @brief This class represents the structure Point2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Point2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Point2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Point2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Point2D that will be copied.
         */
        eProsima_user_DllExport Point2D(const Point2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Point2D that will be copied.
         */
        eProsima_user_DllExport Point2D(Point2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Point2D that will be copied.
         */
        eProsima_user_DllExport Point2D& operator=(const Point2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Point2D that will be copied.
         */
        eProsima_user_DllExport Point2D& operator=(Point2D &&x);
        
        /*!
         * @brief This function sets a value in member x
         * @param _x New value for member x
         */
        inline eProsima_user_DllExport void x(double _x)
        {
            m_x = _x;
        }

        /*!
         * @brief This function returns the value of member x
         * @return Value of member x
         */
        inline eProsima_user_DllExport double x() const
        {
            return m_x;
        }

        /*!
         * @brief This function returns a reference to member x
         * @return Reference to member x
         */
        inline eProsima_user_DllExport double& x()
        {
            return m_x;
        }
        /*!
         * @brief This function sets a value in member y
         * @param _y New value for member y
         */
        inline eProsima_user_DllExport void y(double _y)
        {
            m_y = _y;
        }

        /*!
         * @brief This function returns the value of member y
         * @return Value of member y
         */
        inline eProsima_user_DllExport double y() const
        {
            return m_y;
        }

        /*!
         * @brief This function returns a reference to member y
         * @return Reference to member y
         */
        inline eProsima_user_DllExport double& y()
        {
            return m_y;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Point2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_x;
        double m_y;
    };
    /*!
     * @brief This class represents the structure Vector2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Vector2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Vector2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Vector2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Vector2D that will be copied.
         */
        eProsima_user_DllExport Vector2D(const Vector2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Vector2D that will be copied.
         */
        eProsima_user_DllExport Vector2D(Vector2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Vector2D that will be copied.
         */
        eProsima_user_DllExport Vector2D& operator=(const Vector2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Vector2D that will be copied.
         */
        eProsima_user_DllExport Vector2D& operator=(Vector2D &&x);
        
        /*!
         * @brief This function sets a value in member x
         * @param _x New value for member x
         */
        inline eProsima_user_DllExport void x(double _x)
        {
            m_x = _x;
        }

        /*!
         * @brief This function returns the value of member x
         * @return Value of member x
         */
        inline eProsima_user_DllExport double x() const
        {
            return m_x;
        }

        /*!
         * @brief This function returns a reference to member x
         * @return Reference to member x
         */
        inline eProsima_user_DllExport double& x()
        {
            return m_x;
        }
        /*!
         * @brief This function sets a value in member y
         * @param _y New value for member y
         */
        inline eProsima_user_DllExport void y(double _y)
        {
            m_y = _y;
        }

        /*!
         * @brief This function returns the value of member y
         * @return Value of member y
         */
        inline eProsima_user_DllExport double y() const
        {
            return m_y;
        }

        /*!
         * @brief This function returns a reference to member y
         * @return Reference to member y
         */
        inline eProsima_user_DllExport double& y()
        {
            return m_y;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Vector2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_x;
        double m_y;
    };
    /*!
     * @brief This class represents the structure Pose2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Pose2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Pose2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Pose2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Pose2D that will be copied.
         */
        eProsima_user_DllExport Pose2D(const Pose2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Pose2D that will be copied.
         */
        eProsima_user_DllExport Pose2D(Pose2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Pose2D that will be copied.
         */
        eProsima_user_DllExport Pose2D& operator=(const Pose2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Pose2D that will be copied.
         */
        eProsima_user_DllExport Pose2D& operator=(Pose2D &&x);
        
        /*!
         * @brief This function copies the value in member position
         * @param _position New value to be copied in member position
         */
        inline eProsima_user_DllExport void position(const RTC::Point2D &_position)
        {
            m_position = _position;
        }

        /*!
         * @brief This function moves the value in member position
         * @param _position New value to be moved in member position
         */
        inline eProsima_user_DllExport void position(RTC::Point2D &&_position)
        {
            m_position = std::move(_position);
        }

        /*!
         * @brief This function returns a constant reference to member position
         * @return Constant reference to member position
         */
        inline eProsima_user_DllExport const RTC::Point2D& position() const
        {
            return m_position;
        }

        /*!
         * @brief This function returns a reference to member position
         * @return Reference to member position
         */
        inline eProsima_user_DllExport RTC::Point2D& position()
        {
            return m_position;
        }
        /*!
         * @brief This function sets a value in member heading
         * @param _heading New value for member heading
         */
        inline eProsima_user_DllExport void heading(double _heading)
        {
            m_heading = _heading;
        }

        /*!
         * @brief This function returns the value of member heading
         * @return Value of member heading
         */
        inline eProsima_user_DllExport double heading() const
        {
            return m_heading;
        }

        /*!
         * @brief This function returns a reference to member heading
         * @return Reference to member heading
         */
        inline eProsima_user_DllExport double& heading()
        {
            return m_heading;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Pose2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Point2D m_position;
        double m_heading;
    };
    /*!
     * @brief This class represents the structure Velocity2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Velocity2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Velocity2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Velocity2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Velocity2D that will be copied.
         */
        eProsima_user_DllExport Velocity2D(const Velocity2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Velocity2D that will be copied.
         */
        eProsima_user_DllExport Velocity2D(Velocity2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Velocity2D that will be copied.
         */
        eProsima_user_DllExport Velocity2D& operator=(const Velocity2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Velocity2D that will be copied.
         */
        eProsima_user_DllExport Velocity2D& operator=(Velocity2D &&x);
        
        /*!
         * @brief This function sets a value in member vx
         * @param _vx New value for member vx
         */
        inline eProsima_user_DllExport void vx(double _vx)
        {
            m_vx = _vx;
        }

        /*!
         * @brief This function returns the value of member vx
         * @return Value of member vx
         */
        inline eProsima_user_DllExport double vx() const
        {
            return m_vx;
        }

        /*!
         * @brief This function returns a reference to member vx
         * @return Reference to member vx
         */
        inline eProsima_user_DllExport double& vx()
        {
            return m_vx;
        }
        /*!
         * @brief This function sets a value in member vy
         * @param _vy New value for member vy
         */
        inline eProsima_user_DllExport void vy(double _vy)
        {
            m_vy = _vy;
        }

        /*!
         * @brief This function returns the value of member vy
         * @return Value of member vy
         */
        inline eProsima_user_DllExport double vy() const
        {
            return m_vy;
        }

        /*!
         * @brief This function returns a reference to member vy
         * @return Reference to member vy
         */
        inline eProsima_user_DllExport double& vy()
        {
            return m_vy;
        }
        /*!
         * @brief This function sets a value in member va
         * @param _va New value for member va
         */
        inline eProsima_user_DllExport void va(double _va)
        {
            m_va = _va;
        }

        /*!
         * @brief This function returns the value of member va
         * @return Value of member va
         */
        inline eProsima_user_DllExport double va() const
        {
            return m_va;
        }

        /*!
         * @brief This function returns a reference to member va
         * @return Reference to member va
         */
        inline eProsima_user_DllExport double& va()
        {
            return m_va;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Velocity2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_vx;
        double m_vy;
        double m_va;
    };
    /*!
     * @brief This class represents the structure Acceleration2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Acceleration2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Acceleration2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Acceleration2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Acceleration2D that will be copied.
         */
        eProsima_user_DllExport Acceleration2D(const Acceleration2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Acceleration2D that will be copied.
         */
        eProsima_user_DllExport Acceleration2D(Acceleration2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Acceleration2D that will be copied.
         */
        eProsima_user_DllExport Acceleration2D& operator=(const Acceleration2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Acceleration2D that will be copied.
         */
        eProsima_user_DllExport Acceleration2D& operator=(Acceleration2D &&x);
        
        /*!
         * @brief This function sets a value in member ax
         * @param _ax New value for member ax
         */
        inline eProsima_user_DllExport void ax(double _ax)
        {
            m_ax = _ax;
        }

        /*!
         * @brief This function returns the value of member ax
         * @return Value of member ax
         */
        inline eProsima_user_DllExport double ax() const
        {
            return m_ax;
        }

        /*!
         * @brief This function returns a reference to member ax
         * @return Reference to member ax
         */
        inline eProsima_user_DllExport double& ax()
        {
            return m_ax;
        }
        /*!
         * @brief This function sets a value in member ay
         * @param _ay New value for member ay
         */
        inline eProsima_user_DllExport void ay(double _ay)
        {
            m_ay = _ay;
        }

        /*!
         * @brief This function returns the value of member ay
         * @return Value of member ay
         */
        inline eProsima_user_DllExport double ay() const
        {
            return m_ay;
        }

        /*!
         * @brief This function returns a reference to member ay
         * @return Reference to member ay
         */
        inline eProsima_user_DllExport double& ay()
        {
            return m_ay;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Acceleration2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_ax;
        double m_ay;
    };
    /*!
     * @brief This class represents the structure PoseVel2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class PoseVel2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PoseVel2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PoseVel2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PoseVel2D that will be copied.
         */
        eProsima_user_DllExport PoseVel2D(const PoseVel2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PoseVel2D that will be copied.
         */
        eProsima_user_DllExport PoseVel2D(PoseVel2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PoseVel2D that will be copied.
         */
        eProsima_user_DllExport PoseVel2D& operator=(const PoseVel2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PoseVel2D that will be copied.
         */
        eProsima_user_DllExport PoseVel2D& operator=(PoseVel2D &&x);
        
        /*!
         * @brief This function copies the value in member pose
         * @param _pose New value to be copied in member pose
         */
        inline eProsima_user_DllExport void pose(const RTC::Pose2D &_pose)
        {
            m_pose = _pose;
        }

        /*!
         * @brief This function moves the value in member pose
         * @param _pose New value to be moved in member pose
         */
        inline eProsima_user_DllExport void pose(RTC::Pose2D &&_pose)
        {
            m_pose = std::move(_pose);
        }

        /*!
         * @brief This function returns a constant reference to member pose
         * @return Constant reference to member pose
         */
        inline eProsima_user_DllExport const RTC::Pose2D& pose() const
        {
            return m_pose;
        }

        /*!
         * @brief This function returns a reference to member pose
         * @return Reference to member pose
         */
        inline eProsima_user_DllExport RTC::Pose2D& pose()
        {
            return m_pose;
        }
        /*!
         * @brief This function copies the value in member velocities
         * @param _velocities New value to be copied in member velocities
         */
        inline eProsima_user_DllExport void velocities(const RTC::Velocity2D &_velocities)
        {
            m_velocities = _velocities;
        }

        /*!
         * @brief This function moves the value in member velocities
         * @param _velocities New value to be moved in member velocities
         */
        inline eProsima_user_DllExport void velocities(RTC::Velocity2D &&_velocities)
        {
            m_velocities = std::move(_velocities);
        }

        /*!
         * @brief This function returns a constant reference to member velocities
         * @return Constant reference to member velocities
         */
        inline eProsima_user_DllExport const RTC::Velocity2D& velocities() const
        {
            return m_velocities;
        }

        /*!
         * @brief This function returns a reference to member velocities
         * @return Reference to member velocities
         */
        inline eProsima_user_DllExport RTC::Velocity2D& velocities()
        {
            return m_velocities;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PoseVel2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose2D m_pose;
        RTC::Velocity2D m_velocities;
    };
    /*!
     * @brief This class represents the structure Size2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Size2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Size2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Size2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Size2D that will be copied.
         */
        eProsima_user_DllExport Size2D(const Size2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Size2D that will be copied.
         */
        eProsima_user_DllExport Size2D(Size2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Size2D that will be copied.
         */
        eProsima_user_DllExport Size2D& operator=(const Size2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Size2D that will be copied.
         */
        eProsima_user_DllExport Size2D& operator=(Size2D &&x);
        
        /*!
         * @brief This function sets a value in member l
         * @param _l New value for member l
         */
        inline eProsima_user_DllExport void l(double _l)
        {
            m_l = _l;
        }

        /*!
         * @brief This function returns the value of member l
         * @return Value of member l
         */
        inline eProsima_user_DllExport double l() const
        {
            return m_l;
        }

        /*!
         * @brief This function returns a reference to member l
         * @return Reference to member l
         */
        inline eProsima_user_DllExport double& l()
        {
            return m_l;
        }
        /*!
         * @brief This function sets a value in member w
         * @param _w New value for member w
         */
        inline eProsima_user_DllExport void w(double _w)
        {
            m_w = _w;
        }

        /*!
         * @brief This function returns the value of member w
         * @return Value of member w
         */
        inline eProsima_user_DllExport double w() const
        {
            return m_w;
        }

        /*!
         * @brief This function returns a reference to member w
         * @return Reference to member w
         */
        inline eProsima_user_DllExport double& w()
        {
            return m_w;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Size2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_l;
        double m_w;
    };
    /*!
     * @brief This class represents the structure Geometry2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Geometry2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Geometry2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Geometry2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Geometry2D that will be copied.
         */
        eProsima_user_DllExport Geometry2D(const Geometry2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Geometry2D that will be copied.
         */
        eProsima_user_DllExport Geometry2D(Geometry2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Geometry2D that will be copied.
         */
        eProsima_user_DllExport Geometry2D& operator=(const Geometry2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Geometry2D that will be copied.
         */
        eProsima_user_DllExport Geometry2D& operator=(Geometry2D &&x);
        
        /*!
         * @brief This function copies the value in member pose
         * @param _pose New value to be copied in member pose
         */
        inline eProsima_user_DllExport void pose(const RTC::Pose2D &_pose)
        {
            m_pose = _pose;
        }

        /*!
         * @brief This function moves the value in member pose
         * @param _pose New value to be moved in member pose
         */
        inline eProsima_user_DllExport void pose(RTC::Pose2D &&_pose)
        {
            m_pose = std::move(_pose);
        }

        /*!
         * @brief This function returns a constant reference to member pose
         * @return Constant reference to member pose
         */
        inline eProsima_user_DllExport const RTC::Pose2D& pose() const
        {
            return m_pose;
        }

        /*!
         * @brief This function returns a reference to member pose
         * @return Reference to member pose
         */
        inline eProsima_user_DllExport RTC::Pose2D& pose()
        {
            return m_pose;
        }
        /*!
         * @brief This function copies the value in member size
         * @param _size New value to be copied in member size
         */
        inline eProsima_user_DllExport void size(const RTC::Size2D &_size)
        {
            m_size = _size;
        }

        /*!
         * @brief This function moves the value in member size
         * @param _size New value to be moved in member size
         */
        inline eProsima_user_DllExport void size(RTC::Size2D &&_size)
        {
            m_size = std::move(_size);
        }

        /*!
         * @brief This function returns a constant reference to member size
         * @return Constant reference to member size
         */
        inline eProsima_user_DllExport const RTC::Size2D& size() const
        {
            return m_size;
        }

        /*!
         * @brief This function returns a reference to member size
         * @return Reference to member size
         */
        inline eProsima_user_DllExport RTC::Size2D& size()
        {
            return m_size;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Geometry2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose2D m_pose;
        RTC::Size2D m_size;
    };
    /*!
     * @brief This class represents the structure Covariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Covariance2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Covariance2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Covariance2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Covariance2D that will be copied.
         */
        eProsima_user_DllExport Covariance2D(const Covariance2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Covariance2D that will be copied.
         */
        eProsima_user_DllExport Covariance2D(Covariance2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Covariance2D that will be copied.
         */
        eProsima_user_DllExport Covariance2D& operator=(const Covariance2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Covariance2D that will be copied.
         */
        eProsima_user_DllExport Covariance2D& operator=(Covariance2D &&x);
        
        /*!
         * @brief This function sets a value in member xx
         * @param _xx New value for member xx
         */
        inline eProsima_user_DllExport void xx(double _xx)
        {
            m_xx = _xx;
        }

        /*!
         * @brief This function returns the value of member xx
         * @return Value of member xx
         */
        inline eProsima_user_DllExport double xx() const
        {
            return m_xx;
        }

        /*!
         * @brief This function returns a reference to member xx
         * @return Reference to member xx
         */
        inline eProsima_user_DllExport double& xx()
        {
            return m_xx;
        }
        /*!
         * @brief This function sets a value in member xy
         * @param _xy New value for member xy
         */
        inline eProsima_user_DllExport void xy(double _xy)
        {
            m_xy = _xy;
        }

        /*!
         * @brief This function returns the value of member xy
         * @return Value of member xy
         */
        inline eProsima_user_DllExport double xy() const
        {
            return m_xy;
        }

        /*!
         * @brief This function returns a reference to member xy
         * @return Reference to member xy
         */
        inline eProsima_user_DllExport double& xy()
        {
            return m_xy;
        }
        /*!
         * @brief This function sets a value in member xt
         * @param _xt New value for member xt
         */
        inline eProsima_user_DllExport void xt(double _xt)
        {
            m_xt = _xt;
        }

        /*!
         * @brief This function returns the value of member xt
         * @return Value of member xt
         */
        inline eProsima_user_DllExport double xt() const
        {
            return m_xt;
        }

        /*!
         * @brief This function returns a reference to member xt
         * @return Reference to member xt
         */
        inline eProsima_user_DllExport double& xt()
        {
            return m_xt;
        }
        /*!
         * @brief This function sets a value in member yy
         * @param _yy New value for member yy
         */
        inline eProsima_user_DllExport void yy(double _yy)
        {
            m_yy = _yy;
        }

        /*!
         * @brief This function returns the value of member yy
         * @return Value of member yy
         */
        inline eProsima_user_DllExport double yy() const
        {
            return m_yy;
        }

        /*!
         * @brief This function returns a reference to member yy
         * @return Reference to member yy
         */
        inline eProsima_user_DllExport double& yy()
        {
            return m_yy;
        }
        /*!
         * @brief This function sets a value in member yt
         * @param _yt New value for member yt
         */
        inline eProsima_user_DllExport void yt(double _yt)
        {
            m_yt = _yt;
        }

        /*!
         * @brief This function returns the value of member yt
         * @return Value of member yt
         */
        inline eProsima_user_DllExport double yt() const
        {
            return m_yt;
        }

        /*!
         * @brief This function returns a reference to member yt
         * @return Reference to member yt
         */
        inline eProsima_user_DllExport double& yt()
        {
            return m_yt;
        }
        /*!
         * @brief This function sets a value in member tt
         * @param _tt New value for member tt
         */
        inline eProsima_user_DllExport void tt(double _tt)
        {
            m_tt = _tt;
        }

        /*!
         * @brief This function returns the value of member tt
         * @return Value of member tt
         */
        inline eProsima_user_DllExport double tt() const
        {
            return m_tt;
        }

        /*!
         * @brief This function returns a reference to member tt
         * @return Reference to member tt
         */
        inline eProsima_user_DllExport double& tt()
        {
            return m_tt;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Covariance2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_xx;
        double m_xy;
        double m_xt;
        double m_yy;
        double m_yt;
        double m_tt;
    };
    /*!
     * @brief This class represents the structure PointCovariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class PointCovariance2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PointCovariance2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PointCovariance2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PointCovariance2D that will be copied.
         */
        eProsima_user_DllExport PointCovariance2D(const PointCovariance2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PointCovariance2D that will be copied.
         */
        eProsima_user_DllExport PointCovariance2D(PointCovariance2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PointCovariance2D that will be copied.
         */
        eProsima_user_DllExport PointCovariance2D& operator=(const PointCovariance2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PointCovariance2D that will be copied.
         */
        eProsima_user_DllExport PointCovariance2D& operator=(PointCovariance2D &&x);
        
        /*!
         * @brief This function sets a value in member xx
         * @param _xx New value for member xx
         */
        inline eProsima_user_DllExport void xx(double _xx)
        {
            m_xx = _xx;
        }

        /*!
         * @brief This function returns the value of member xx
         * @return Value of member xx
         */
        inline eProsima_user_DllExport double xx() const
        {
            return m_xx;
        }

        /*!
         * @brief This function returns a reference to member xx
         * @return Reference to member xx
         */
        inline eProsima_user_DllExport double& xx()
        {
            return m_xx;
        }
        /*!
         * @brief This function sets a value in member xy
         * @param _xy New value for member xy
         */
        inline eProsima_user_DllExport void xy(double _xy)
        {
            m_xy = _xy;
        }

        /*!
         * @brief This function returns the value of member xy
         * @return Value of member xy
         */
        inline eProsima_user_DllExport double xy() const
        {
            return m_xy;
        }

        /*!
         * @brief This function returns a reference to member xy
         * @return Reference to member xy
         */
        inline eProsima_user_DllExport double& xy()
        {
            return m_xy;
        }
        /*!
         * @brief This function sets a value in member yy
         * @param _yy New value for member yy
         */
        inline eProsima_user_DllExport void yy(double _yy)
        {
            m_yy = _yy;
        }

        /*!
         * @brief This function returns the value of member yy
         * @return Value of member yy
         */
        inline eProsima_user_DllExport double yy() const
        {
            return m_yy;
        }

        /*!
         * @brief This function returns a reference to member yy
         * @return Reference to member yy
         */
        inline eProsima_user_DllExport double& yy()
        {
            return m_yy;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PointCovariance2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_xx;
        double m_xy;
        double m_yy;
    };
    /*!
     * @brief This class represents the structure Carlike defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Carlike
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Carlike();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Carlike();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Carlike that will be copied.
         */
        eProsima_user_DllExport Carlike(const Carlike &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Carlike that will be copied.
         */
        eProsima_user_DllExport Carlike(Carlike &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Carlike that will be copied.
         */
        eProsima_user_DllExport Carlike& operator=(const Carlike &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Carlike that will be copied.
         */
        eProsima_user_DllExport Carlike& operator=(Carlike &&x);
        
        /*!
         * @brief This function sets a value in member speed
         * @param _speed New value for member speed
         */
        inline eProsima_user_DllExport void speed(double _speed)
        {
            m_speed = _speed;
        }

        /*!
         * @brief This function returns the value of member speed
         * @return Value of member speed
         */
        inline eProsima_user_DllExport double speed() const
        {
            return m_speed;
        }

        /*!
         * @brief This function returns a reference to member speed
         * @return Reference to member speed
         */
        inline eProsima_user_DllExport double& speed()
        {
            return m_speed;
        }
        /*!
         * @brief This function sets a value in member steeringAngle
         * @param _steeringAngle New value for member steeringAngle
         */
        inline eProsima_user_DllExport void steeringAngle(double _steeringAngle)
        {
            m_steeringAngle = _steeringAngle;
        }

        /*!
         * @brief This function returns the value of member steeringAngle
         * @return Value of member steeringAngle
         */
        inline eProsima_user_DllExport double steeringAngle() const
        {
            return m_steeringAngle;
        }

        /*!
         * @brief This function returns a reference to member steeringAngle
         * @return Reference to member steeringAngle
         */
        inline eProsima_user_DllExport double& steeringAngle()
        {
            return m_steeringAngle;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Carlike& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_speed;
        double m_steeringAngle;
    };
    /*!
     * @brief This class represents the structure SpeedHeading2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class SpeedHeading2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport SpeedHeading2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~SpeedHeading2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::SpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading2D(const SpeedHeading2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::SpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading2D(SpeedHeading2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::SpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading2D& operator=(const SpeedHeading2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::SpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading2D& operator=(SpeedHeading2D &&x);
        
        /*!
         * @brief This function sets a value in member speed
         * @param _speed New value for member speed
         */
        inline eProsima_user_DllExport void speed(double _speed)
        {
            m_speed = _speed;
        }

        /*!
         * @brief This function returns the value of member speed
         * @return Value of member speed
         */
        inline eProsima_user_DllExport double speed() const
        {
            return m_speed;
        }

        /*!
         * @brief This function returns a reference to member speed
         * @return Reference to member speed
         */
        inline eProsima_user_DllExport double& speed()
        {
            return m_speed;
        }
        /*!
         * @brief This function sets a value in member heading
         * @param _heading New value for member heading
         */
        inline eProsima_user_DllExport void heading(double _heading)
        {
            m_heading = _heading;
        }

        /*!
         * @brief This function returns the value of member heading
         * @return Value of member heading
         */
        inline eProsima_user_DllExport double heading() const
        {
            return m_heading;
        }

        /*!
         * @brief This function returns a reference to member heading
         * @return Reference to member heading
         */
        inline eProsima_user_DllExport double& heading()
        {
            return m_heading;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::SpeedHeading2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_speed;
        double m_heading;
    };
    /*!
     * @brief This class represents the structure Point3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Point3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Point3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Point3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Point3D that will be copied.
         */
        eProsima_user_DllExport Point3D(const Point3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Point3D that will be copied.
         */
        eProsima_user_DllExport Point3D(Point3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Point3D that will be copied.
         */
        eProsima_user_DllExport Point3D& operator=(const Point3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Point3D that will be copied.
         */
        eProsima_user_DllExport Point3D& operator=(Point3D &&x);
        
        /*!
         * @brief This function sets a value in member x
         * @param _x New value for member x
         */
        inline eProsima_user_DllExport void x(double _x)
        {
            m_x = _x;
        }

        /*!
         * @brief This function returns the value of member x
         * @return Value of member x
         */
        inline eProsima_user_DllExport double x() const
        {
            return m_x;
        }

        /*!
         * @brief This function returns a reference to member x
         * @return Reference to member x
         */
        inline eProsima_user_DllExport double& x()
        {
            return m_x;
        }
        /*!
         * @brief This function sets a value in member y
         * @param _y New value for member y
         */
        inline eProsima_user_DllExport void y(double _y)
        {
            m_y = _y;
        }

        /*!
         * @brief This function returns the value of member y
         * @return Value of member y
         */
        inline eProsima_user_DllExport double y() const
        {
            return m_y;
        }

        /*!
         * @brief This function returns a reference to member y
         * @return Reference to member y
         */
        inline eProsima_user_DllExport double& y()
        {
            return m_y;
        }
        /*!
         * @brief This function sets a value in member z
         * @param _z New value for member z
         */
        inline eProsima_user_DllExport void z(double _z)
        {
            m_z = _z;
        }

        /*!
         * @brief This function returns the value of member z
         * @return Value of member z
         */
        inline eProsima_user_DllExport double z() const
        {
            return m_z;
        }

        /*!
         * @brief This function returns a reference to member z
         * @return Reference to member z
         */
        inline eProsima_user_DllExport double& z()
        {
            return m_z;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Point3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_x;
        double m_y;
        double m_z;
    };
    /*!
     * @brief This class represents the structure Vector3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Vector3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Vector3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Vector3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Vector3D that will be copied.
         */
        eProsima_user_DllExport Vector3D(const Vector3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Vector3D that will be copied.
         */
        eProsima_user_DllExport Vector3D(Vector3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Vector3D that will be copied.
         */
        eProsima_user_DllExport Vector3D& operator=(const Vector3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Vector3D that will be copied.
         */
        eProsima_user_DllExport Vector3D& operator=(Vector3D &&x);
        
        /*!
         * @brief This function sets a value in member x
         * @param _x New value for member x
         */
        inline eProsima_user_DllExport void x(double _x)
        {
            m_x = _x;
        }

        /*!
         * @brief This function returns the value of member x
         * @return Value of member x
         */
        inline eProsima_user_DllExport double x() const
        {
            return m_x;
        }

        /*!
         * @brief This function returns a reference to member x
         * @return Reference to member x
         */
        inline eProsima_user_DllExport double& x()
        {
            return m_x;
        }
        /*!
         * @brief This function sets a value in member y
         * @param _y New value for member y
         */
        inline eProsima_user_DllExport void y(double _y)
        {
            m_y = _y;
        }

        /*!
         * @brief This function returns the value of member y
         * @return Value of member y
         */
        inline eProsima_user_DllExport double y() const
        {
            return m_y;
        }

        /*!
         * @brief This function returns a reference to member y
         * @return Reference to member y
         */
        inline eProsima_user_DllExport double& y()
        {
            return m_y;
        }
        /*!
         * @brief This function sets a value in member z
         * @param _z New value for member z
         */
        inline eProsima_user_DllExport void z(double _z)
        {
            m_z = _z;
        }

        /*!
         * @brief This function returns the value of member z
         * @return Value of member z
         */
        inline eProsima_user_DllExport double z() const
        {
            return m_z;
        }

        /*!
         * @brief This function returns a reference to member z
         * @return Reference to member z
         */
        inline eProsima_user_DllExport double& z()
        {
            return m_z;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Vector3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_x;
        double m_y;
        double m_z;
    };
    /*!
     * @brief This class represents the structure Orientation3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Orientation3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Orientation3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Orientation3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Orientation3D that will be copied.
         */
        eProsima_user_DllExport Orientation3D(const Orientation3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Orientation3D that will be copied.
         */
        eProsima_user_DllExport Orientation3D(Orientation3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Orientation3D that will be copied.
         */
        eProsima_user_DllExport Orientation3D& operator=(const Orientation3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Orientation3D that will be copied.
         */
        eProsima_user_DllExport Orientation3D& operator=(Orientation3D &&x);
        
        /*!
         * @brief This function sets a value in member r
         * @param _r New value for member r
         */
        inline eProsima_user_DllExport void r(double _r)
        {
            m_r = _r;
        }

        /*!
         * @brief This function returns the value of member r
         * @return Value of member r
         */
        inline eProsima_user_DllExport double r() const
        {
            return m_r;
        }

        /*!
         * @brief This function returns a reference to member r
         * @return Reference to member r
         */
        inline eProsima_user_DllExport double& r()
        {
            return m_r;
        }
        /*!
         * @brief This function sets a value in member p
         * @param _p New value for member p
         */
        inline eProsima_user_DllExport void p(double _p)
        {
            m_p = _p;
        }

        /*!
         * @brief This function returns the value of member p
         * @return Value of member p
         */
        inline eProsima_user_DllExport double p() const
        {
            return m_p;
        }

        /*!
         * @brief This function returns a reference to member p
         * @return Reference to member p
         */
        inline eProsima_user_DllExport double& p()
        {
            return m_p;
        }
        /*!
         * @brief This function sets a value in member y
         * @param _y New value for member y
         */
        inline eProsima_user_DllExport void y(double _y)
        {
            m_y = _y;
        }

        /*!
         * @brief This function returns the value of member y
         * @return Value of member y
         */
        inline eProsima_user_DllExport double y() const
        {
            return m_y;
        }

        /*!
         * @brief This function returns a reference to member y
         * @return Reference to member y
         */
        inline eProsima_user_DllExport double& y()
        {
            return m_y;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Orientation3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_r;
        double m_p;
        double m_y;
    };
    /*!
     * @brief This class represents the structure Pose3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Pose3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Pose3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Pose3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Pose3D that will be copied.
         */
        eProsima_user_DllExport Pose3D(const Pose3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Pose3D that will be copied.
         */
        eProsima_user_DllExport Pose3D(Pose3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Pose3D that will be copied.
         */
        eProsima_user_DllExport Pose3D& operator=(const Pose3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Pose3D that will be copied.
         */
        eProsima_user_DllExport Pose3D& operator=(Pose3D &&x);
        
        /*!
         * @brief This function copies the value in member position
         * @param _position New value to be copied in member position
         */
        inline eProsima_user_DllExport void position(const RTC::Point3D &_position)
        {
            m_position = _position;
        }

        /*!
         * @brief This function moves the value in member position
         * @param _position New value to be moved in member position
         */
        inline eProsima_user_DllExport void position(RTC::Point3D &&_position)
        {
            m_position = std::move(_position);
        }

        /*!
         * @brief This function returns a constant reference to member position
         * @return Constant reference to member position
         */
        inline eProsima_user_DllExport const RTC::Point3D& position() const
        {
            return m_position;
        }

        /*!
         * @brief This function returns a reference to member position
         * @return Reference to member position
         */
        inline eProsima_user_DllExport RTC::Point3D& position()
        {
            return m_position;
        }
        /*!
         * @brief This function copies the value in member orientation
         * @param _orientation New value to be copied in member orientation
         */
        inline eProsima_user_DllExport void orientation(const RTC::Orientation3D &_orientation)
        {
            m_orientation = _orientation;
        }

        /*!
         * @brief This function moves the value in member orientation
         * @param _orientation New value to be moved in member orientation
         */
        inline eProsima_user_DllExport void orientation(RTC::Orientation3D &&_orientation)
        {
            m_orientation = std::move(_orientation);
        }

        /*!
         * @brief This function returns a constant reference to member orientation
         * @return Constant reference to member orientation
         */
        inline eProsima_user_DllExport const RTC::Orientation3D& orientation() const
        {
            return m_orientation;
        }

        /*!
         * @brief This function returns a reference to member orientation
         * @return Reference to member orientation
         */
        inline eProsima_user_DllExport RTC::Orientation3D& orientation()
        {
            return m_orientation;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Pose3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Point3D m_position;
        RTC::Orientation3D m_orientation;
    };
    /*!
     * @brief This class represents the structure Velocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Velocity3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Velocity3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Velocity3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Velocity3D that will be copied.
         */
        eProsima_user_DllExport Velocity3D(const Velocity3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Velocity3D that will be copied.
         */
        eProsima_user_DllExport Velocity3D(Velocity3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Velocity3D that will be copied.
         */
        eProsima_user_DllExport Velocity3D& operator=(const Velocity3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Velocity3D that will be copied.
         */
        eProsima_user_DllExport Velocity3D& operator=(Velocity3D &&x);
        
        /*!
         * @brief This function sets a value in member vx
         * @param _vx New value for member vx
         */
        inline eProsima_user_DllExport void vx(double _vx)
        {
            m_vx = _vx;
        }

        /*!
         * @brief This function returns the value of member vx
         * @return Value of member vx
         */
        inline eProsima_user_DllExport double vx() const
        {
            return m_vx;
        }

        /*!
         * @brief This function returns a reference to member vx
         * @return Reference to member vx
         */
        inline eProsima_user_DllExport double& vx()
        {
            return m_vx;
        }
        /*!
         * @brief This function sets a value in member vy
         * @param _vy New value for member vy
         */
        inline eProsima_user_DllExport void vy(double _vy)
        {
            m_vy = _vy;
        }

        /*!
         * @brief This function returns the value of member vy
         * @return Value of member vy
         */
        inline eProsima_user_DllExport double vy() const
        {
            return m_vy;
        }

        /*!
         * @brief This function returns a reference to member vy
         * @return Reference to member vy
         */
        inline eProsima_user_DllExport double& vy()
        {
            return m_vy;
        }
        /*!
         * @brief This function sets a value in member vz
         * @param _vz New value for member vz
         */
        inline eProsima_user_DllExport void vz(double _vz)
        {
            m_vz = _vz;
        }

        /*!
         * @brief This function returns the value of member vz
         * @return Value of member vz
         */
        inline eProsima_user_DllExport double vz() const
        {
            return m_vz;
        }

        /*!
         * @brief This function returns a reference to member vz
         * @return Reference to member vz
         */
        inline eProsima_user_DllExport double& vz()
        {
            return m_vz;
        }
        /*!
         * @brief This function sets a value in member vr
         * @param _vr New value for member vr
         */
        inline eProsima_user_DllExport void vr(double _vr)
        {
            m_vr = _vr;
        }

        /*!
         * @brief This function returns the value of member vr
         * @return Value of member vr
         */
        inline eProsima_user_DllExport double vr() const
        {
            return m_vr;
        }

        /*!
         * @brief This function returns a reference to member vr
         * @return Reference to member vr
         */
        inline eProsima_user_DllExport double& vr()
        {
            return m_vr;
        }
        /*!
         * @brief This function sets a value in member vp
         * @param _vp New value for member vp
         */
        inline eProsima_user_DllExport void vp(double _vp)
        {
            m_vp = _vp;
        }

        /*!
         * @brief This function returns the value of member vp
         * @return Value of member vp
         */
        inline eProsima_user_DllExport double vp() const
        {
            return m_vp;
        }

        /*!
         * @brief This function returns a reference to member vp
         * @return Reference to member vp
         */
        inline eProsima_user_DllExport double& vp()
        {
            return m_vp;
        }
        /*!
         * @brief This function sets a value in member va
         * @param _va New value for member va
         */
        inline eProsima_user_DllExport void va(double _va)
        {
            m_va = _va;
        }

        /*!
         * @brief This function returns the value of member va
         * @return Value of member va
         */
        inline eProsima_user_DllExport double va() const
        {
            return m_va;
        }

        /*!
         * @brief This function returns a reference to member va
         * @return Reference to member va
         */
        inline eProsima_user_DllExport double& va()
        {
            return m_va;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Velocity3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_vx;
        double m_vy;
        double m_vz;
        double m_vr;
        double m_vp;
        double m_va;
    };
    /*!
     * @brief This class represents the structure AngularVelocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class AngularVelocity3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport AngularVelocity3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~AngularVelocity3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::AngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport AngularVelocity3D(const AngularVelocity3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::AngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport AngularVelocity3D(AngularVelocity3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::AngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport AngularVelocity3D& operator=(const AngularVelocity3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::AngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport AngularVelocity3D& operator=(AngularVelocity3D &&x);
        
        /*!
         * @brief This function sets a value in member avx
         * @param _avx New value for member avx
         */
        inline eProsima_user_DllExport void avx(double _avx)
        {
            m_avx = _avx;
        }

        /*!
         * @brief This function returns the value of member avx
         * @return Value of member avx
         */
        inline eProsima_user_DllExport double avx() const
        {
            return m_avx;
        }

        /*!
         * @brief This function returns a reference to member avx
         * @return Reference to member avx
         */
        inline eProsima_user_DllExport double& avx()
        {
            return m_avx;
        }
        /*!
         * @brief This function sets a value in member avy
         * @param _avy New value for member avy
         */
        inline eProsima_user_DllExport void avy(double _avy)
        {
            m_avy = _avy;
        }

        /*!
         * @brief This function returns the value of member avy
         * @return Value of member avy
         */
        inline eProsima_user_DllExport double avy() const
        {
            return m_avy;
        }

        /*!
         * @brief This function returns a reference to member avy
         * @return Reference to member avy
         */
        inline eProsima_user_DllExport double& avy()
        {
            return m_avy;
        }
        /*!
         * @brief This function sets a value in member avz
         * @param _avz New value for member avz
         */
        inline eProsima_user_DllExport void avz(double _avz)
        {
            m_avz = _avz;
        }

        /*!
         * @brief This function returns the value of member avz
         * @return Value of member avz
         */
        inline eProsima_user_DllExport double avz() const
        {
            return m_avz;
        }

        /*!
         * @brief This function returns a reference to member avz
         * @return Reference to member avz
         */
        inline eProsima_user_DllExport double& avz()
        {
            return m_avz;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::AngularVelocity3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_avx;
        double m_avy;
        double m_avz;
    };
    /*!
     * @brief This class represents the structure Acceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Acceleration3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Acceleration3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Acceleration3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Acceleration3D that will be copied.
         */
        eProsima_user_DllExport Acceleration3D(const Acceleration3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Acceleration3D that will be copied.
         */
        eProsima_user_DllExport Acceleration3D(Acceleration3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Acceleration3D that will be copied.
         */
        eProsima_user_DllExport Acceleration3D& operator=(const Acceleration3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Acceleration3D that will be copied.
         */
        eProsima_user_DllExport Acceleration3D& operator=(Acceleration3D &&x);
        
        /*!
         * @brief This function sets a value in member ax
         * @param _ax New value for member ax
         */
        inline eProsima_user_DllExport void ax(double _ax)
        {
            m_ax = _ax;
        }

        /*!
         * @brief This function returns the value of member ax
         * @return Value of member ax
         */
        inline eProsima_user_DllExport double ax() const
        {
            return m_ax;
        }

        /*!
         * @brief This function returns a reference to member ax
         * @return Reference to member ax
         */
        inline eProsima_user_DllExport double& ax()
        {
            return m_ax;
        }
        /*!
         * @brief This function sets a value in member ay
         * @param _ay New value for member ay
         */
        inline eProsima_user_DllExport void ay(double _ay)
        {
            m_ay = _ay;
        }

        /*!
         * @brief This function returns the value of member ay
         * @return Value of member ay
         */
        inline eProsima_user_DllExport double ay() const
        {
            return m_ay;
        }

        /*!
         * @brief This function returns a reference to member ay
         * @return Reference to member ay
         */
        inline eProsima_user_DllExport double& ay()
        {
            return m_ay;
        }
        /*!
         * @brief This function sets a value in member az
         * @param _az New value for member az
         */
        inline eProsima_user_DllExport void az(double _az)
        {
            m_az = _az;
        }

        /*!
         * @brief This function returns the value of member az
         * @return Value of member az
         */
        inline eProsima_user_DllExport double az() const
        {
            return m_az;
        }

        /*!
         * @brief This function returns a reference to member az
         * @return Reference to member az
         */
        inline eProsima_user_DllExport double& az()
        {
            return m_az;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Acceleration3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_ax;
        double m_ay;
        double m_az;
    };
    /*!
     * @brief This class represents the structure AngularAcceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class AngularAcceleration3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport AngularAcceleration3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~AngularAcceleration3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::AngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport AngularAcceleration3D(const AngularAcceleration3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::AngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport AngularAcceleration3D(AngularAcceleration3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::AngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport AngularAcceleration3D& operator=(const AngularAcceleration3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::AngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport AngularAcceleration3D& operator=(AngularAcceleration3D &&x);
        
        /*!
         * @brief This function sets a value in member aax
         * @param _aax New value for member aax
         */
        inline eProsima_user_DllExport void aax(double _aax)
        {
            m_aax = _aax;
        }

        /*!
         * @brief This function returns the value of member aax
         * @return Value of member aax
         */
        inline eProsima_user_DllExport double aax() const
        {
            return m_aax;
        }

        /*!
         * @brief This function returns a reference to member aax
         * @return Reference to member aax
         */
        inline eProsima_user_DllExport double& aax()
        {
            return m_aax;
        }
        /*!
         * @brief This function sets a value in member aay
         * @param _aay New value for member aay
         */
        inline eProsima_user_DllExport void aay(double _aay)
        {
            m_aay = _aay;
        }

        /*!
         * @brief This function returns the value of member aay
         * @return Value of member aay
         */
        inline eProsima_user_DllExport double aay() const
        {
            return m_aay;
        }

        /*!
         * @brief This function returns a reference to member aay
         * @return Reference to member aay
         */
        inline eProsima_user_DllExport double& aay()
        {
            return m_aay;
        }
        /*!
         * @brief This function sets a value in member aaz
         * @param _aaz New value for member aaz
         */
        inline eProsima_user_DllExport void aaz(double _aaz)
        {
            m_aaz = _aaz;
        }

        /*!
         * @brief This function returns the value of member aaz
         * @return Value of member aaz
         */
        inline eProsima_user_DllExport double aaz() const
        {
            return m_aaz;
        }

        /*!
         * @brief This function returns a reference to member aaz
         * @return Reference to member aaz
         */
        inline eProsima_user_DllExport double& aaz()
        {
            return m_aaz;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::AngularAcceleration3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_aax;
        double m_aay;
        double m_aaz;
    };
    /*!
     * @brief This class represents the structure PoseVel3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class PoseVel3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PoseVel3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PoseVel3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PoseVel3D that will be copied.
         */
        eProsima_user_DllExport PoseVel3D(const PoseVel3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PoseVel3D that will be copied.
         */
        eProsima_user_DllExport PoseVel3D(PoseVel3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PoseVel3D that will be copied.
         */
        eProsima_user_DllExport PoseVel3D& operator=(const PoseVel3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PoseVel3D that will be copied.
         */
        eProsima_user_DllExport PoseVel3D& operator=(PoseVel3D &&x);
        
        /*!
         * @brief This function copies the value in member pose
         * @param _pose New value to be copied in member pose
         */
        inline eProsima_user_DllExport void pose(const RTC::Pose3D &_pose)
        {
            m_pose = _pose;
        }

        /*!
         * @brief This function moves the value in member pose
         * @param _pose New value to be moved in member pose
         */
        inline eProsima_user_DllExport void pose(RTC::Pose3D &&_pose)
        {
            m_pose = std::move(_pose);
        }

        /*!
         * @brief This function returns a constant reference to member pose
         * @return Constant reference to member pose
         */
        inline eProsima_user_DllExport const RTC::Pose3D& pose() const
        {
            return m_pose;
        }

        /*!
         * @brief This function returns a reference to member pose
         * @return Reference to member pose
         */
        inline eProsima_user_DllExport RTC::Pose3D& pose()
        {
            return m_pose;
        }
        /*!
         * @brief This function copies the value in member velocities
         * @param _velocities New value to be copied in member velocities
         */
        inline eProsima_user_DllExport void velocities(const RTC::Velocity3D &_velocities)
        {
            m_velocities = _velocities;
        }

        /*!
         * @brief This function moves the value in member velocities
         * @param _velocities New value to be moved in member velocities
         */
        inline eProsima_user_DllExport void velocities(RTC::Velocity3D &&_velocities)
        {
            m_velocities = std::move(_velocities);
        }

        /*!
         * @brief This function returns a constant reference to member velocities
         * @return Constant reference to member velocities
         */
        inline eProsima_user_DllExport const RTC::Velocity3D& velocities() const
        {
            return m_velocities;
        }

        /*!
         * @brief This function returns a reference to member velocities
         * @return Reference to member velocities
         */
        inline eProsima_user_DllExport RTC::Velocity3D& velocities()
        {
            return m_velocities;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PoseVel3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose3D m_pose;
        RTC::Velocity3D m_velocities;
    };
    /*!
     * @brief This class represents the structure Size3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Size3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Size3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Size3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Size3D that will be copied.
         */
        eProsima_user_DllExport Size3D(const Size3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Size3D that will be copied.
         */
        eProsima_user_DllExport Size3D(Size3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Size3D that will be copied.
         */
        eProsima_user_DllExport Size3D& operator=(const Size3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Size3D that will be copied.
         */
        eProsima_user_DllExport Size3D& operator=(Size3D &&x);
        
        /*!
         * @brief This function sets a value in member l
         * @param _l New value for member l
         */
        inline eProsima_user_DllExport void l(double _l)
        {
            m_l = _l;
        }

        /*!
         * @brief This function returns the value of member l
         * @return Value of member l
         */
        inline eProsima_user_DllExport double l() const
        {
            return m_l;
        }

        /*!
         * @brief This function returns a reference to member l
         * @return Reference to member l
         */
        inline eProsima_user_DllExport double& l()
        {
            return m_l;
        }
        /*!
         * @brief This function sets a value in member w
         * @param _w New value for member w
         */
        inline eProsima_user_DllExport void w(double _w)
        {
            m_w = _w;
        }

        /*!
         * @brief This function returns the value of member w
         * @return Value of member w
         */
        inline eProsima_user_DllExport double w() const
        {
            return m_w;
        }

        /*!
         * @brief This function returns a reference to member w
         * @return Reference to member w
         */
        inline eProsima_user_DllExport double& w()
        {
            return m_w;
        }
        /*!
         * @brief This function sets a value in member h
         * @param _h New value for member h
         */
        inline eProsima_user_DllExport void h(double _h)
        {
            m_h = _h;
        }

        /*!
         * @brief This function returns the value of member h
         * @return Value of member h
         */
        inline eProsima_user_DllExport double h() const
        {
            return m_h;
        }

        /*!
         * @brief This function returns a reference to member h
         * @return Reference to member h
         */
        inline eProsima_user_DllExport double& h()
        {
            return m_h;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Size3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_l;
        double m_w;
        double m_h;
    };
    /*!
     * @brief This class represents the structure Geometry3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Geometry3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Geometry3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Geometry3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Geometry3D that will be copied.
         */
        eProsima_user_DllExport Geometry3D(const Geometry3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Geometry3D that will be copied.
         */
        eProsima_user_DllExport Geometry3D(Geometry3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Geometry3D that will be copied.
         */
        eProsima_user_DllExport Geometry3D& operator=(const Geometry3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Geometry3D that will be copied.
         */
        eProsima_user_DllExport Geometry3D& operator=(Geometry3D &&x);
        
        /*!
         * @brief This function copies the value in member pose
         * @param _pose New value to be copied in member pose
         */
        inline eProsima_user_DllExport void pose(const RTC::Pose3D &_pose)
        {
            m_pose = _pose;
        }

        /*!
         * @brief This function moves the value in member pose
         * @param _pose New value to be moved in member pose
         */
        inline eProsima_user_DllExport void pose(RTC::Pose3D &&_pose)
        {
            m_pose = std::move(_pose);
        }

        /*!
         * @brief This function returns a constant reference to member pose
         * @return Constant reference to member pose
         */
        inline eProsima_user_DllExport const RTC::Pose3D& pose() const
        {
            return m_pose;
        }

        /*!
         * @brief This function returns a reference to member pose
         * @return Reference to member pose
         */
        inline eProsima_user_DllExport RTC::Pose3D& pose()
        {
            return m_pose;
        }
        /*!
         * @brief This function copies the value in member size
         * @param _size New value to be copied in member size
         */
        inline eProsima_user_DllExport void size(const RTC::Size3D &_size)
        {
            m_size = _size;
        }

        /*!
         * @brief This function moves the value in member size
         * @param _size New value to be moved in member size
         */
        inline eProsima_user_DllExport void size(RTC::Size3D &&_size)
        {
            m_size = std::move(_size);
        }

        /*!
         * @brief This function returns a constant reference to member size
         * @return Constant reference to member size
         */
        inline eProsima_user_DllExport const RTC::Size3D& size() const
        {
            return m_size;
        }

        /*!
         * @brief This function returns a reference to member size
         * @return Reference to member size
         */
        inline eProsima_user_DllExport RTC::Size3D& size()
        {
            return m_size;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Geometry3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose3D m_pose;
        RTC::Size3D m_size;
    };
    /*!
     * @brief This class represents the structure Covariance3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Covariance3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Covariance3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Covariance3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Covariance3D that will be copied.
         */
        eProsima_user_DllExport Covariance3D(const Covariance3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Covariance3D that will be copied.
         */
        eProsima_user_DllExport Covariance3D(Covariance3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Covariance3D that will be copied.
         */
        eProsima_user_DllExport Covariance3D& operator=(const Covariance3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Covariance3D that will be copied.
         */
        eProsima_user_DllExport Covariance3D& operator=(Covariance3D &&x);
        
        /*!
         * @brief This function sets a value in member xx
         * @param _xx New value for member xx
         */
        inline eProsima_user_DllExport void xx(double _xx)
        {
            m_xx = _xx;
        }

        /*!
         * @brief This function returns the value of member xx
         * @return Value of member xx
         */
        inline eProsima_user_DllExport double xx() const
        {
            return m_xx;
        }

        /*!
         * @brief This function returns a reference to member xx
         * @return Reference to member xx
         */
        inline eProsima_user_DllExport double& xx()
        {
            return m_xx;
        }
        /*!
         * @brief This function sets a value in member xy
         * @param _xy New value for member xy
         */
        inline eProsima_user_DllExport void xy(double _xy)
        {
            m_xy = _xy;
        }

        /*!
         * @brief This function returns the value of member xy
         * @return Value of member xy
         */
        inline eProsima_user_DllExport double xy() const
        {
            return m_xy;
        }

        /*!
         * @brief This function returns a reference to member xy
         * @return Reference to member xy
         */
        inline eProsima_user_DllExport double& xy()
        {
            return m_xy;
        }
        /*!
         * @brief This function sets a value in member xz
         * @param _xz New value for member xz
         */
        inline eProsima_user_DllExport void xz(double _xz)
        {
            m_xz = _xz;
        }

        /*!
         * @brief This function returns the value of member xz
         * @return Value of member xz
         */
        inline eProsima_user_DllExport double xz() const
        {
            return m_xz;
        }

        /*!
         * @brief This function returns a reference to member xz
         * @return Reference to member xz
         */
        inline eProsima_user_DllExport double& xz()
        {
            return m_xz;
        }
        /*!
         * @brief This function sets a value in member xr
         * @param _xr New value for member xr
         */
        inline eProsima_user_DllExport void xr(double _xr)
        {
            m_xr = _xr;
        }

        /*!
         * @brief This function returns the value of member xr
         * @return Value of member xr
         */
        inline eProsima_user_DllExport double xr() const
        {
            return m_xr;
        }

        /*!
         * @brief This function returns a reference to member xr
         * @return Reference to member xr
         */
        inline eProsima_user_DllExport double& xr()
        {
            return m_xr;
        }
        /*!
         * @brief This function sets a value in member xp
         * @param _xp New value for member xp
         */
        inline eProsima_user_DllExport void xp(double _xp)
        {
            m_xp = _xp;
        }

        /*!
         * @brief This function returns the value of member xp
         * @return Value of member xp
         */
        inline eProsima_user_DllExport double xp() const
        {
            return m_xp;
        }

        /*!
         * @brief This function returns a reference to member xp
         * @return Reference to member xp
         */
        inline eProsima_user_DllExport double& xp()
        {
            return m_xp;
        }
        /*!
         * @brief This function sets a value in member xa
         * @param _xa New value for member xa
         */
        inline eProsima_user_DllExport void xa(double _xa)
        {
            m_xa = _xa;
        }

        /*!
         * @brief This function returns the value of member xa
         * @return Value of member xa
         */
        inline eProsima_user_DllExport double xa() const
        {
            return m_xa;
        }

        /*!
         * @brief This function returns a reference to member xa
         * @return Reference to member xa
         */
        inline eProsima_user_DllExport double& xa()
        {
            return m_xa;
        }
        /*!
         * @brief This function sets a value in member yy
         * @param _yy New value for member yy
         */
        inline eProsima_user_DllExport void yy(double _yy)
        {
            m_yy = _yy;
        }

        /*!
         * @brief This function returns the value of member yy
         * @return Value of member yy
         */
        inline eProsima_user_DllExport double yy() const
        {
            return m_yy;
        }

        /*!
         * @brief This function returns a reference to member yy
         * @return Reference to member yy
         */
        inline eProsima_user_DllExport double& yy()
        {
            return m_yy;
        }
        /*!
         * @brief This function sets a value in member yz
         * @param _yz New value for member yz
         */
        inline eProsima_user_DllExport void yz(double _yz)
        {
            m_yz = _yz;
        }

        /*!
         * @brief This function returns the value of member yz
         * @return Value of member yz
         */
        inline eProsima_user_DllExport double yz() const
        {
            return m_yz;
        }

        /*!
         * @brief This function returns a reference to member yz
         * @return Reference to member yz
         */
        inline eProsima_user_DllExport double& yz()
        {
            return m_yz;
        }
        /*!
         * @brief This function sets a value in member yr
         * @param _yr New value for member yr
         */
        inline eProsima_user_DllExport void yr(double _yr)
        {
            m_yr = _yr;
        }

        /*!
         * @brief This function returns the value of member yr
         * @return Value of member yr
         */
        inline eProsima_user_DllExport double yr() const
        {
            return m_yr;
        }

        /*!
         * @brief This function returns a reference to member yr
         * @return Reference to member yr
         */
        inline eProsima_user_DllExport double& yr()
        {
            return m_yr;
        }
        /*!
         * @brief This function sets a value in member yp
         * @param _yp New value for member yp
         */
        inline eProsima_user_DllExport void yp(double _yp)
        {
            m_yp = _yp;
        }

        /*!
         * @brief This function returns the value of member yp
         * @return Value of member yp
         */
        inline eProsima_user_DllExport double yp() const
        {
            return m_yp;
        }

        /*!
         * @brief This function returns a reference to member yp
         * @return Reference to member yp
         */
        inline eProsima_user_DllExport double& yp()
        {
            return m_yp;
        }
        /*!
         * @brief This function sets a value in member ya
         * @param _ya New value for member ya
         */
        inline eProsima_user_DllExport void ya(double _ya)
        {
            m_ya = _ya;
        }

        /*!
         * @brief This function returns the value of member ya
         * @return Value of member ya
         */
        inline eProsima_user_DllExport double ya() const
        {
            return m_ya;
        }

        /*!
         * @brief This function returns a reference to member ya
         * @return Reference to member ya
         */
        inline eProsima_user_DllExport double& ya()
        {
            return m_ya;
        }
        /*!
         * @brief This function sets a value in member zz
         * @param _zz New value for member zz
         */
        inline eProsima_user_DllExport void zz(double _zz)
        {
            m_zz = _zz;
        }

        /*!
         * @brief This function returns the value of member zz
         * @return Value of member zz
         */
        inline eProsima_user_DllExport double zz() const
        {
            return m_zz;
        }

        /*!
         * @brief This function returns a reference to member zz
         * @return Reference to member zz
         */
        inline eProsima_user_DllExport double& zz()
        {
            return m_zz;
        }
        /*!
         * @brief This function sets a value in member zr
         * @param _zr New value for member zr
         */
        inline eProsima_user_DllExport void zr(double _zr)
        {
            m_zr = _zr;
        }

        /*!
         * @brief This function returns the value of member zr
         * @return Value of member zr
         */
        inline eProsima_user_DllExport double zr() const
        {
            return m_zr;
        }

        /*!
         * @brief This function returns a reference to member zr
         * @return Reference to member zr
         */
        inline eProsima_user_DllExport double& zr()
        {
            return m_zr;
        }
        /*!
         * @brief This function sets a value in member zp
         * @param _zp New value for member zp
         */
        inline eProsima_user_DllExport void zp(double _zp)
        {
            m_zp = _zp;
        }

        /*!
         * @brief This function returns the value of member zp
         * @return Value of member zp
         */
        inline eProsima_user_DllExport double zp() const
        {
            return m_zp;
        }

        /*!
         * @brief This function returns a reference to member zp
         * @return Reference to member zp
         */
        inline eProsima_user_DllExport double& zp()
        {
            return m_zp;
        }
        /*!
         * @brief This function sets a value in member za
         * @param _za New value for member za
         */
        inline eProsima_user_DllExport void za(double _za)
        {
            m_za = _za;
        }

        /*!
         * @brief This function returns the value of member za
         * @return Value of member za
         */
        inline eProsima_user_DllExport double za() const
        {
            return m_za;
        }

        /*!
         * @brief This function returns a reference to member za
         * @return Reference to member za
         */
        inline eProsima_user_DllExport double& za()
        {
            return m_za;
        }
        /*!
         * @brief This function sets a value in member rr
         * @param _rr New value for member rr
         */
        inline eProsima_user_DllExport void rr(double _rr)
        {
            m_rr = _rr;
        }

        /*!
         * @brief This function returns the value of member rr
         * @return Value of member rr
         */
        inline eProsima_user_DllExport double rr() const
        {
            return m_rr;
        }

        /*!
         * @brief This function returns a reference to member rr
         * @return Reference to member rr
         */
        inline eProsima_user_DllExport double& rr()
        {
            return m_rr;
        }
        /*!
         * @brief This function sets a value in member rp
         * @param _rp New value for member rp
         */
        inline eProsima_user_DllExport void rp(double _rp)
        {
            m_rp = _rp;
        }

        /*!
         * @brief This function returns the value of member rp
         * @return Value of member rp
         */
        inline eProsima_user_DllExport double rp() const
        {
            return m_rp;
        }

        /*!
         * @brief This function returns a reference to member rp
         * @return Reference to member rp
         */
        inline eProsima_user_DllExport double& rp()
        {
            return m_rp;
        }
        /*!
         * @brief This function sets a value in member ra
         * @param _ra New value for member ra
         */
        inline eProsima_user_DllExport void ra(double _ra)
        {
            m_ra = _ra;
        }

        /*!
         * @brief This function returns the value of member ra
         * @return Value of member ra
         */
        inline eProsima_user_DllExport double ra() const
        {
            return m_ra;
        }

        /*!
         * @brief This function returns a reference to member ra
         * @return Reference to member ra
         */
        inline eProsima_user_DllExport double& ra()
        {
            return m_ra;
        }
        /*!
         * @brief This function sets a value in member pp
         * @param _pp New value for member pp
         */
        inline eProsima_user_DllExport void pp(double _pp)
        {
            m_pp = _pp;
        }

        /*!
         * @brief This function returns the value of member pp
         * @return Value of member pp
         */
        inline eProsima_user_DllExport double pp() const
        {
            return m_pp;
        }

        /*!
         * @brief This function returns a reference to member pp
         * @return Reference to member pp
         */
        inline eProsima_user_DllExport double& pp()
        {
            return m_pp;
        }
        /*!
         * @brief This function sets a value in member pa
         * @param _pa New value for member pa
         */
        inline eProsima_user_DllExport void pa(double _pa)
        {
            m_pa = _pa;
        }

        /*!
         * @brief This function returns the value of member pa
         * @return Value of member pa
         */
        inline eProsima_user_DllExport double pa() const
        {
            return m_pa;
        }

        /*!
         * @brief This function returns a reference to member pa
         * @return Reference to member pa
         */
        inline eProsima_user_DllExport double& pa()
        {
            return m_pa;
        }
        /*!
         * @brief This function sets a value in member aa
         * @param _aa New value for member aa
         */
        inline eProsima_user_DllExport void aa(double _aa)
        {
            m_aa = _aa;
        }

        /*!
         * @brief This function returns the value of member aa
         * @return Value of member aa
         */
        inline eProsima_user_DllExport double aa() const
        {
            return m_aa;
        }

        /*!
         * @brief This function returns a reference to member aa
         * @return Reference to member aa
         */
        inline eProsima_user_DllExport double& aa()
        {
            return m_aa;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Covariance3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_xx;
        double m_xy;
        double m_xz;
        double m_xr;
        double m_xp;
        double m_xa;
        double m_yy;
        double m_yz;
        double m_yr;
        double m_yp;
        double m_ya;
        double m_zz;
        double m_zr;
        double m_zp;
        double m_za;
        double m_rr;
        double m_rp;
        double m_ra;
        double m_pp;
        double m_pa;
        double m_aa;
    };
    /*!
     * @brief This class represents the structure SpeedHeading3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class SpeedHeading3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport SpeedHeading3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~SpeedHeading3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::SpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading3D(const SpeedHeading3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::SpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading3D(SpeedHeading3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::SpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading3D& operator=(const SpeedHeading3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::SpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport SpeedHeading3D& operator=(SpeedHeading3D &&x);
        
        /*!
         * @brief This function sets a value in member speed
         * @param _speed New value for member speed
         */
        inline eProsima_user_DllExport void speed(double _speed)
        {
            m_speed = _speed;
        }

        /*!
         * @brief This function returns the value of member speed
         * @return Value of member speed
         */
        inline eProsima_user_DllExport double speed() const
        {
            return m_speed;
        }

        /*!
         * @brief This function returns a reference to member speed
         * @return Reference to member speed
         */
        inline eProsima_user_DllExport double& speed()
        {
            return m_speed;
        }
        /*!
         * @brief This function copies the value in member direction
         * @param _direction New value to be copied in member direction
         */
        inline eProsima_user_DllExport void direction(const RTC::Orientation3D &_direction)
        {
            m_direction = _direction;
        }

        /*!
         * @brief This function moves the value in member direction
         * @param _direction New value to be moved in member direction
         */
        inline eProsima_user_DllExport void direction(RTC::Orientation3D &&_direction)
        {
            m_direction = std::move(_direction);
        }

        /*!
         * @brief This function returns a constant reference to member direction
         * @return Constant reference to member direction
         */
        inline eProsima_user_DllExport const RTC::Orientation3D& direction() const
        {
            return m_direction;
        }

        /*!
         * @brief This function returns a reference to member direction
         * @return Reference to member direction
         */
        inline eProsima_user_DllExport RTC::Orientation3D& direction()
        {
            return m_direction;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::SpeedHeading3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_speed;
        RTC::Orientation3D m_direction;
    };
    /*!
     * @brief This class represents the structure OAP defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class OAP
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OAP();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OAP();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::OAP that will be copied.
         */
        eProsima_user_DllExport OAP(const OAP &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::OAP that will be copied.
         */
        eProsima_user_DllExport OAP(OAP &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::OAP that will be copied.
         */
        eProsima_user_DllExport OAP& operator=(const OAP &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::OAP that will be copied.
         */
        eProsima_user_DllExport OAP& operator=(OAP &&x);
        
        /*!
         * @brief This function copies the value in member orientation
         * @param _orientation New value to be copied in member orientation
         */
        inline eProsima_user_DllExport void orientation(const RTC::Vector3D &_orientation)
        {
            m_orientation = _orientation;
        }

        /*!
         * @brief This function moves the value in member orientation
         * @param _orientation New value to be moved in member orientation
         */
        inline eProsima_user_DllExport void orientation(RTC::Vector3D &&_orientation)
        {
            m_orientation = std::move(_orientation);
        }

        /*!
         * @brief This function returns a constant reference to member orientation
         * @return Constant reference to member orientation
         */
        inline eProsima_user_DllExport const RTC::Vector3D& orientation() const
        {
            return m_orientation;
        }

        /*!
         * @brief This function returns a reference to member orientation
         * @return Reference to member orientation
         */
        inline eProsima_user_DllExport RTC::Vector3D& orientation()
        {
            return m_orientation;
        }
        /*!
         * @brief This function copies the value in member approach
         * @param _approach New value to be copied in member approach
         */
        inline eProsima_user_DllExport void approach(const RTC::Vector3D &_approach)
        {
            m_approach = _approach;
        }

        /*!
         * @brief This function moves the value in member approach
         * @param _approach New value to be moved in member approach
         */
        inline eProsima_user_DllExport void approach(RTC::Vector3D &&_approach)
        {
            m_approach = std::move(_approach);
        }

        /*!
         * @brief This function returns a constant reference to member approach
         * @return Constant reference to member approach
         */
        inline eProsima_user_DllExport const RTC::Vector3D& approach() const
        {
            return m_approach;
        }

        /*!
         * @brief This function returns a reference to member approach
         * @return Reference to member approach
         */
        inline eProsima_user_DllExport RTC::Vector3D& approach()
        {
            return m_approach;
        }
        /*!
         * @brief This function copies the value in member position
         * @param _position New value to be copied in member position
         */
        inline eProsima_user_DllExport void position(const RTC::Vector3D &_position)
        {
            m_position = _position;
        }

        /*!
         * @brief This function moves the value in member position
         * @param _position New value to be moved in member position
         */
        inline eProsima_user_DllExport void position(RTC::Vector3D &&_position)
        {
            m_position = std::move(_position);
        }

        /*!
         * @brief This function returns a constant reference to member position
         * @return Constant reference to member position
         */
        inline eProsima_user_DllExport const RTC::Vector3D& position() const
        {
            return m_position;
        }

        /*!
         * @brief This function returns a reference to member position
         * @return Reference to member position
         */
        inline eProsima_user_DllExport RTC::Vector3D& position()
        {
            return m_position;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::OAP& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Vector3D m_orientation;
        RTC::Vector3D m_approach;
        RTC::Vector3D m_position;
    };
    /*!
     * @brief This class represents the structure TimedRGBColour defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedRGBColour
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedRGBColour();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedRGBColour();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedRGBColour that will be copied.
         */
        eProsima_user_DllExport TimedRGBColour(const TimedRGBColour &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedRGBColour that will be copied.
         */
        eProsima_user_DllExport TimedRGBColour(TimedRGBColour &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedRGBColour that will be copied.
         */
        eProsima_user_DllExport TimedRGBColour& operator=(const TimedRGBColour &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedRGBColour that will be copied.
         */
        eProsima_user_DllExport TimedRGBColour& operator=(TimedRGBColour &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::RGBColour &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::RGBColour &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::RGBColour& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::RGBColour& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedRGBColour& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::RGBColour m_data;
    };
    /*!
     * @brief This class represents the structure TimedPoint2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoint2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedPoint2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedPoint2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedPoint2D that will be copied.
         */
        eProsima_user_DllExport TimedPoint2D(const TimedPoint2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedPoint2D that will be copied.
         */
        eProsima_user_DllExport TimedPoint2D(TimedPoint2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedPoint2D that will be copied.
         */
        eProsima_user_DllExport TimedPoint2D& operator=(const TimedPoint2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedPoint2D that will be copied.
         */
        eProsima_user_DllExport TimedPoint2D& operator=(TimedPoint2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Point2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Point2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Point2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Point2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedPoint2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Point2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedVector2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVector2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedVector2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedVector2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedVector2D that will be copied.
         */
        eProsima_user_DllExport TimedVector2D(const TimedVector2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedVector2D that will be copied.
         */
        eProsima_user_DllExport TimedVector2D(TimedVector2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedVector2D that will be copied.
         */
        eProsima_user_DllExport TimedVector2D& operator=(const TimedVector2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedVector2D that will be copied.
         */
        eProsima_user_DllExport TimedVector2D& operator=(TimedVector2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Vector2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Vector2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Vector2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Vector2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedVector2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Vector2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedPose2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPose2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedPose2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedPose2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedPose2D that will be copied.
         */
        eProsima_user_DllExport TimedPose2D(const TimedPose2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedPose2D that will be copied.
         */
        eProsima_user_DllExport TimedPose2D(TimedPose2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedPose2D that will be copied.
         */
        eProsima_user_DllExport TimedPose2D& operator=(const TimedPose2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedPose2D that will be copied.
         */
        eProsima_user_DllExport TimedPose2D& operator=(TimedPose2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Pose2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Pose2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Pose2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Pose2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedPose2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Pose2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedVelocity2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVelocity2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedVelocity2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedVelocity2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedVelocity2D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity2D(const TimedVelocity2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedVelocity2D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity2D(TimedVelocity2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedVelocity2D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity2D& operator=(const TimedVelocity2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedVelocity2D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity2D& operator=(TimedVelocity2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Velocity2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Velocity2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Velocity2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Velocity2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedVelocity2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Velocity2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedAcceleration2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAcceleration2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedAcceleration2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedAcceleration2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedAcceleration2D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration2D(const TimedAcceleration2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedAcceleration2D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration2D(TimedAcceleration2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedAcceleration2D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration2D& operator=(const TimedAcceleration2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedAcceleration2D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration2D& operator=(TimedAcceleration2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Acceleration2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Acceleration2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Acceleration2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Acceleration2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedAcceleration2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Acceleration2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedPoseVel2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoseVel2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedPoseVel2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedPoseVel2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedPoseVel2D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel2D(const TimedPoseVel2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedPoseVel2D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel2D(TimedPoseVel2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedPoseVel2D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel2D& operator=(const TimedPoseVel2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedPoseVel2D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel2D& operator=(TimedPoseVel2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::PoseVel2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::PoseVel2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::PoseVel2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::PoseVel2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedPoseVel2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::PoseVel2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedSize2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSize2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedSize2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedSize2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedSize2D that will be copied.
         */
        eProsima_user_DllExport TimedSize2D(const TimedSize2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedSize2D that will be copied.
         */
        eProsima_user_DllExport TimedSize2D(TimedSize2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedSize2D that will be copied.
         */
        eProsima_user_DllExport TimedSize2D& operator=(const TimedSize2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedSize2D that will be copied.
         */
        eProsima_user_DllExport TimedSize2D& operator=(TimedSize2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Size2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Size2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Size2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Size2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedSize2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Size2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedGeometry2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedGeometry2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedGeometry2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedGeometry2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedGeometry2D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry2D(const TimedGeometry2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedGeometry2D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry2D(TimedGeometry2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedGeometry2D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry2D& operator=(const TimedGeometry2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedGeometry2D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry2D& operator=(TimedGeometry2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Geometry2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Geometry2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Geometry2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Geometry2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedGeometry2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Geometry2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedCovariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedCovariance2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedCovariance2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedCovariance2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance2D(const TimedCovariance2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance2D(TimedCovariance2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance2D& operator=(const TimedCovariance2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance2D& operator=(TimedCovariance2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Covariance2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Covariance2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Covariance2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Covariance2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedCovariance2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Covariance2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedPointCovariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPointCovariance2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedPointCovariance2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedPointCovariance2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedPointCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedPointCovariance2D(const TimedPointCovariance2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedPointCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedPointCovariance2D(TimedPointCovariance2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedPointCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedPointCovariance2D& operator=(const TimedPointCovariance2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedPointCovariance2D that will be copied.
         */
        eProsima_user_DllExport TimedPointCovariance2D& operator=(TimedPointCovariance2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::PointCovariance2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::PointCovariance2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::PointCovariance2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::PointCovariance2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedPointCovariance2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::PointCovariance2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedCarlike defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedCarlike
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedCarlike();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedCarlike();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedCarlike that will be copied.
         */
        eProsima_user_DllExport TimedCarlike(const TimedCarlike &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedCarlike that will be copied.
         */
        eProsima_user_DllExport TimedCarlike(TimedCarlike &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedCarlike that will be copied.
         */
        eProsima_user_DllExport TimedCarlike& operator=(const TimedCarlike &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedCarlike that will be copied.
         */
        eProsima_user_DllExport TimedCarlike& operator=(TimedCarlike &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Carlike &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Carlike &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Carlike& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Carlike& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedCarlike& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Carlike m_data;
    };
    /*!
     * @brief This class represents the structure TimedSpeedHeading2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSpeedHeading2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedSpeedHeading2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedSpeedHeading2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedSpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading2D(const TimedSpeedHeading2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedSpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading2D(TimedSpeedHeading2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedSpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading2D& operator=(const TimedSpeedHeading2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedSpeedHeading2D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading2D& operator=(TimedSpeedHeading2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::SpeedHeading2D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::SpeedHeading2D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::SpeedHeading2D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::SpeedHeading2D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedSpeedHeading2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::SpeedHeading2D m_data;
    };
    /*!
     * @brief This class represents the structure TimedPoint3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoint3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedPoint3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedPoint3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedPoint3D that will be copied.
         */
        eProsima_user_DllExport TimedPoint3D(const TimedPoint3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedPoint3D that will be copied.
         */
        eProsima_user_DllExport TimedPoint3D(TimedPoint3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedPoint3D that will be copied.
         */
        eProsima_user_DllExport TimedPoint3D& operator=(const TimedPoint3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedPoint3D that will be copied.
         */
        eProsima_user_DllExport TimedPoint3D& operator=(TimedPoint3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Point3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Point3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Point3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Point3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedPoint3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Point3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedVector3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVector3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedVector3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedVector3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedVector3D that will be copied.
         */
        eProsima_user_DllExport TimedVector3D(const TimedVector3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedVector3D that will be copied.
         */
        eProsima_user_DllExport TimedVector3D(TimedVector3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedVector3D that will be copied.
         */
        eProsima_user_DllExport TimedVector3D& operator=(const TimedVector3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedVector3D that will be copied.
         */
        eProsima_user_DllExport TimedVector3D& operator=(TimedVector3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Vector3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Vector3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Vector3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Vector3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedVector3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Vector3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedOrientation3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedOrientation3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedOrientation3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedOrientation3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedOrientation3D that will be copied.
         */
        eProsima_user_DllExport TimedOrientation3D(const TimedOrientation3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedOrientation3D that will be copied.
         */
        eProsima_user_DllExport TimedOrientation3D(TimedOrientation3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedOrientation3D that will be copied.
         */
        eProsima_user_DllExport TimedOrientation3D& operator=(const TimedOrientation3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedOrientation3D that will be copied.
         */
        eProsima_user_DllExport TimedOrientation3D& operator=(TimedOrientation3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Orientation3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Orientation3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Orientation3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Orientation3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedOrientation3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Orientation3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedPose3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPose3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedPose3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedPose3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedPose3D that will be copied.
         */
        eProsima_user_DllExport TimedPose3D(const TimedPose3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedPose3D that will be copied.
         */
        eProsima_user_DllExport TimedPose3D(TimedPose3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedPose3D that will be copied.
         */
        eProsima_user_DllExport TimedPose3D& operator=(const TimedPose3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedPose3D that will be copied.
         */
        eProsima_user_DllExport TimedPose3D& operator=(TimedPose3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Pose3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Pose3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Pose3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Pose3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedPose3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Pose3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedVelocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVelocity3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedVelocity3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedVelocity3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity3D(const TimedVelocity3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity3D(TimedVelocity3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity3D& operator=(const TimedVelocity3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedVelocity3D& operator=(TimedVelocity3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Velocity3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Velocity3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Velocity3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Velocity3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedVelocity3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Velocity3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedAngularVelocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAngularVelocity3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedAngularVelocity3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedAngularVelocity3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedAngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularVelocity3D(const TimedAngularVelocity3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedAngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularVelocity3D(TimedAngularVelocity3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedAngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularVelocity3D& operator=(const TimedAngularVelocity3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedAngularVelocity3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularVelocity3D& operator=(TimedAngularVelocity3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::AngularVelocity3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::AngularVelocity3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::AngularVelocity3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::AngularVelocity3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedAngularVelocity3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::AngularVelocity3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedAcceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAcceleration3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedAcceleration3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedAcceleration3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration3D(const TimedAcceleration3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration3D(TimedAcceleration3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration3D& operator=(const TimedAcceleration3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAcceleration3D& operator=(TimedAcceleration3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Acceleration3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Acceleration3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Acceleration3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Acceleration3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedAcceleration3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Acceleration3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedAngularAcceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAngularAcceleration3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedAngularAcceleration3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedAngularAcceleration3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedAngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularAcceleration3D(const TimedAngularAcceleration3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedAngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularAcceleration3D(TimedAngularAcceleration3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedAngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularAcceleration3D& operator=(const TimedAngularAcceleration3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedAngularAcceleration3D that will be copied.
         */
        eProsima_user_DllExport TimedAngularAcceleration3D& operator=(TimedAngularAcceleration3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::AngularAcceleration3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::AngularAcceleration3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::AngularAcceleration3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::AngularAcceleration3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedAngularAcceleration3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::AngularAcceleration3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedPoseVel3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoseVel3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedPoseVel3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedPoseVel3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedPoseVel3D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel3D(const TimedPoseVel3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedPoseVel3D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel3D(TimedPoseVel3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedPoseVel3D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel3D& operator=(const TimedPoseVel3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedPoseVel3D that will be copied.
         */
        eProsima_user_DllExport TimedPoseVel3D& operator=(TimedPoseVel3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::PoseVel3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::PoseVel3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::PoseVel3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::PoseVel3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedPoseVel3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::PoseVel3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedSize3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSize3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedSize3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedSize3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedSize3D that will be copied.
         */
        eProsima_user_DllExport TimedSize3D(const TimedSize3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedSize3D that will be copied.
         */
        eProsima_user_DllExport TimedSize3D(TimedSize3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedSize3D that will be copied.
         */
        eProsima_user_DllExport TimedSize3D& operator=(const TimedSize3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedSize3D that will be copied.
         */
        eProsima_user_DllExport TimedSize3D& operator=(TimedSize3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Size3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Size3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Size3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Size3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedSize3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Size3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedGeometry3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedGeometry3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedGeometry3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedGeometry3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedGeometry3D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry3D(const TimedGeometry3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedGeometry3D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry3D(TimedGeometry3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedGeometry3D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry3D& operator=(const TimedGeometry3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedGeometry3D that will be copied.
         */
        eProsima_user_DllExport TimedGeometry3D& operator=(TimedGeometry3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Geometry3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Geometry3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Geometry3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Geometry3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedGeometry3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Geometry3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedCovariance3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedCovariance3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedCovariance3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedCovariance3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedCovariance3D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance3D(const TimedCovariance3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedCovariance3D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance3D(TimedCovariance3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedCovariance3D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance3D& operator=(const TimedCovariance3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedCovariance3D that will be copied.
         */
        eProsima_user_DllExport TimedCovariance3D& operator=(TimedCovariance3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Covariance3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Covariance3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Covariance3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Covariance3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedCovariance3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Covariance3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedSpeedHeading3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSpeedHeading3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedSpeedHeading3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedSpeedHeading3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedSpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading3D(const TimedSpeedHeading3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedSpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading3D(TimedSpeedHeading3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedSpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading3D& operator=(const TimedSpeedHeading3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedSpeedHeading3D that will be copied.
         */
        eProsima_user_DllExport TimedSpeedHeading3D& operator=(TimedSpeedHeading3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::SpeedHeading3D &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::SpeedHeading3D &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::SpeedHeading3D& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::SpeedHeading3D& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedSpeedHeading3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::SpeedHeading3D m_data;
    };
    /*!
     * @brief This class represents the structure TimedOAP defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedOAP
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedOAP();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedOAP();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedOAP that will be copied.
         */
        eProsima_user_DllExport TimedOAP(const TimedOAP &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedOAP that will be copied.
         */
        eProsima_user_DllExport TimedOAP(TimedOAP &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedOAP that will be copied.
         */
        eProsima_user_DllExport TimedOAP& operator=(const TimedOAP &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedOAP that will be copied.
         */
        eProsima_user_DllExport TimedOAP& operator=(TimedOAP &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::OAP &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::OAP &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::OAP& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::OAP& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedOAP& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::OAP m_data;
    };
    /*!
     * @brief This class represents the structure Quaternion defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Quaternion
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Quaternion();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Quaternion();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Quaternion that will be copied.
         */
        eProsima_user_DllExport Quaternion(const Quaternion &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Quaternion that will be copied.
         */
        eProsima_user_DllExport Quaternion(Quaternion &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Quaternion that will be copied.
         */
        eProsima_user_DllExport Quaternion& operator=(const Quaternion &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Quaternion that will be copied.
         */
        eProsima_user_DllExport Quaternion& operator=(Quaternion &&x);
        
        /*!
         * @brief This function sets a value in member x
         * @param _x New value for member x
         */
        inline eProsima_user_DllExport void x(double _x)
        {
            m_x = _x;
        }

        /*!
         * @brief This function returns the value of member x
         * @return Value of member x
         */
        inline eProsima_user_DllExport double x() const
        {
            return m_x;
        }

        /*!
         * @brief This function returns a reference to member x
         * @return Reference to member x
         */
        inline eProsima_user_DllExport double& x()
        {
            return m_x;
        }
        /*!
         * @brief This function sets a value in member y
         * @param _y New value for member y
         */
        inline eProsima_user_DllExport void y(double _y)
        {
            m_y = _y;
        }

        /*!
         * @brief This function returns the value of member y
         * @return Value of member y
         */
        inline eProsima_user_DllExport double y() const
        {
            return m_y;
        }

        /*!
         * @brief This function returns a reference to member y
         * @return Reference to member y
         */
        inline eProsima_user_DllExport double& y()
        {
            return m_y;
        }
        /*!
         * @brief This function sets a value in member z
         * @param _z New value for member z
         */
        inline eProsima_user_DllExport void z(double _z)
        {
            m_z = _z;
        }

        /*!
         * @brief This function returns the value of member z
         * @return Value of member z
         */
        inline eProsima_user_DllExport double z() const
        {
            return m_z;
        }

        /*!
         * @brief This function returns a reference to member z
         * @return Reference to member z
         */
        inline eProsima_user_DllExport double& z()
        {
            return m_z;
        }
        /*!
         * @brief This function sets a value in member w
         * @param _w New value for member w
         */
        inline eProsima_user_DllExport void w(double _w)
        {
            m_w = _w;
        }

        /*!
         * @brief This function returns the value of member w
         * @return Value of member w
         */
        inline eProsima_user_DllExport double w() const
        {
            return m_w;
        }

        /*!
         * @brief This function returns a reference to member w
         * @return Reference to member w
         */
        inline eProsima_user_DllExport double& w()
        {
            return m_w;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Quaternion& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_x;
        double m_y;
        double m_z;
        double m_w;
    };
    /*!
     * @brief This class represents the structure TimedQuaternion defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedQuaternion
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport TimedQuaternion();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~TimedQuaternion();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::TimedQuaternion that will be copied.
         */
        eProsima_user_DllExport TimedQuaternion(const TimedQuaternion &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::TimedQuaternion that will be copied.
         */
        eProsima_user_DllExport TimedQuaternion(TimedQuaternion &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::TimedQuaternion that will be copied.
         */
        eProsima_user_DllExport TimedQuaternion& operator=(const TimedQuaternion &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::TimedQuaternion that will be copied.
         */
        eProsima_user_DllExport TimedQuaternion& operator=(TimedQuaternion &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const RTC::Quaternion &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(RTC::Quaternion &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const RTC::Quaternion& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport RTC::Quaternion& data()
        {
            return m_data;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::TimedQuaternion& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Quaternion m_data;
    };
}

#endif // _RTC_EXTENDEDDATATYPES_H_