// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file InterfaceDataTypes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _RTC_INTERFACEDATATYPES_H_
#define _RTC_INTERFACEDATATYPES_H_

// TODO Poner en el contexto.
#include "ExtendedDataTypes.h"
#include "BasicDataType.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(InterfaceDataTypes_SOURCE)
#define InterfaceDataTypes_DllAPI __declspec( dllexport )
#else
#define InterfaceDataTypes_DllAPI __declspec( dllimport )
#endif // InterfaceDataTypes_SOURCE
#else
#define InterfaceDataTypes_DllAPI
#endif
#else
#define InterfaceDataTypes_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace RTC
{
    /*!
     * @brief This class represents the structure ActArrayActuatorPos defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorPos
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ActArrayActuatorPos();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ActArrayActuatorPos();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::ActArrayActuatorPos that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorPos(const ActArrayActuatorPos &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::ActArrayActuatorPos that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorPos(ActArrayActuatorPos &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::ActArrayActuatorPos that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorPos& operator=(const ActArrayActuatorPos &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::ActArrayActuatorPos that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorPos& operator=(ActArrayActuatorPos &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member index
         * @param _index New value for member index
         */
        inline eProsima_user_DllExport void index(uint16_t _index)
        {
            m_index = _index;
        }

        /*!
         * @brief This function returns the value of member index
         * @return Value of member index
         */
        inline eProsima_user_DllExport uint16_t index() const
        {
            return m_index;
        }

        /*!
         * @brief This function returns a reference to member index
         * @return Reference to member index
         */
        inline eProsima_user_DllExport uint16_t& index()
        {
            return m_index;
        }
        /*!
         * @brief This function sets a value in member position
         * @param _position New value for member position
         */
        inline eProsima_user_DllExport void position(double _position)
        {
            m_position = _position;
        }

        /*!
         * @brief This function returns the value of member position
         * @return Value of member position
         */
        inline eProsima_user_DllExport double position() const
        {
            return m_position;
        }

        /*!
         * @brief This function returns a reference to member position
         * @return Reference to member position
         */
        inline eProsima_user_DllExport double& position()
        {
            return m_position;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::ActArrayActuatorPos& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        uint16_t m_index;
        double m_position;
    };
    /*!
     * @brief This class represents the structure ActArrayActuatorSpeed defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorSpeed
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ActArrayActuatorSpeed();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ActArrayActuatorSpeed();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::ActArrayActuatorSpeed that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorSpeed(const ActArrayActuatorSpeed &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::ActArrayActuatorSpeed that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorSpeed(ActArrayActuatorSpeed &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::ActArrayActuatorSpeed that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorSpeed& operator=(const ActArrayActuatorSpeed &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::ActArrayActuatorSpeed that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorSpeed& operator=(ActArrayActuatorSpeed &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member index
         * @param _index New value for member index
         */
        inline eProsima_user_DllExport void index(uint16_t _index)
        {
            m_index = _index;
        }

        /*!
         * @brief This function returns the value of member index
         * @return Value of member index
         */
        inline eProsima_user_DllExport uint16_t index() const
        {
            return m_index;
        }

        /*!
         * @brief This function returns a reference to member index
         * @return Reference to member index
         */
        inline eProsima_user_DllExport uint16_t& index()
        {
            return m_index;
        }
        /*!
         * @brief This function sets a value in member speed
         * @param _speed New value for member speed
         */
        inline eProsima_user_DllExport void speed(double _speed)
        {
            m_speed = _speed;
        }

        /*!
         * @brief This function returns the value of member speed
         * @return Value of member speed
         */
        inline eProsima_user_DllExport double speed() const
        {
            return m_speed;
        }

        /*!
         * @brief This function returns a reference to member speed
         * @return Reference to member speed
         */
        inline eProsima_user_DllExport double& speed()
        {
            return m_speed;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::ActArrayActuatorSpeed& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        uint16_t m_index;
        double m_speed;
    };
    /*!
     * @brief This class represents the structure ActArrayActuatorCurrent defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorCurrent
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ActArrayActuatorCurrent();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ActArrayActuatorCurrent();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::ActArrayActuatorCurrent that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorCurrent(const ActArrayActuatorCurrent &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::ActArrayActuatorCurrent that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorCurrent(ActArrayActuatorCurrent &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::ActArrayActuatorCurrent that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorCurrent& operator=(const ActArrayActuatorCurrent &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::ActArrayActuatorCurrent that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorCurrent& operator=(ActArrayActuatorCurrent &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member index
         * @param _index New value for member index
         */
        inline eProsima_user_DllExport void index(uint16_t _index)
        {
            m_index = _index;
        }

        /*!
         * @brief This function returns the value of member index
         * @return Value of member index
         */
        inline eProsima_user_DllExport uint16_t index() const
        {
            return m_index;
        }

        /*!
         * @brief This function returns a reference to member index
         * @return Reference to member index
         */
        inline eProsima_user_DllExport uint16_t& index()
        {
            return m_index;
        }
        /*!
         * @brief This function sets a value in member current
         * @param _current New value for member current
         */
        inline eProsima_user_DllExport void current(double _current)
        {
            m_current = _current;
        }

        /*!
         * @brief This function returns the value of member current
         * @return Value of member current
         */
        inline eProsima_user_DllExport double current() const
        {
            return m_current;
        }

        /*!
         * @brief This function returns a reference to member current
         * @return Reference to member current
         */
        inline eProsima_user_DllExport double& current()
        {
            return m_current;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::ActArrayActuatorCurrent& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        uint16_t m_index;
        double m_current;
    };
    /*!
     * @brief This class represents the enumeration ActArrayActuatorStatus defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    enum ActArrayActuatorStatus : uint32_t
    {
        ACTUATOR_STATUS_IDLE,
        ACTUATOR_STATUS_MOVING,
        ACTUATOR_STATUS_BRAKED,
        ACTUATOR_STATUS_STALLED
    };
    /*!
     * @brief This class represents the structure Actuator defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Actuator
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Actuator();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Actuator();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Actuator that will be copied.
         */
        eProsima_user_DllExport Actuator(const Actuator &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Actuator that will be copied.
         */
        eProsima_user_DllExport Actuator(Actuator &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Actuator that will be copied.
         */
        eProsima_user_DllExport Actuator& operator=(const Actuator &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Actuator that will be copied.
         */
        eProsima_user_DllExport Actuator& operator=(Actuator &&x);
        
        /*!
         * @brief This function sets a value in member position
         * @param _position New value for member position
         */
        inline eProsima_user_DllExport void position(double _position)
        {
            m_position = _position;
        }

        /*!
         * @brief This function returns the value of member position
         * @return Value of member position
         */
        inline eProsima_user_DllExport double position() const
        {
            return m_position;
        }

        /*!
         * @brief This function returns a reference to member position
         * @return Reference to member position
         */
        inline eProsima_user_DllExport double& position()
        {
            return m_position;
        }
        /*!
         * @brief This function sets a value in member speed
         * @param _speed New value for member speed
         */
        inline eProsima_user_DllExport void speed(double _speed)
        {
            m_speed = _speed;
        }

        /*!
         * @brief This function returns the value of member speed
         * @return Value of member speed
         */
        inline eProsima_user_DllExport double speed() const
        {
            return m_speed;
        }

        /*!
         * @brief This function returns a reference to member speed
         * @return Reference to member speed
         */
        inline eProsima_user_DllExport double& speed()
        {
            return m_speed;
        }
        /*!
         * @brief This function sets a value in member accel
         * @param _accel New value for member accel
         */
        inline eProsima_user_DllExport void accel(double _accel)
        {
            m_accel = _accel;
        }

        /*!
         * @brief This function returns the value of member accel
         * @return Value of member accel
         */
        inline eProsima_user_DllExport double accel() const
        {
            return m_accel;
        }

        /*!
         * @brief This function returns a reference to member accel
         * @return Reference to member accel
         */
        inline eProsima_user_DllExport double& accel()
        {
            return m_accel;
        }
        /*!
         * @brief This function sets a value in member current
         * @param _current New value for member current
         */
        inline eProsima_user_DllExport void current(double _current)
        {
            m_current = _current;
        }

        /*!
         * @brief This function returns the value of member current
         * @return Value of member current
         */
        inline eProsima_user_DllExport double current() const
        {
            return m_current;
        }

        /*!
         * @brief This function returns a reference to member current
         * @return Reference to member current
         */
        inline eProsima_user_DllExport double& current()
        {
            return m_current;
        }
        /*!
         * @brief This function sets a value in member status
         * @param _status New value for member status
         */
        inline eProsima_user_DllExport void status(RTC::ActArrayActuatorStatus _status)
        {
            m_status = _status;
        }

        /*!
         * @brief This function returns the value of member status
         * @return Value of member status
         */
        inline eProsima_user_DllExport RTC::ActArrayActuatorStatus status() const
        {
            return m_status;
        }

        /*!
         * @brief This function returns a reference to member status
         * @return Reference to member status
         */
        inline eProsima_user_DllExport RTC::ActArrayActuatorStatus& status()
        {
            return m_status;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Actuator& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_position;
        double m_speed;
        double m_accel;
        double m_current;
        RTC::ActArrayActuatorStatus m_status;
    };
    typedef std::vector<RTC::Actuator> ActuatorList;
    /*!
     * @brief This class represents the structure ActArrayState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayState
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ActArrayState();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ActArrayState();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::ActArrayState that will be copied.
         */
        eProsima_user_DllExport ActArrayState(const ActArrayState &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::ActArrayState that will be copied.
         */
        eProsima_user_DllExport ActArrayState(ActArrayState &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::ActArrayState that will be copied.
         */
        eProsima_user_DllExport ActArrayState& operator=(const ActArrayState &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::ActArrayState that will be copied.
         */
        eProsima_user_DllExport ActArrayState& operator=(ActArrayState &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member actuators
         * @param _actuators New value to be copied in member actuators
         */
        inline eProsima_user_DllExport void actuators(const RTC::ActuatorList &_actuators)
        {
            m_actuators = _actuators;
        }

        /*!
         * @brief This function moves the value in member actuators
         * @param _actuators New value to be moved in member actuators
         */
        inline eProsima_user_DllExport void actuators(RTC::ActuatorList &&_actuators)
        {
            m_actuators = std::move(_actuators);
        }

        /*!
         * @brief This function returns a constant reference to member actuators
         * @return Constant reference to member actuators
         */
        inline eProsima_user_DllExport const RTC::ActuatorList& actuators() const
        {
            return m_actuators;
        }

        /*!
         * @brief This function returns a reference to member actuators
         * @return Reference to member actuators
         */
        inline eProsima_user_DllExport RTC::ActuatorList& actuators()
        {
            return m_actuators;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::ActArrayState& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::ActuatorList m_actuators;
    };
    /*!
     * @brief This class represents the enumeration ActArrayActuatorType defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    enum ActArrayActuatorType : uint32_t
    {
        ACTARRAY_ACTUATORTYPE_LINEAR,
        ACTARRAY_ACTUATORTYPE_ROTARY
    };
    /*!
     * @brief This class represents the structure ActArrayActuatorGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorGeometry
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ActArrayActuatorGeometry();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ActArrayActuatorGeometry();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::ActArrayActuatorGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorGeometry(const ActArrayActuatorGeometry &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::ActArrayActuatorGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorGeometry(ActArrayActuatorGeometry &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::ActArrayActuatorGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorGeometry& operator=(const ActArrayActuatorGeometry &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::ActArrayActuatorGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayActuatorGeometry& operator=(ActArrayActuatorGeometry &&x);
        
        /*!
         * @brief This function sets a value in member type
         * @param _type New value for member type
         */
        inline eProsima_user_DllExport void type(RTC::ActArrayActuatorType _type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function returns the value of member type
         * @return Value of member type
         */
        inline eProsima_user_DllExport RTC::ActArrayActuatorType type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport RTC::ActArrayActuatorType& type()
        {
            return m_type;
        }
        /*!
         * @brief This function sets a value in member length
         * @param _length New value for member length
         */
        inline eProsima_user_DllExport void length(double _length)
        {
            m_length = _length;
        }

        /*!
         * @brief This function returns the value of member length
         * @return Value of member length
         */
        inline eProsima_user_DllExport double length() const
        {
            return m_length;
        }

        /*!
         * @brief This function returns a reference to member length
         * @return Reference to member length
         */
        inline eProsima_user_DllExport double& length()
        {
            return m_length;
        }
        /*!
         * @brief This function copies the value in member orientation
         * @param _orientation New value to be copied in member orientation
         */
        inline eProsima_user_DllExport void orientation(const RTC::Orientation3D &_orientation)
        {
            m_orientation = _orientation;
        }

        /*!
         * @brief This function moves the value in member orientation
         * @param _orientation New value to be moved in member orientation
         */
        inline eProsima_user_DllExport void orientation(RTC::Orientation3D &&_orientation)
        {
            m_orientation = std::move(_orientation);
        }

        /*!
         * @brief This function returns a constant reference to member orientation
         * @return Constant reference to member orientation
         */
        inline eProsima_user_DllExport const RTC::Orientation3D& orientation() const
        {
            return m_orientation;
        }

        /*!
         * @brief This function returns a reference to member orientation
         * @return Reference to member orientation
         */
        inline eProsima_user_DllExport RTC::Orientation3D& orientation()
        {
            return m_orientation;
        }
        /*!
         * @brief This function copies the value in member axis
         * @param _axis New value to be copied in member axis
         */
        inline eProsima_user_DllExport void axis(const RTC::Vector3D &_axis)
        {
            m_axis = _axis;
        }

        /*!
         * @brief This function moves the value in member axis
         * @param _axis New value to be moved in member axis
         */
        inline eProsima_user_DllExport void axis(RTC::Vector3D &&_axis)
        {
            m_axis = std::move(_axis);
        }

        /*!
         * @brief This function returns a constant reference to member axis
         * @return Constant reference to member axis
         */
        inline eProsima_user_DllExport const RTC::Vector3D& axis() const
        {
            return m_axis;
        }

        /*!
         * @brief This function returns a reference to member axis
         * @return Reference to member axis
         */
        inline eProsima_user_DllExport RTC::Vector3D& axis()
        {
            return m_axis;
        }
        /*!
         * @brief This function sets a value in member minRange
         * @param _minRange New value for member minRange
         */
        inline eProsima_user_DllExport void minRange(double _minRange)
        {
            m_minRange = _minRange;
        }

        /*!
         * @brief This function returns the value of member minRange
         * @return Value of member minRange
         */
        inline eProsima_user_DllExport double minRange() const
        {
            return m_minRange;
        }

        /*!
         * @brief This function returns a reference to member minRange
         * @return Reference to member minRange
         */
        inline eProsima_user_DllExport double& minRange()
        {
            return m_minRange;
        }
        /*!
         * @brief This function sets a value in member centre
         * @param _centre New value for member centre
         */
        inline eProsima_user_DllExport void centre(double _centre)
        {
            m_centre = _centre;
        }

        /*!
         * @brief This function returns the value of member centre
         * @return Value of member centre
         */
        inline eProsima_user_DllExport double centre() const
        {
            return m_centre;
        }

        /*!
         * @brief This function returns a reference to member centre
         * @return Reference to member centre
         */
        inline eProsima_user_DllExport double& centre()
        {
            return m_centre;
        }
        /*!
         * @brief This function sets a value in member maxRange
         * @param _maxRange New value for member maxRange
         */
        inline eProsima_user_DllExport void maxRange(double _maxRange)
        {
            m_maxRange = _maxRange;
        }

        /*!
         * @brief This function returns the value of member maxRange
         * @return Value of member maxRange
         */
        inline eProsima_user_DllExport double maxRange() const
        {
            return m_maxRange;
        }

        /*!
         * @brief This function returns a reference to member maxRange
         * @return Reference to member maxRange
         */
        inline eProsima_user_DllExport double& maxRange()
        {
            return m_maxRange;
        }
        /*!
         * @brief This function sets a value in member homePosition
         * @param _homePosition New value for member homePosition
         */
        inline eProsima_user_DllExport void homePosition(double _homePosition)
        {
            m_homePosition = _homePosition;
        }

        /*!
         * @brief This function returns the value of member homePosition
         * @return Value of member homePosition
         */
        inline eProsima_user_DllExport double homePosition() const
        {
            return m_homePosition;
        }

        /*!
         * @brief This function returns a reference to member homePosition
         * @return Reference to member homePosition
         */
        inline eProsima_user_DllExport double& homePosition()
        {
            return m_homePosition;
        }
        /*!
         * @brief This function sets a value in member hasBrakes
         * @param _hasBrakes New value for member hasBrakes
         */
        inline eProsima_user_DllExport void hasBrakes(bool _hasBrakes)
        {
            m_hasBrakes = _hasBrakes;
        }

        /*!
         * @brief This function returns the value of member hasBrakes
         * @return Value of member hasBrakes
         */
        inline eProsima_user_DllExport bool hasBrakes() const
        {
            return m_hasBrakes;
        }

        /*!
         * @brief This function returns a reference to member hasBrakes
         * @return Reference to member hasBrakes
         */
        inline eProsima_user_DllExport bool& hasBrakes()
        {
            return m_hasBrakes;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::ActArrayActuatorGeometry& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::ActArrayActuatorType m_type;
        double m_length;
        RTC::Orientation3D m_orientation;
        RTC::Vector3D m_axis;
        double m_minRange;
        double m_centre;
        double m_maxRange;
        double m_homePosition;
        bool m_hasBrakes;
    };
    typedef std::vector<RTC::ActArrayActuatorGeometry> ActArrayActuatorGeometryList;
    /*!
     * @brief This class represents the structure ActArrayGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayGeometry
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ActArrayGeometry();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ActArrayGeometry();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::ActArrayGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayGeometry(const ActArrayGeometry &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::ActArrayGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayGeometry(ActArrayGeometry &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::ActArrayGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayGeometry& operator=(const ActArrayGeometry &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::ActArrayGeometry that will be copied.
         */
        eProsima_user_DllExport ActArrayGeometry& operator=(ActArrayGeometry &&x);
        
        /*!
         * @brief This function copies the value in member arrayGeometry
         * @param _arrayGeometry New value to be copied in member arrayGeometry
         */
        inline eProsima_user_DllExport void arrayGeometry(const RTC::Geometry3D &_arrayGeometry)
        {
            m_arrayGeometry = _arrayGeometry;
        }

        /*!
         * @brief This function moves the value in member arrayGeometry
         * @param _arrayGeometry New value to be moved in member arrayGeometry
         */
        inline eProsima_user_DllExport void arrayGeometry(RTC::Geometry3D &&_arrayGeometry)
        {
            m_arrayGeometry = std::move(_arrayGeometry);
        }

        /*!
         * @brief This function returns a constant reference to member arrayGeometry
         * @return Constant reference to member arrayGeometry
         */
        inline eProsima_user_DllExport const RTC::Geometry3D& arrayGeometry() const
        {
            return m_arrayGeometry;
        }

        /*!
         * @brief This function returns a reference to member arrayGeometry
         * @return Reference to member arrayGeometry
         */
        inline eProsima_user_DllExport RTC::Geometry3D& arrayGeometry()
        {
            return m_arrayGeometry;
        }
        /*!
         * @brief This function copies the value in member actuatorGeometry
         * @param _actuatorGeometry New value to be copied in member actuatorGeometry
         */
        inline eProsima_user_DllExport void actuatorGeometry(const RTC::ActArrayActuatorGeometryList &_actuatorGeometry)
        {
            m_actuatorGeometry = _actuatorGeometry;
        }

        /*!
         * @brief This function moves the value in member actuatorGeometry
         * @param _actuatorGeometry New value to be moved in member actuatorGeometry
         */
        inline eProsima_user_DllExport void actuatorGeometry(RTC::ActArrayActuatorGeometryList &&_actuatorGeometry)
        {
            m_actuatorGeometry = std::move(_actuatorGeometry);
        }

        /*!
         * @brief This function returns a constant reference to member actuatorGeometry
         * @return Constant reference to member actuatorGeometry
         */
        inline eProsima_user_DllExport const RTC::ActArrayActuatorGeometryList& actuatorGeometry() const
        {
            return m_actuatorGeometry;
        }

        /*!
         * @brief This function returns a reference to member actuatorGeometry
         * @return Reference to member actuatorGeometry
         */
        inline eProsima_user_DllExport RTC::ActArrayActuatorGeometryList& actuatorGeometry()
        {
            return m_actuatorGeometry;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::ActArrayGeometry& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Geometry3D m_arrayGeometry;
        RTC::ActArrayActuatorGeometryList m_actuatorGeometry;
    };
    /*!
     * @brief This class represents the structure BumperGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class BumperGeometry
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport BumperGeometry();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~BumperGeometry();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::BumperGeometry that will be copied.
         */
        eProsima_user_DllExport BumperGeometry(const BumperGeometry &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::BumperGeometry that will be copied.
         */
        eProsima_user_DllExport BumperGeometry(BumperGeometry &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::BumperGeometry that will be copied.
         */
        eProsima_user_DllExport BumperGeometry& operator=(const BumperGeometry &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::BumperGeometry that will be copied.
         */
        eProsima_user_DllExport BumperGeometry& operator=(BumperGeometry &&x);
        
        /*!
         * @brief This function copies the value in member pose
         * @param _pose New value to be copied in member pose
         */
        inline eProsima_user_DllExport void pose(const RTC::Pose3D &_pose)
        {
            m_pose = _pose;
        }

        /*!
         * @brief This function moves the value in member pose
         * @param _pose New value to be moved in member pose
         */
        inline eProsima_user_DllExport void pose(RTC::Pose3D &&_pose)
        {
            m_pose = std::move(_pose);
        }

        /*!
         * @brief This function returns a constant reference to member pose
         * @return Constant reference to member pose
         */
        inline eProsima_user_DllExport const RTC::Pose3D& pose() const
        {
            return m_pose;
        }

        /*!
         * @brief This function returns a reference to member pose
         * @return Reference to member pose
         */
        inline eProsima_user_DllExport RTC::Pose3D& pose()
        {
            return m_pose;
        }
        /*!
         * @brief This function copies the value in member size
         * @param _size New value to be copied in member size
         */
        inline eProsima_user_DllExport void size(const RTC::Size3D &_size)
        {
            m_size = _size;
        }

        /*!
         * @brief This function moves the value in member size
         * @param _size New value to be moved in member size
         */
        inline eProsima_user_DllExport void size(RTC::Size3D &&_size)
        {
            m_size = std::move(_size);
        }

        /*!
         * @brief This function returns a constant reference to member size
         * @return Constant reference to member size
         */
        inline eProsima_user_DllExport const RTC::Size3D& size() const
        {
            return m_size;
        }

        /*!
         * @brief This function returns a reference to member size
         * @return Reference to member size
         */
        inline eProsima_user_DllExport RTC::Size3D& size()
        {
            return m_size;
        }
        /*!
         * @brief This function sets a value in member roc
         * @param _roc New value for member roc
         */
        inline eProsima_user_DllExport void roc(double _roc)
        {
            m_roc = _roc;
        }

        /*!
         * @brief This function returns the value of member roc
         * @return Value of member roc
         */
        inline eProsima_user_DllExport double roc() const
        {
            return m_roc;
        }

        /*!
         * @brief This function returns a reference to member roc
         * @return Reference to member roc
         */
        inline eProsima_user_DllExport double& roc()
        {
            return m_roc;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::BumperGeometry& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose3D m_pose;
        RTC::Size3D m_size;
        double m_roc;
    };
    typedef std::vector<RTC::BumperGeometry> BumperGeometryList;
    /*!
     * @brief This class represents the structure BumperArrayGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class BumperArrayGeometry
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport BumperArrayGeometry();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~BumperArrayGeometry();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::BumperArrayGeometry that will be copied.
         */
        eProsima_user_DllExport BumperArrayGeometry(const BumperArrayGeometry &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::BumperArrayGeometry that will be copied.
         */
        eProsima_user_DllExport BumperArrayGeometry(BumperArrayGeometry &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::BumperArrayGeometry that will be copied.
         */
        eProsima_user_DllExport BumperArrayGeometry& operator=(const BumperArrayGeometry &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::BumperArrayGeometry that will be copied.
         */
        eProsima_user_DllExport BumperArrayGeometry& operator=(BumperArrayGeometry &&x);
        
        /*!
         * @brief This function copies the value in member arrayGeometry
         * @param _arrayGeometry New value to be copied in member arrayGeometry
         */
        inline eProsima_user_DllExport void arrayGeometry(const RTC::Geometry3D &_arrayGeometry)
        {
            m_arrayGeometry = _arrayGeometry;
        }

        /*!
         * @brief This function moves the value in member arrayGeometry
         * @param _arrayGeometry New value to be moved in member arrayGeometry
         */
        inline eProsima_user_DllExport void arrayGeometry(RTC::Geometry3D &&_arrayGeometry)
        {
            m_arrayGeometry = std::move(_arrayGeometry);
        }

        /*!
         * @brief This function returns a constant reference to member arrayGeometry
         * @return Constant reference to member arrayGeometry
         */
        inline eProsima_user_DllExport const RTC::Geometry3D& arrayGeometry() const
        {
            return m_arrayGeometry;
        }

        /*!
         * @brief This function returns a reference to member arrayGeometry
         * @return Reference to member arrayGeometry
         */
        inline eProsima_user_DllExport RTC::Geometry3D& arrayGeometry()
        {
            return m_arrayGeometry;
        }
        /*!
         * @brief This function copies the value in member bumperGeometry
         * @param _bumperGeometry New value to be copied in member bumperGeometry
         */
        inline eProsima_user_DllExport void bumperGeometry(const RTC::BumperGeometryList &_bumperGeometry)
        {
            m_bumperGeometry = _bumperGeometry;
        }

        /*!
         * @brief This function moves the value in member bumperGeometry
         * @param _bumperGeometry New value to be moved in member bumperGeometry
         */
        inline eProsima_user_DllExport void bumperGeometry(RTC::BumperGeometryList &&_bumperGeometry)
        {
            m_bumperGeometry = std::move(_bumperGeometry);
        }

        /*!
         * @brief This function returns a constant reference to member bumperGeometry
         * @return Constant reference to member bumperGeometry
         */
        inline eProsima_user_DllExport const RTC::BumperGeometryList& bumperGeometry() const
        {
            return m_bumperGeometry;
        }

        /*!
         * @brief This function returns a reference to member bumperGeometry
         * @return Reference to member bumperGeometry
         */
        inline eProsima_user_DllExport RTC::BumperGeometryList& bumperGeometry()
        {
            return m_bumperGeometry;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::BumperArrayGeometry& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Geometry3D m_arrayGeometry;
        RTC::BumperGeometryList m_bumperGeometry;
    };
    /*!
     * @brief This class represents the structure CameraImage defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class CameraImage
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport CameraImage();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~CameraImage();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::CameraImage that will be copied.
         */
        eProsima_user_DllExport CameraImage(const CameraImage &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::CameraImage that will be copied.
         */
        eProsima_user_DllExport CameraImage(CameraImage &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::CameraImage that will be copied.
         */
        eProsima_user_DllExport CameraImage& operator=(const CameraImage &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::CameraImage that will be copied.
         */
        eProsima_user_DllExport CameraImage& operator=(CameraImage &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member width
         * @param _width New value for member width
         */
        inline eProsima_user_DllExport void width(uint16_t _width)
        {
            m_width = _width;
        }

        /*!
         * @brief This function returns the value of member width
         * @return Value of member width
         */
        inline eProsima_user_DllExport uint16_t width() const
        {
            return m_width;
        }

        /*!
         * @brief This function returns a reference to member width
         * @return Reference to member width
         */
        inline eProsima_user_DllExport uint16_t& width()
        {
            return m_width;
        }
        /*!
         * @brief This function sets a value in member height
         * @param _height New value for member height
         */
        inline eProsima_user_DllExport void height(uint16_t _height)
        {
            m_height = _height;
        }

        /*!
         * @brief This function returns the value of member height
         * @return Value of member height
         */
        inline eProsima_user_DllExport uint16_t height() const
        {
            return m_height;
        }

        /*!
         * @brief This function returns a reference to member height
         * @return Reference to member height
         */
        inline eProsima_user_DllExport uint16_t& height()
        {
            return m_height;
        }
        /*!
         * @brief This function sets a value in member bpp
         * @param _bpp New value for member bpp
         */
        inline eProsima_user_DllExport void bpp(uint16_t _bpp)
        {
            m_bpp = _bpp;
        }

        /*!
         * @brief This function returns the value of member bpp
         * @return Value of member bpp
         */
        inline eProsima_user_DllExport uint16_t bpp() const
        {
            return m_bpp;
        }

        /*!
         * @brief This function returns a reference to member bpp
         * @return Reference to member bpp
         */
        inline eProsima_user_DllExport uint16_t& bpp()
        {
            return m_bpp;
        }
        /*!
         * @brief This function copies the value in member format
         * @param _format New value to be copied in member format
         */
        inline eProsima_user_DllExport void format(const std::string &_format)
        {
            m_format = _format;
        }

        /*!
         * @brief This function moves the value in member format
         * @param _format New value to be moved in member format
         */
        inline eProsima_user_DllExport void format(std::string &&_format)
        {
            m_format = std::move(_format);
        }

        /*!
         * @brief This function returns a constant reference to member format
         * @return Constant reference to member format
         */
        inline eProsima_user_DllExport const std::string& format() const
        {
            return m_format;
        }

        /*!
         * @brief This function returns a reference to member format
         * @return Reference to member format
         */
        inline eProsima_user_DllExport std::string& format()
        {
            return m_format;
        }
        /*!
         * @brief This function sets a value in member fDiv
         * @param _fDiv New value for member fDiv
         */
        inline eProsima_user_DllExport void fDiv(double _fDiv)
        {
            m_fDiv = _fDiv;
        }

        /*!
         * @brief This function returns the value of member fDiv
         * @return Value of member fDiv
         */
        inline eProsima_user_DllExport double fDiv() const
        {
            return m_fDiv;
        }

        /*!
         * @brief This function returns a reference to member fDiv
         * @return Reference to member fDiv
         */
        inline eProsima_user_DllExport double& fDiv()
        {
            return m_fDiv;
        }
        /*!
         * @brief This function copies the value in member pixels
         * @param _pixels New value to be copied in member pixels
         */
        inline eProsima_user_DllExport void pixels(const std::vector<uint8_t> &_pixels)
        {
            m_pixels = _pixels;
        }

        /*!
         * @brief This function moves the value in member pixels
         * @param _pixels New value to be moved in member pixels
         */
        inline eProsima_user_DllExport void pixels(std::vector<uint8_t> &&_pixels)
        {
            m_pixels = std::move(_pixels);
        }

        /*!
         * @brief This function returns a constant reference to member pixels
         * @return Constant reference to member pixels
         */
        inline eProsima_user_DllExport const std::vector<uint8_t>& pixels() const
        {
            return m_pixels;
        }

        /*!
         * @brief This function returns a reference to member pixels
         * @return Reference to member pixels
         */
        inline eProsima_user_DllExport std::vector<uint8_t>& pixels()
        {
            return m_pixels;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::CameraImage& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        uint16_t m_width;
        uint16_t m_height;
        uint16_t m_bpp;
        std::string m_format;
        double m_fDiv;
        std::vector<uint8_t> m_pixels;
    };
    /*!
     * @brief This class represents the structure CameraInfo defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class CameraInfo
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport CameraInfo();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~CameraInfo();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::CameraInfo that will be copied.
         */
        eProsima_user_DllExport CameraInfo(const CameraInfo &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::CameraInfo that will be copied.
         */
        eProsima_user_DllExport CameraInfo(CameraInfo &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::CameraInfo that will be copied.
         */
        eProsima_user_DllExport CameraInfo& operator=(const CameraInfo &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::CameraInfo that will be copied.
         */
        eProsima_user_DllExport CameraInfo& operator=(CameraInfo &&x);
        
        /*!
         * @brief This function copies the value in member focalLength
         * @param _focalLength New value to be copied in member focalLength
         */
        inline eProsima_user_DllExport void focalLength(const RTC::Vector2D &_focalLength)
        {
            m_focalLength = _focalLength;
        }

        /*!
         * @brief This function moves the value in member focalLength
         * @param _focalLength New value to be moved in member focalLength
         */
        inline eProsima_user_DllExport void focalLength(RTC::Vector2D &&_focalLength)
        {
            m_focalLength = std::move(_focalLength);
        }

        /*!
         * @brief This function returns a constant reference to member focalLength
         * @return Constant reference to member focalLength
         */
        inline eProsima_user_DllExport const RTC::Vector2D& focalLength() const
        {
            return m_focalLength;
        }

        /*!
         * @brief This function returns a reference to member focalLength
         * @return Reference to member focalLength
         */
        inline eProsima_user_DllExport RTC::Vector2D& focalLength()
        {
            return m_focalLength;
        }
        /*!
         * @brief This function copies the value in member principalPoint
         * @param _principalPoint New value to be copied in member principalPoint
         */
        inline eProsima_user_DllExport void principalPoint(const RTC::Point2D &_principalPoint)
        {
            m_principalPoint = _principalPoint;
        }

        /*!
         * @brief This function moves the value in member principalPoint
         * @param _principalPoint New value to be moved in member principalPoint
         */
        inline eProsima_user_DllExport void principalPoint(RTC::Point2D &&_principalPoint)
        {
            m_principalPoint = std::move(_principalPoint);
        }

        /*!
         * @brief This function returns a constant reference to member principalPoint
         * @return Constant reference to member principalPoint
         */
        inline eProsima_user_DllExport const RTC::Point2D& principalPoint() const
        {
            return m_principalPoint;
        }

        /*!
         * @brief This function returns a reference to member principalPoint
         * @return Reference to member principalPoint
         */
        inline eProsima_user_DllExport RTC::Point2D& principalPoint()
        {
            return m_principalPoint;
        }
        /*!
         * @brief This function sets a value in member k1
         * @param _k1 New value for member k1
         */
        inline eProsima_user_DllExport void k1(double _k1)
        {
            m_k1 = _k1;
        }

        /*!
         * @brief This function returns the value of member k1
         * @return Value of member k1
         */
        inline eProsima_user_DllExport double k1() const
        {
            return m_k1;
        }

        /*!
         * @brief This function returns a reference to member k1
         * @return Reference to member k1
         */
        inline eProsima_user_DllExport double& k1()
        {
            return m_k1;
        }
        /*!
         * @brief This function sets a value in member k2
         * @param _k2 New value for member k2
         */
        inline eProsima_user_DllExport void k2(double _k2)
        {
            m_k2 = _k2;
        }

        /*!
         * @brief This function returns the value of member k2
         * @return Value of member k2
         */
        inline eProsima_user_DllExport double k2() const
        {
            return m_k2;
        }

        /*!
         * @brief This function returns a reference to member k2
         * @return Reference to member k2
         */
        inline eProsima_user_DllExport double& k2()
        {
            return m_k2;
        }
        /*!
         * @brief This function sets a value in member p1
         * @param _p1 New value for member p1
         */
        inline eProsima_user_DllExport void p1(double _p1)
        {
            m_p1 = _p1;
        }

        /*!
         * @brief This function returns the value of member p1
         * @return Value of member p1
         */
        inline eProsima_user_DllExport double p1() const
        {
            return m_p1;
        }

        /*!
         * @brief This function returns a reference to member p1
         * @return Reference to member p1
         */
        inline eProsima_user_DllExport double& p1()
        {
            return m_p1;
        }
        /*!
         * @brief This function sets a value in member p2
         * @param _p2 New value for member p2
         */
        inline eProsima_user_DllExport void p2(double _p2)
        {
            m_p2 = _p2;
        }

        /*!
         * @brief This function returns the value of member p2
         * @return Value of member p2
         */
        inline eProsima_user_DllExport double p2() const
        {
            return m_p2;
        }

        /*!
         * @brief This function returns a reference to member p2
         * @return Reference to member p2
         */
        inline eProsima_user_DllExport double& p2()
        {
            return m_p2;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::CameraInfo& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Vector2D m_focalLength;
        RTC::Point2D m_principalPoint;
        double m_k1;
        double m_k2;
        double m_p1;
        double m_p2;
    };
    /*!
     * @brief This class represents the structure FiducialInfo defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class FiducialInfo
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport FiducialInfo();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~FiducialInfo();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::FiducialInfo that will be copied.
         */
        eProsima_user_DllExport FiducialInfo(const FiducialInfo &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::FiducialInfo that will be copied.
         */
        eProsima_user_DllExport FiducialInfo(FiducialInfo &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::FiducialInfo that will be copied.
         */
        eProsima_user_DllExport FiducialInfo& operator=(const FiducialInfo &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::FiducialInfo that will be copied.
         */
        eProsima_user_DllExport FiducialInfo& operator=(FiducialInfo &&x);
        
        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        inline eProsima_user_DllExport void id(uint32_t _id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        inline eProsima_user_DllExport uint32_t id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport uint32_t& id()
        {
            return m_id;
        }
        /*!
         * @brief This function copies the value in member pose
         * @param _pose New value to be copied in member pose
         */
        inline eProsima_user_DllExport void pose(const RTC::Pose3D &_pose)
        {
            m_pose = _pose;
        }

        /*!
         * @brief This function moves the value in member pose
         * @param _pose New value to be moved in member pose
         */
        inline eProsima_user_DllExport void pose(RTC::Pose3D &&_pose)
        {
            m_pose = std::move(_pose);
        }

        /*!
         * @brief This function returns a constant reference to member pose
         * @return Constant reference to member pose
         */
        inline eProsima_user_DllExport const RTC::Pose3D& pose() const
        {
            return m_pose;
        }

        /*!
         * @brief This function returns a reference to member pose
         * @return Reference to member pose
         */
        inline eProsima_user_DllExport RTC::Pose3D& pose()
        {
            return m_pose;
        }
        /*!
         * @brief This function copies the value in member poseUncertainty
         * @param _poseUncertainty New value to be copied in member poseUncertainty
         */
        inline eProsima_user_DllExport void poseUncertainty(const RTC::Pose3D &_poseUncertainty)
        {
            m_poseUncertainty = _poseUncertainty;
        }

        /*!
         * @brief This function moves the value in member poseUncertainty
         * @param _poseUncertainty New value to be moved in member poseUncertainty
         */
        inline eProsima_user_DllExport void poseUncertainty(RTC::Pose3D &&_poseUncertainty)
        {
            m_poseUncertainty = std::move(_poseUncertainty);
        }

        /*!
         * @brief This function returns a constant reference to member poseUncertainty
         * @return Constant reference to member poseUncertainty
         */
        inline eProsima_user_DllExport const RTC::Pose3D& poseUncertainty() const
        {
            return m_poseUncertainty;
        }

        /*!
         * @brief This function returns a reference to member poseUncertainty
         * @return Reference to member poseUncertainty
         */
        inline eProsima_user_DllExport RTC::Pose3D& poseUncertainty()
        {
            return m_poseUncertainty;
        }
        /*!
         * @brief This function copies the value in member size
         * @param _size New value to be copied in member size
         */
        inline eProsima_user_DllExport void size(const RTC::Size3D &_size)
        {
            m_size = _size;
        }

        /*!
         * @brief This function moves the value in member size
         * @param _size New value to be moved in member size
         */
        inline eProsima_user_DllExport void size(RTC::Size3D &&_size)
        {
            m_size = std::move(_size);
        }

        /*!
         * @brief This function returns a constant reference to member size
         * @return Constant reference to member size
         */
        inline eProsima_user_DllExport const RTC::Size3D& size() const
        {
            return m_size;
        }

        /*!
         * @brief This function returns a reference to member size
         * @return Reference to member size
         */
        inline eProsima_user_DllExport RTC::Size3D& size()
        {
            return m_size;
        }
        /*!
         * @brief This function copies the value in member sizeUncertainty
         * @param _sizeUncertainty New value to be copied in member sizeUncertainty
         */
        inline eProsima_user_DllExport void sizeUncertainty(const RTC::Size3D &_sizeUncertainty)
        {
            m_sizeUncertainty = _sizeUncertainty;
        }

        /*!
         * @brief This function moves the value in member sizeUncertainty
         * @param _sizeUncertainty New value to be moved in member sizeUncertainty
         */
        inline eProsima_user_DllExport void sizeUncertainty(RTC::Size3D &&_sizeUncertainty)
        {
            m_sizeUncertainty = std::move(_sizeUncertainty);
        }

        /*!
         * @brief This function returns a constant reference to member sizeUncertainty
         * @return Constant reference to member sizeUncertainty
         */
        inline eProsima_user_DllExport const RTC::Size3D& sizeUncertainty() const
        {
            return m_sizeUncertainty;
        }

        /*!
         * @brief This function returns a reference to member sizeUncertainty
         * @return Reference to member sizeUncertainty
         */
        inline eProsima_user_DllExport RTC::Size3D& sizeUncertainty()
        {
            return m_sizeUncertainty;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::FiducialInfo& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        uint32_t m_id;
        RTC::Pose3D m_pose;
        RTC::Pose3D m_poseUncertainty;
        RTC::Size3D m_size;
        RTC::Size3D m_sizeUncertainty;
    };
    typedef std::vector<RTC::FiducialInfo> FiducialInfoList;
    /*!
     * @brief This class represents the structure Fiducials defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Fiducials
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Fiducials();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Fiducials();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Fiducials that will be copied.
         */
        eProsima_user_DllExport Fiducials(const Fiducials &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Fiducials that will be copied.
         */
        eProsima_user_DllExport Fiducials(Fiducials &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Fiducials that will be copied.
         */
        eProsima_user_DllExport Fiducials& operator=(const Fiducials &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Fiducials that will be copied.
         */
        eProsima_user_DllExport Fiducials& operator=(Fiducials &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member fiducialsList
         * @param _fiducialsList New value to be copied in member fiducialsList
         */
        inline eProsima_user_DllExport void fiducialsList(const RTC::FiducialInfoList &_fiducialsList)
        {
            m_fiducialsList = _fiducialsList;
        }

        /*!
         * @brief This function moves the value in member fiducialsList
         * @param _fiducialsList New value to be moved in member fiducialsList
         */
        inline eProsima_user_DllExport void fiducialsList(RTC::FiducialInfoList &&_fiducialsList)
        {
            m_fiducialsList = std::move(_fiducialsList);
        }

        /*!
         * @brief This function returns a constant reference to member fiducialsList
         * @return Constant reference to member fiducialsList
         */
        inline eProsima_user_DllExport const RTC::FiducialInfoList& fiducialsList() const
        {
            return m_fiducialsList;
        }

        /*!
         * @brief This function returns a reference to member fiducialsList
         * @return Reference to member fiducialsList
         */
        inline eProsima_user_DllExport RTC::FiducialInfoList& fiducialsList()
        {
            return m_fiducialsList;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Fiducials& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::FiducialInfoList m_fiducialsList;
    };
    /*!
     * @brief This class represents the structure FiducialFOV defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class FiducialFOV
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport FiducialFOV();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~FiducialFOV();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::FiducialFOV that will be copied.
         */
        eProsima_user_DllExport FiducialFOV(const FiducialFOV &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::FiducialFOV that will be copied.
         */
        eProsima_user_DllExport FiducialFOV(FiducialFOV &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::FiducialFOV that will be copied.
         */
        eProsima_user_DllExport FiducialFOV& operator=(const FiducialFOV &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::FiducialFOV that will be copied.
         */
        eProsima_user_DllExport FiducialFOV& operator=(FiducialFOV &&x);
        
        /*!
         * @brief This function sets a value in member minRange
         * @param _minRange New value for member minRange
         */
        inline eProsima_user_DllExport void minRange(double _minRange)
        {
            m_minRange = _minRange;
        }

        /*!
         * @brief This function returns the value of member minRange
         * @return Value of member minRange
         */
        inline eProsima_user_DllExport double minRange() const
        {
            return m_minRange;
        }

        /*!
         * @brief This function returns a reference to member minRange
         * @return Reference to member minRange
         */
        inline eProsima_user_DllExport double& minRange()
        {
            return m_minRange;
        }
        /*!
         * @brief This function sets a value in member maxRange
         * @param _maxRange New value for member maxRange
         */
        inline eProsima_user_DllExport void maxRange(double _maxRange)
        {
            m_maxRange = _maxRange;
        }

        /*!
         * @brief This function returns the value of member maxRange
         * @return Value of member maxRange
         */
        inline eProsima_user_DllExport double maxRange() const
        {
            return m_maxRange;
        }

        /*!
         * @brief This function returns a reference to member maxRange
         * @return Reference to member maxRange
         */
        inline eProsima_user_DllExport double& maxRange()
        {
            return m_maxRange;
        }
        /*!
         * @brief This function sets a value in member viewAngle
         * @param _viewAngle New value for member viewAngle
         */
        inline eProsima_user_DllExport void viewAngle(double _viewAngle)
        {
            m_viewAngle = _viewAngle;
        }

        /*!
         * @brief This function returns the value of member viewAngle
         * @return Value of member viewAngle
         */
        inline eProsima_user_DllExport double viewAngle() const
        {
            return m_viewAngle;
        }

        /*!
         * @brief This function returns a reference to member viewAngle
         * @return Reference to member viewAngle
         */
        inline eProsima_user_DllExport double& viewAngle()
        {
            return m_viewAngle;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::FiducialFOV& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_minRange;
        double m_maxRange;
        double m_viewAngle;
    };
    /*!
     * @brief This class represents the structure GPSTime defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GPSTime
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport GPSTime();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~GPSTime();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::GPSTime that will be copied.
         */
        eProsima_user_DllExport GPSTime(const GPSTime &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::GPSTime that will be copied.
         */
        eProsima_user_DllExport GPSTime(GPSTime &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::GPSTime that will be copied.
         */
        eProsima_user_DllExport GPSTime& operator=(const GPSTime &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::GPSTime that will be copied.
         */
        eProsima_user_DllExport GPSTime& operator=(GPSTime &&x);
        
        /*!
         * @brief This function sets a value in member sec
         * @param _sec New value for member sec
         */
        inline eProsima_user_DllExport void sec(uint32_t _sec)
        {
            m_sec = _sec;
        }

        /*!
         * @brief This function returns the value of member sec
         * @return Value of member sec
         */
        inline eProsima_user_DllExport uint32_t sec() const
        {
            return m_sec;
        }

        /*!
         * @brief This function returns a reference to member sec
         * @return Reference to member sec
         */
        inline eProsima_user_DllExport uint32_t& sec()
        {
            return m_sec;
        }
        /*!
         * @brief This function sets a value in member msec
         * @param _msec New value for member msec
         */
        inline eProsima_user_DllExport void msec(uint32_t _msec)
        {
            m_msec = _msec;
        }

        /*!
         * @brief This function returns the value of member msec
         * @return Value of member msec
         */
        inline eProsima_user_DllExport uint32_t msec() const
        {
            return m_msec;
        }

        /*!
         * @brief This function returns a reference to member msec
         * @return Reference to member msec
         */
        inline eProsima_user_DllExport uint32_t& msec()
        {
            return m_msec;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::GPSTime& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        uint32_t m_sec;
        uint32_t m_msec;
    };
    /*!
     * @brief This class represents the enumeration GPSFixType defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    enum GPSFixType : uint32_t
    {
        GPS_FIX_NONE,
        GPS_FIX_NORMAL,
        GPS_FIX_DGPS
    };
    /*!
     * @brief This class represents the structure GPSData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GPSData
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport GPSData();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~GPSData();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::GPSData that will be copied.
         */
        eProsima_user_DllExport GPSData(const GPSData &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::GPSData that will be copied.
         */
        eProsima_user_DllExport GPSData(GPSData &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::GPSData that will be copied.
         */
        eProsima_user_DllExport GPSData& operator=(const GPSData &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::GPSData that will be copied.
         */
        eProsima_user_DllExport GPSData& operator=(GPSData &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member timeFromGPS
         * @param _timeFromGPS New value to be copied in member timeFromGPS
         */
        inline eProsima_user_DllExport void timeFromGPS(const RTC::GPSTime &_timeFromGPS)
        {
            m_timeFromGPS = _timeFromGPS;
        }

        /*!
         * @brief This function moves the value in member timeFromGPS
         * @param _timeFromGPS New value to be moved in member timeFromGPS
         */
        inline eProsima_user_DllExport void timeFromGPS(RTC::GPSTime &&_timeFromGPS)
        {
            m_timeFromGPS = std::move(_timeFromGPS);
        }

        /*!
         * @brief This function returns a constant reference to member timeFromGPS
         * @return Constant reference to member timeFromGPS
         */
        inline eProsima_user_DllExport const RTC::GPSTime& timeFromGPS() const
        {
            return m_timeFromGPS;
        }

        /*!
         * @brief This function returns a reference to member timeFromGPS
         * @return Reference to member timeFromGPS
         */
        inline eProsima_user_DllExport RTC::GPSTime& timeFromGPS()
        {
            return m_timeFromGPS;
        }
        /*!
         * @brief This function sets a value in member latitude
         * @param _latitude New value for member latitude
         */
        inline eProsima_user_DllExport void latitude(double _latitude)
        {
            m_latitude = _latitude;
        }

        /*!
         * @brief This function returns the value of member latitude
         * @return Value of member latitude
         */
        inline eProsima_user_DllExport double latitude() const
        {
            return m_latitude;
        }

        /*!
         * @brief This function returns a reference to member latitude
         * @return Reference to member latitude
         */
        inline eProsima_user_DllExport double& latitude()
        {
            return m_latitude;
        }
        /*!
         * @brief This function sets a value in member longitude
         * @param _longitude New value for member longitude
         */
        inline eProsima_user_DllExport void longitude(double _longitude)
        {
            m_longitude = _longitude;
        }

        /*!
         * @brief This function returns the value of member longitude
         * @return Value of member longitude
         */
        inline eProsima_user_DllExport double longitude() const
        {
            return m_longitude;
        }

        /*!
         * @brief This function returns a reference to member longitude
         * @return Reference to member longitude
         */
        inline eProsima_user_DllExport double& longitude()
        {
            return m_longitude;
        }
        /*!
         * @brief This function sets a value in member altitude
         * @param _altitude New value for member altitude
         */
        inline eProsima_user_DllExport void altitude(double _altitude)
        {
            m_altitude = _altitude;
        }

        /*!
         * @brief This function returns the value of member altitude
         * @return Value of member altitude
         */
        inline eProsima_user_DllExport double altitude() const
        {
            return m_altitude;
        }

        /*!
         * @brief This function returns a reference to member altitude
         * @return Reference to member altitude
         */
        inline eProsima_user_DllExport double& altitude()
        {
            return m_altitude;
        }
        /*!
         * @brief This function sets a value in member horizontalError
         * @param _horizontalError New value for member horizontalError
         */
        inline eProsima_user_DllExport void horizontalError(double _horizontalError)
        {
            m_horizontalError = _horizontalError;
        }

        /*!
         * @brief This function returns the value of member horizontalError
         * @return Value of member horizontalError
         */
        inline eProsima_user_DllExport double horizontalError() const
        {
            return m_horizontalError;
        }

        /*!
         * @brief This function returns a reference to member horizontalError
         * @return Reference to member horizontalError
         */
        inline eProsima_user_DllExport double& horizontalError()
        {
            return m_horizontalError;
        }
        /*!
         * @brief This function sets a value in member verticalError
         * @param _verticalError New value for member verticalError
         */
        inline eProsima_user_DllExport void verticalError(double _verticalError)
        {
            m_verticalError = _verticalError;
        }

        /*!
         * @brief This function returns the value of member verticalError
         * @return Value of member verticalError
         */
        inline eProsima_user_DllExport double verticalError() const
        {
            return m_verticalError;
        }

        /*!
         * @brief This function returns a reference to member verticalError
         * @return Reference to member verticalError
         */
        inline eProsima_user_DllExport double& verticalError()
        {
            return m_verticalError;
        }
        /*!
         * @brief This function sets a value in member heading
         * @param _heading New value for member heading
         */
        inline eProsima_user_DllExport void heading(double _heading)
        {
            m_heading = _heading;
        }

        /*!
         * @brief This function returns the value of member heading
         * @return Value of member heading
         */
        inline eProsima_user_DllExport double heading() const
        {
            return m_heading;
        }

        /*!
         * @brief This function returns a reference to member heading
         * @return Reference to member heading
         */
        inline eProsima_user_DllExport double& heading()
        {
            return m_heading;
        }
        /*!
         * @brief This function sets a value in member horizontalSpeed
         * @param _horizontalSpeed New value for member horizontalSpeed
         */
        inline eProsima_user_DllExport void horizontalSpeed(double _horizontalSpeed)
        {
            m_horizontalSpeed = _horizontalSpeed;
        }

        /*!
         * @brief This function returns the value of member horizontalSpeed
         * @return Value of member horizontalSpeed
         */
        inline eProsima_user_DllExport double horizontalSpeed() const
        {
            return m_horizontalSpeed;
        }

        /*!
         * @brief This function returns a reference to member horizontalSpeed
         * @return Reference to member horizontalSpeed
         */
        inline eProsima_user_DllExport double& horizontalSpeed()
        {
            return m_horizontalSpeed;
        }
        /*!
         * @brief This function sets a value in member verticalSpeed
         * @param _verticalSpeed New value for member verticalSpeed
         */
        inline eProsima_user_DllExport void verticalSpeed(double _verticalSpeed)
        {
            m_verticalSpeed = _verticalSpeed;
        }

        /*!
         * @brief This function returns the value of member verticalSpeed
         * @return Value of member verticalSpeed
         */
        inline eProsima_user_DllExport double verticalSpeed() const
        {
            return m_verticalSpeed;
        }

        /*!
         * @brief This function returns a reference to member verticalSpeed
         * @return Reference to member verticalSpeed
         */
        inline eProsima_user_DllExport double& verticalSpeed()
        {
            return m_verticalSpeed;
        }
        /*!
         * @brief This function sets a value in member numSatellites
         * @param _numSatellites New value for member numSatellites
         */
        inline eProsima_user_DllExport void numSatellites(uint16_t _numSatellites)
        {
            m_numSatellites = _numSatellites;
        }

        /*!
         * @brief This function returns the value of member numSatellites
         * @return Value of member numSatellites
         */
        inline eProsima_user_DllExport uint16_t numSatellites() const
        {
            return m_numSatellites;
        }

        /*!
         * @brief This function returns a reference to member numSatellites
         * @return Reference to member numSatellites
         */
        inline eProsima_user_DllExport uint16_t& numSatellites()
        {
            return m_numSatellites;
        }
        /*!
         * @brief This function sets a value in member fixType
         * @param _fixType New value for member fixType
         */
        inline eProsima_user_DllExport void fixType(RTC::GPSFixType _fixType)
        {
            m_fixType = _fixType;
        }

        /*!
         * @brief This function returns the value of member fixType
         * @return Value of member fixType
         */
        inline eProsima_user_DllExport RTC::GPSFixType fixType() const
        {
            return m_fixType;
        }

        /*!
         * @brief This function returns a reference to member fixType
         * @return Reference to member fixType
         */
        inline eProsima_user_DllExport RTC::GPSFixType& fixType()
        {
            return m_fixType;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::GPSData& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::GPSTime m_timeFromGPS;
        double m_latitude;
        double m_longitude;
        double m_altitude;
        double m_horizontalError;
        double m_verticalError;
        double m_heading;
        double m_horizontalSpeed;
        double m_verticalSpeed;
        uint16_t m_numSatellites;
        RTC::GPSFixType m_fixType;
    };
    /*!
     * @brief This class represents the enumeration GripperStatus defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    enum GripperStatus : uint32_t
    {
        GRIPPER_STATE_OPEN,
        GRIPPER_STATE_CLOSED,
        GRIPPER_STATE_MOVING,
        GRIPPER_STATE_UNKNOWN
    };
    /*!
     * @brief This class represents the structure GripperState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GripperState
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport GripperState();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~GripperState();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::GripperState that will be copied.
         */
        eProsima_user_DllExport GripperState(const GripperState &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::GripperState that will be copied.
         */
        eProsima_user_DllExport GripperState(GripperState &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::GripperState that will be copied.
         */
        eProsima_user_DllExport GripperState& operator=(const GripperState &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::GripperState that will be copied.
         */
        eProsima_user_DllExport GripperState& operator=(GripperState &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member status
         * @param _status New value for member status
         */
        inline eProsima_user_DllExport void status(RTC::GripperStatus _status)
        {
            m_status = _status;
        }

        /*!
         * @brief This function returns the value of member status
         * @return Value of member status
         */
        inline eProsima_user_DllExport RTC::GripperStatus status() const
        {
            return m_status;
        }

        /*!
         * @brief This function returns a reference to member status
         * @return Reference to member status
         */
        inline eProsima_user_DllExport RTC::GripperStatus& status()
        {
            return m_status;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::GripperState& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::GripperStatus m_status;
    };
    /*!
     * @brief This class represents the structure GripperGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GripperGeometry
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport GripperGeometry();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~GripperGeometry();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::GripperGeometry that will be copied.
         */
        eProsima_user_DllExport GripperGeometry(const GripperGeometry &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::GripperGeometry that will be copied.
         */
        eProsima_user_DllExport GripperGeometry(GripperGeometry &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::GripperGeometry that will be copied.
         */
        eProsima_user_DllExport GripperGeometry& operator=(const GripperGeometry &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::GripperGeometry that will be copied.
         */
        eProsima_user_DllExport GripperGeometry& operator=(GripperGeometry &&x);
        
        /*!
         * @brief This function copies the value in member exterior
         * @param _exterior New value to be copied in member exterior
         */
        inline eProsima_user_DllExport void exterior(const RTC::Geometry3D &_exterior)
        {
            m_exterior = _exterior;
        }

        /*!
         * @brief This function moves the value in member exterior
         * @param _exterior New value to be moved in member exterior
         */
        inline eProsima_user_DllExport void exterior(RTC::Geometry3D &&_exterior)
        {
            m_exterior = std::move(_exterior);
        }

        /*!
         * @brief This function returns a constant reference to member exterior
         * @return Constant reference to member exterior
         */
        inline eProsima_user_DllExport const RTC::Geometry3D& exterior() const
        {
            return m_exterior;
        }

        /*!
         * @brief This function returns a reference to member exterior
         * @return Reference to member exterior
         */
        inline eProsima_user_DllExport RTC::Geometry3D& exterior()
        {
            return m_exterior;
        }
        /*!
         * @brief This function copies the value in member interior
         * @param _interior New value to be copied in member interior
         */
        inline eProsima_user_DllExport void interior(const RTC::Geometry3D &_interior)
        {
            m_interior = _interior;
        }

        /*!
         * @brief This function moves the value in member interior
         * @param _interior New value to be moved in member interior
         */
        inline eProsima_user_DllExport void interior(RTC::Geometry3D &&_interior)
        {
            m_interior = std::move(_interior);
        }

        /*!
         * @brief This function returns a constant reference to member interior
         * @return Constant reference to member interior
         */
        inline eProsima_user_DllExport const RTC::Geometry3D& interior() const
        {
            return m_interior;
        }

        /*!
         * @brief This function returns a reference to member interior
         * @return Reference to member interior
         */
        inline eProsima_user_DllExport RTC::Geometry3D& interior()
        {
            return m_interior;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::GripperGeometry& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Geometry3D m_exterior;
        RTC::Geometry3D m_interior;
    };
    /*!
     * @brief This class represents the structure INSData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class INSData
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport INSData();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~INSData();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::INSData that will be copied.
         */
        eProsima_user_DllExport INSData(const INSData &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::INSData that will be copied.
         */
        eProsima_user_DllExport INSData(INSData &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::INSData that will be copied.
         */
        eProsima_user_DllExport INSData& operator=(const INSData &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::INSData that will be copied.
         */
        eProsima_user_DllExport INSData& operator=(INSData &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member latitude
         * @param _latitude New value for member latitude
         */
        inline eProsima_user_DllExport void latitude(double _latitude)
        {
            m_latitude = _latitude;
        }

        /*!
         * @brief This function returns the value of member latitude
         * @return Value of member latitude
         */
        inline eProsima_user_DllExport double latitude() const
        {
            return m_latitude;
        }

        /*!
         * @brief This function returns a reference to member latitude
         * @return Reference to member latitude
         */
        inline eProsima_user_DllExport double& latitude()
        {
            return m_latitude;
        }
        /*!
         * @brief This function sets a value in member longitude
         * @param _longitude New value for member longitude
         */
        inline eProsima_user_DllExport void longitude(double _longitude)
        {
            m_longitude = _longitude;
        }

        /*!
         * @brief This function returns the value of member longitude
         * @return Value of member longitude
         */
        inline eProsima_user_DllExport double longitude() const
        {
            return m_longitude;
        }

        /*!
         * @brief This function returns a reference to member longitude
         * @return Reference to member longitude
         */
        inline eProsima_user_DllExport double& longitude()
        {
            return m_longitude;
        }
        /*!
         * @brief This function sets a value in member altitude
         * @param _altitude New value for member altitude
         */
        inline eProsima_user_DllExport void altitude(double _altitude)
        {
            m_altitude = _altitude;
        }

        /*!
         * @brief This function returns the value of member altitude
         * @return Value of member altitude
         */
        inline eProsima_user_DllExport double altitude() const
        {
            return m_altitude;
        }

        /*!
         * @brief This function returns a reference to member altitude
         * @return Reference to member altitude
         */
        inline eProsima_user_DllExport double& altitude()
        {
            return m_altitude;
        }
        /*!
         * @brief This function sets a value in member heightAMSL
         * @param _heightAMSL New value for member heightAMSL
         */
        inline eProsima_user_DllExport void heightAMSL(double _heightAMSL)
        {
            m_heightAMSL = _heightAMSL;
        }

        /*!
         * @brief This function returns the value of member heightAMSL
         * @return Value of member heightAMSL
         */
        inline eProsima_user_DllExport double heightAMSL() const
        {
            return m_heightAMSL;
        }

        /*!
         * @brief This function returns a reference to member heightAMSL
         * @return Reference to member heightAMSL
         */
        inline eProsima_user_DllExport double& heightAMSL()
        {
            return m_heightAMSL;
        }
        /*!
         * @brief This function copies the value in member velocityENU
         * @param _velocityENU New value to be copied in member velocityENU
         */
        inline eProsima_user_DllExport void velocityENU(const RTC::Velocity3D &_velocityENU)
        {
            m_velocityENU = _velocityENU;
        }

        /*!
         * @brief This function moves the value in member velocityENU
         * @param _velocityENU New value to be moved in member velocityENU
         */
        inline eProsima_user_DllExport void velocityENU(RTC::Velocity3D &&_velocityENU)
        {
            m_velocityENU = std::move(_velocityENU);
        }

        /*!
         * @brief This function returns a constant reference to member velocityENU
         * @return Constant reference to member velocityENU
         */
        inline eProsima_user_DllExport const RTC::Velocity3D& velocityENU() const
        {
            return m_velocityENU;
        }

        /*!
         * @brief This function returns a reference to member velocityENU
         * @return Reference to member velocityENU
         */
        inline eProsima_user_DllExport RTC::Velocity3D& velocityENU()
        {
            return m_velocityENU;
        }
        /*!
         * @brief This function copies the value in member orientation
         * @param _orientation New value to be copied in member orientation
         */
        inline eProsima_user_DllExport void orientation(const RTC::Orientation3D &_orientation)
        {
            m_orientation = _orientation;
        }

        /*!
         * @brief This function moves the value in member orientation
         * @param _orientation New value to be moved in member orientation
         */
        inline eProsima_user_DllExport void orientation(RTC::Orientation3D &&_orientation)
        {
            m_orientation = std::move(_orientation);
        }

        /*!
         * @brief This function returns a constant reference to member orientation
         * @return Constant reference to member orientation
         */
        inline eProsima_user_DllExport const RTC::Orientation3D& orientation() const
        {
            return m_orientation;
        }

        /*!
         * @brief This function returns a reference to member orientation
         * @return Reference to member orientation
         */
        inline eProsima_user_DllExport RTC::Orientation3D& orientation()
        {
            return m_orientation;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::INSData& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        double m_latitude;
        double m_longitude;
        double m_altitude;
        double m_heightAMSL;
        RTC::Velocity3D m_velocityENU;
        RTC::Orientation3D m_orientation;
    };
    /*!
     * @brief This class represents the enumeration LimbStatus defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    enum LimbStatus : uint32_t
    {
        LIMB_STATUS_IDLE,
        LIMB_STATUS_BRAKED,
        LIMB_STATUS_MOVING,
        LIMB_STATUS_OOR,
        LIMB_STATUS_COLLISION
    };
    /*!
     * @brief This class represents the structure LimbState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class LimbState
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport LimbState();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~LimbState();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::LimbState that will be copied.
         */
        eProsima_user_DllExport LimbState(const LimbState &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::LimbState that will be copied.
         */
        eProsima_user_DllExport LimbState(LimbState &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::LimbState that will be copied.
         */
        eProsima_user_DllExport LimbState& operator=(const LimbState &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::LimbState that will be copied.
         */
        eProsima_user_DllExport LimbState& operator=(LimbState &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member oapMatrix
         * @param _oapMatrix New value to be copied in member oapMatrix
         */
        inline eProsima_user_DllExport void oapMatrix(const RTC::OAP &_oapMatrix)
        {
            m_oapMatrix = _oapMatrix;
        }

        /*!
         * @brief This function moves the value in member oapMatrix
         * @param _oapMatrix New value to be moved in member oapMatrix
         */
        inline eProsima_user_DllExport void oapMatrix(RTC::OAP &&_oapMatrix)
        {
            m_oapMatrix = std::move(_oapMatrix);
        }

        /*!
         * @brief This function returns a constant reference to member oapMatrix
         * @return Constant reference to member oapMatrix
         */
        inline eProsima_user_DllExport const RTC::OAP& oapMatrix() const
        {
            return m_oapMatrix;
        }

        /*!
         * @brief This function returns a reference to member oapMatrix
         * @return Reference to member oapMatrix
         */
        inline eProsima_user_DllExport RTC::OAP& oapMatrix()
        {
            return m_oapMatrix;
        }
        /*!
         * @brief This function sets a value in member status
         * @param _status New value for member status
         */
        inline eProsima_user_DllExport void status(RTC::LimbStatus _status)
        {
            m_status = _status;
        }

        /*!
         * @brief This function returns the value of member status
         * @return Value of member status
         */
        inline eProsima_user_DllExport RTC::LimbStatus status() const
        {
            return m_status;
        }

        /*!
         * @brief This function returns a reference to member status
         * @return Reference to member status
         */
        inline eProsima_user_DllExport RTC::LimbStatus& status()
        {
            return m_status;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::LimbState& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::OAP m_oapMatrix;
        RTC::LimbStatus m_status;
    };
    /*!
     * @brief This class represents the structure Hypothesis2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypothesis2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Hypothesis2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Hypothesis2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Hypothesis2D that will be copied.
         */
        eProsima_user_DllExport Hypothesis2D(const Hypothesis2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Hypothesis2D that will be copied.
         */
        eProsima_user_DllExport Hypothesis2D(Hypothesis2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Hypothesis2D that will be copied.
         */
        eProsima_user_DllExport Hypothesis2D& operator=(const Hypothesis2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Hypothesis2D that will be copied.
         */
        eProsima_user_DllExport Hypothesis2D& operator=(Hypothesis2D &&x);
        
        /*!
         * @brief This function copies the value in member mean
         * @param _mean New value to be copied in member mean
         */
        inline eProsima_user_DllExport void mean(const RTC::Pose2D &_mean)
        {
            m_mean = _mean;
        }

        /*!
         * @brief This function moves the value in member mean
         * @param _mean New value to be moved in member mean
         */
        inline eProsima_user_DllExport void mean(RTC::Pose2D &&_mean)
        {
            m_mean = std::move(_mean);
        }

        /*!
         * @brief This function returns a constant reference to member mean
         * @return Constant reference to member mean
         */
        inline eProsima_user_DllExport const RTC::Pose2D& mean() const
        {
            return m_mean;
        }

        /*!
         * @brief This function returns a reference to member mean
         * @return Reference to member mean
         */
        inline eProsima_user_DllExport RTC::Pose2D& mean()
        {
            return m_mean;
        }
        /*!
         * @brief This function copies the value in member covariance
         * @param _covariance New value to be copied in member covariance
         */
        inline eProsima_user_DllExport void covariance(const RTC::Covariance2D &_covariance)
        {
            m_covariance = _covariance;
        }

        /*!
         * @brief This function moves the value in member covariance
         * @param _covariance New value to be moved in member covariance
         */
        inline eProsima_user_DllExport void covariance(RTC::Covariance2D &&_covariance)
        {
            m_covariance = std::move(_covariance);
        }

        /*!
         * @brief This function returns a constant reference to member covariance
         * @return Constant reference to member covariance
         */
        inline eProsima_user_DllExport const RTC::Covariance2D& covariance() const
        {
            return m_covariance;
        }

        /*!
         * @brief This function returns a reference to member covariance
         * @return Reference to member covariance
         */
        inline eProsima_user_DllExport RTC::Covariance2D& covariance()
        {
            return m_covariance;
        }
        /*!
         * @brief This function sets a value in member weight
         * @param _weight New value for member weight
         */
        inline eProsima_user_DllExport void weight(double _weight)
        {
            m_weight = _weight;
        }

        /*!
         * @brief This function returns the value of member weight
         * @return Value of member weight
         */
        inline eProsima_user_DllExport double weight() const
        {
            return m_weight;
        }

        /*!
         * @brief This function returns a reference to member weight
         * @return Reference to member weight
         */
        inline eProsima_user_DllExport double& weight()
        {
            return m_weight;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Hypothesis2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose2D m_mean;
        RTC::Covariance2D m_covariance;
        double m_weight;
    };
    typedef std::vector<RTC::Hypothesis2D> Hypothesis2DList;
    /*!
     * @brief This class represents the structure Hypotheses2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypotheses2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Hypotheses2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Hypotheses2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Hypotheses2D that will be copied.
         */
        eProsima_user_DllExport Hypotheses2D(const Hypotheses2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Hypotheses2D that will be copied.
         */
        eProsima_user_DllExport Hypotheses2D(Hypotheses2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Hypotheses2D that will be copied.
         */
        eProsima_user_DllExport Hypotheses2D& operator=(const Hypotheses2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Hypotheses2D that will be copied.
         */
        eProsima_user_DllExport Hypotheses2D& operator=(Hypotheses2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member hypotheses
         * @param _hypotheses New value to be copied in member hypotheses
         */
        inline eProsima_user_DllExport void hypotheses(const RTC::Hypothesis2DList &_hypotheses)
        {
            m_hypotheses = _hypotheses;
        }

        /*!
         * @brief This function moves the value in member hypotheses
         * @param _hypotheses New value to be moved in member hypotheses
         */
        inline eProsima_user_DllExport void hypotheses(RTC::Hypothesis2DList &&_hypotheses)
        {
            m_hypotheses = std::move(_hypotheses);
        }

        /*!
         * @brief This function returns a constant reference to member hypotheses
         * @return Constant reference to member hypotheses
         */
        inline eProsima_user_DllExport const RTC::Hypothesis2DList& hypotheses() const
        {
            return m_hypotheses;
        }

        /*!
         * @brief This function returns a reference to member hypotheses
         * @return Reference to member hypotheses
         */
        inline eProsima_user_DllExport RTC::Hypothesis2DList& hypotheses()
        {
            return m_hypotheses;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Hypotheses2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Hypothesis2DList m_hypotheses;
    };
    /*!
     * @brief This class represents the structure Hypothesis3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypothesis3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Hypothesis3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Hypothesis3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Hypothesis3D that will be copied.
         */
        eProsima_user_DllExport Hypothesis3D(const Hypothesis3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Hypothesis3D that will be copied.
         */
        eProsima_user_DllExport Hypothesis3D(Hypothesis3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Hypothesis3D that will be copied.
         */
        eProsima_user_DllExport Hypothesis3D& operator=(const Hypothesis3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Hypothesis3D that will be copied.
         */
        eProsima_user_DllExport Hypothesis3D& operator=(Hypothesis3D &&x);
        
        /*!
         * @brief This function copies the value in member mean
         * @param _mean New value to be copied in member mean
         */
        inline eProsima_user_DllExport void mean(const RTC::Pose3D &_mean)
        {
            m_mean = _mean;
        }

        /*!
         * @brief This function moves the value in member mean
         * @param _mean New value to be moved in member mean
         */
        inline eProsima_user_DllExport void mean(RTC::Pose3D &&_mean)
        {
            m_mean = std::move(_mean);
        }

        /*!
         * @brief This function returns a constant reference to member mean
         * @return Constant reference to member mean
         */
        inline eProsima_user_DllExport const RTC::Pose3D& mean() const
        {
            return m_mean;
        }

        /*!
         * @brief This function returns a reference to member mean
         * @return Reference to member mean
         */
        inline eProsima_user_DllExport RTC::Pose3D& mean()
        {
            return m_mean;
        }
        /*!
         * @brief This function copies the value in member covariance
         * @param _covariance New value to be copied in member covariance
         */
        inline eProsima_user_DllExport void covariance(const RTC::Covariance3D &_covariance)
        {
            m_covariance = _covariance;
        }

        /*!
         * @brief This function moves the value in member covariance
         * @param _covariance New value to be moved in member covariance
         */
        inline eProsima_user_DllExport void covariance(RTC::Covariance3D &&_covariance)
        {
            m_covariance = std::move(_covariance);
        }

        /*!
         * @brief This function returns a constant reference to member covariance
         * @return Constant reference to member covariance
         */
        inline eProsima_user_DllExport const RTC::Covariance3D& covariance() const
        {
            return m_covariance;
        }

        /*!
         * @brief This function returns a reference to member covariance
         * @return Reference to member covariance
         */
        inline eProsima_user_DllExport RTC::Covariance3D& covariance()
        {
            return m_covariance;
        }
        /*!
         * @brief This function sets a value in member weight
         * @param _weight New value for member weight
         */
        inline eProsima_user_DllExport void weight(double _weight)
        {
            m_weight = _weight;
        }

        /*!
         * @brief This function returns the value of member weight
         * @return Value of member weight
         */
        inline eProsima_user_DllExport double weight() const
        {
            return m_weight;
        }

        /*!
         * @brief This function returns a reference to member weight
         * @return Reference to member weight
         */
        inline eProsima_user_DllExport double& weight()
        {
            return m_weight;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Hypothesis3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose3D m_mean;
        RTC::Covariance3D m_covariance;
        double m_weight;
    };
    typedef std::vector<RTC::Hypothesis3D> Hypothesis3DList;
    /*!
     * @brief This class represents the structure Hypotheses3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypotheses3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Hypotheses3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Hypotheses3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Hypotheses3D that will be copied.
         */
        eProsima_user_DllExport Hypotheses3D(const Hypotheses3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Hypotheses3D that will be copied.
         */
        eProsima_user_DllExport Hypotheses3D(Hypotheses3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Hypotheses3D that will be copied.
         */
        eProsima_user_DllExport Hypotheses3D& operator=(const Hypotheses3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Hypotheses3D that will be copied.
         */
        eProsima_user_DllExport Hypotheses3D& operator=(Hypotheses3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member hypotheses
         * @param _hypotheses New value to be copied in member hypotheses
         */
        inline eProsima_user_DllExport void hypotheses(const RTC::Hypothesis3DList &_hypotheses)
        {
            m_hypotheses = _hypotheses;
        }

        /*!
         * @brief This function moves the value in member hypotheses
         * @param _hypotheses New value to be moved in member hypotheses
         */
        inline eProsima_user_DllExport void hypotheses(RTC::Hypothesis3DList &&_hypotheses)
        {
            m_hypotheses = std::move(_hypotheses);
        }

        /*!
         * @brief This function returns a constant reference to member hypotheses
         * @return Constant reference to member hypotheses
         */
        inline eProsima_user_DllExport const RTC::Hypothesis3DList& hypotheses() const
        {
            return m_hypotheses;
        }

        /*!
         * @brief This function returns a reference to member hypotheses
         * @return Reference to member hypotheses
         */
        inline eProsima_user_DllExport RTC::Hypothesis3DList& hypotheses()
        {
            return m_hypotheses;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Hypotheses3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Hypothesis3DList m_hypotheses;
    };
    /*!
     * @brief This class represents the structure OGMapConfig defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class OGMapConfig
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OGMapConfig();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OGMapConfig();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::OGMapConfig that will be copied.
         */
        eProsima_user_DllExport OGMapConfig(const OGMapConfig &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::OGMapConfig that will be copied.
         */
        eProsima_user_DllExport OGMapConfig(OGMapConfig &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::OGMapConfig that will be copied.
         */
        eProsima_user_DllExport OGMapConfig& operator=(const OGMapConfig &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::OGMapConfig that will be copied.
         */
        eProsima_user_DllExport OGMapConfig& operator=(OGMapConfig &&x);
        
        /*!
         * @brief This function sets a value in member xScale
         * @param _xScale New value for member xScale
         */
        inline eProsima_user_DllExport void xScale(double _xScale)
        {
            m_xScale = _xScale;
        }

        /*!
         * @brief This function returns the value of member xScale
         * @return Value of member xScale
         */
        inline eProsima_user_DllExport double xScale() const
        {
            return m_xScale;
        }

        /*!
         * @brief This function returns a reference to member xScale
         * @return Reference to member xScale
         */
        inline eProsima_user_DllExport double& xScale()
        {
            return m_xScale;
        }
        /*!
         * @brief This function sets a value in member yScale
         * @param _yScale New value for member yScale
         */
        inline eProsima_user_DllExport void yScale(double _yScale)
        {
            m_yScale = _yScale;
        }

        /*!
         * @brief This function returns the value of member yScale
         * @return Value of member yScale
         */
        inline eProsima_user_DllExport double yScale() const
        {
            return m_yScale;
        }

        /*!
         * @brief This function returns a reference to member yScale
         * @return Reference to member yScale
         */
        inline eProsima_user_DllExport double& yScale()
        {
            return m_yScale;
        }
        /*!
         * @brief This function sets a value in member width
         * @param _width New value for member width
         */
        inline eProsima_user_DllExport void width(uint32_t _width)
        {
            m_width = _width;
        }

        /*!
         * @brief This function returns the value of member width
         * @return Value of member width
         */
        inline eProsima_user_DllExport uint32_t width() const
        {
            return m_width;
        }

        /*!
         * @brief This function returns a reference to member width
         * @return Reference to member width
         */
        inline eProsima_user_DllExport uint32_t& width()
        {
            return m_width;
        }
        /*!
         * @brief This function sets a value in member height
         * @param _height New value for member height
         */
        inline eProsima_user_DllExport void height(uint32_t _height)
        {
            m_height = _height;
        }

        /*!
         * @brief This function returns the value of member height
         * @return Value of member height
         */
        inline eProsima_user_DllExport uint32_t height() const
        {
            return m_height;
        }

        /*!
         * @brief This function returns a reference to member height
         * @return Reference to member height
         */
        inline eProsima_user_DllExport uint32_t& height()
        {
            return m_height;
        }
        /*!
         * @brief This function copies the value in member origin
         * @param _origin New value to be copied in member origin
         */
        inline eProsima_user_DllExport void origin(const RTC::Pose2D &_origin)
        {
            m_origin = _origin;
        }

        /*!
         * @brief This function moves the value in member origin
         * @param _origin New value to be moved in member origin
         */
        inline eProsima_user_DllExport void origin(RTC::Pose2D &&_origin)
        {
            m_origin = std::move(_origin);
        }

        /*!
         * @brief This function returns a constant reference to member origin
         * @return Constant reference to member origin
         */
        inline eProsima_user_DllExport const RTC::Pose2D& origin() const
        {
            return m_origin;
        }

        /*!
         * @brief This function returns a reference to member origin
         * @return Reference to member origin
         */
        inline eProsima_user_DllExport RTC::Pose2D& origin()
        {
            return m_origin;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::OGMapConfig& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_xScale;
        double m_yScale;
        uint32_t m_width;
        uint32_t m_height;
        RTC::Pose2D m_origin;
    };
    typedef std::vector<uint8_t> OGMapCells;
    /*!
     * @brief This class represents the structure OGMapTile defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class OGMapTile
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OGMapTile();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OGMapTile();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::OGMapTile that will be copied.
         */
        eProsima_user_DllExport OGMapTile(const OGMapTile &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::OGMapTile that will be copied.
         */
        eProsima_user_DllExport OGMapTile(OGMapTile &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::OGMapTile that will be copied.
         */
        eProsima_user_DllExport OGMapTile& operator=(const OGMapTile &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::OGMapTile that will be copied.
         */
        eProsima_user_DllExport OGMapTile& operator=(OGMapTile &&x);
        
        /*!
         * @brief This function sets a value in member column
         * @param _column New value for member column
         */
        inline eProsima_user_DllExport void column(uint32_t _column)
        {
            m_column = _column;
        }

        /*!
         * @brief This function returns the value of member column
         * @return Value of member column
         */
        inline eProsima_user_DllExport uint32_t column() const
        {
            return m_column;
        }

        /*!
         * @brief This function returns a reference to member column
         * @return Reference to member column
         */
        inline eProsima_user_DllExport uint32_t& column()
        {
            return m_column;
        }
        /*!
         * @brief This function sets a value in member row
         * @param _row New value for member row
         */
        inline eProsima_user_DllExport void row(uint32_t _row)
        {
            m_row = _row;
        }

        /*!
         * @brief This function returns the value of member row
         * @return Value of member row
         */
        inline eProsima_user_DllExport uint32_t row() const
        {
            return m_row;
        }

        /*!
         * @brief This function returns a reference to member row
         * @return Reference to member row
         */
        inline eProsima_user_DllExport uint32_t& row()
        {
            return m_row;
        }
        /*!
         * @brief This function sets a value in member width
         * @param _width New value for member width
         */
        inline eProsima_user_DllExport void width(uint32_t _width)
        {
            m_width = _width;
        }

        /*!
         * @brief This function returns the value of member width
         * @return Value of member width
         */
        inline eProsima_user_DllExport uint32_t width() const
        {
            return m_width;
        }

        /*!
         * @brief This function returns a reference to member width
         * @return Reference to member width
         */
        inline eProsima_user_DllExport uint32_t& width()
        {
            return m_width;
        }
        /*!
         * @brief This function sets a value in member height
         * @param _height New value for member height
         */
        inline eProsima_user_DllExport void height(uint32_t _height)
        {
            m_height = _height;
        }

        /*!
         * @brief This function returns the value of member height
         * @return Value of member height
         */
        inline eProsima_user_DllExport uint32_t height() const
        {
            return m_height;
        }

        /*!
         * @brief This function returns a reference to member height
         * @return Reference to member height
         */
        inline eProsima_user_DllExport uint32_t& height()
        {
            return m_height;
        }
        /*!
         * @brief This function copies the value in member cells
         * @param _cells New value to be copied in member cells
         */
        inline eProsima_user_DllExport void cells(const RTC::OGMapCells &_cells)
        {
            m_cells = _cells;
        }

        /*!
         * @brief This function moves the value in member cells
         * @param _cells New value to be moved in member cells
         */
        inline eProsima_user_DllExport void cells(RTC::OGMapCells &&_cells)
        {
            m_cells = std::move(_cells);
        }

        /*!
         * @brief This function returns a constant reference to member cells
         * @return Constant reference to member cells
         */
        inline eProsima_user_DllExport const RTC::OGMapCells& cells() const
        {
            return m_cells;
        }

        /*!
         * @brief This function returns a reference to member cells
         * @return Reference to member cells
         */
        inline eProsima_user_DllExport RTC::OGMapCells& cells()
        {
            return m_cells;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::OGMapTile& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        uint32_t m_column;
        uint32_t m_row;
        uint32_t m_width;
        uint32_t m_height;
        RTC::OGMapCells m_cells;
    };
    /*!
     * @brief This class represents the structure PointFeature defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PointFeature
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PointFeature();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PointFeature();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PointFeature that will be copied.
         */
        eProsima_user_DllExport PointFeature(const PointFeature &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PointFeature that will be copied.
         */
        eProsima_user_DllExport PointFeature(PointFeature &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PointFeature that will be copied.
         */
        eProsima_user_DllExport PointFeature& operator=(const PointFeature &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PointFeature that will be copied.
         */
        eProsima_user_DllExport PointFeature& operator=(PointFeature &&x);
        
        /*!
         * @brief This function sets a value in member probability
         * @param _probability New value for member probability
         */
        inline eProsima_user_DllExport void probability(double _probability)
        {
            m_probability = _probability;
        }

        /*!
         * @brief This function returns the value of member probability
         * @return Value of member probability
         */
        inline eProsima_user_DllExport double probability() const
        {
            return m_probability;
        }

        /*!
         * @brief This function returns a reference to member probability
         * @return Reference to member probability
         */
        inline eProsima_user_DllExport double& probability()
        {
            return m_probability;
        }
        /*!
         * @brief This function copies the value in member position
         * @param _position New value to be copied in member position
         */
        inline eProsima_user_DllExport void position(const RTC::Point2D &_position)
        {
            m_position = _position;
        }

        /*!
         * @brief This function moves the value in member position
         * @param _position New value to be moved in member position
         */
        inline eProsima_user_DllExport void position(RTC::Point2D &&_position)
        {
            m_position = std::move(_position);
        }

        /*!
         * @brief This function returns a constant reference to member position
         * @return Constant reference to member position
         */
        inline eProsima_user_DllExport const RTC::Point2D& position() const
        {
            return m_position;
        }

        /*!
         * @brief This function returns a reference to member position
         * @return Reference to member position
         */
        inline eProsima_user_DllExport RTC::Point2D& position()
        {
            return m_position;
        }
        /*!
         * @brief This function copies the value in member covariance
         * @param _covariance New value to be copied in member covariance
         */
        inline eProsima_user_DllExport void covariance(const RTC::PointCovariance2D &_covariance)
        {
            m_covariance = _covariance;
        }

        /*!
         * @brief This function moves the value in member covariance
         * @param _covariance New value to be moved in member covariance
         */
        inline eProsima_user_DllExport void covariance(RTC::PointCovariance2D &&_covariance)
        {
            m_covariance = std::move(_covariance);
        }

        /*!
         * @brief This function returns a constant reference to member covariance
         * @return Constant reference to member covariance
         */
        inline eProsima_user_DllExport const RTC::PointCovariance2D& covariance() const
        {
            return m_covariance;
        }

        /*!
         * @brief This function returns a reference to member covariance
         * @return Reference to member covariance
         */
        inline eProsima_user_DllExport RTC::PointCovariance2D& covariance()
        {
            return m_covariance;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PointFeature& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_probability;
        RTC::Point2D m_position;
        RTC::PointCovariance2D m_covariance;
    };
    typedef std::vector<RTC::PointFeature> PointFeatureList;
    /*!
     * @brief This class represents the structure PoseFeature defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PoseFeature
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PoseFeature();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PoseFeature();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PoseFeature that will be copied.
         */
        eProsima_user_DllExport PoseFeature(const PoseFeature &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PoseFeature that will be copied.
         */
        eProsima_user_DllExport PoseFeature(PoseFeature &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PoseFeature that will be copied.
         */
        eProsima_user_DllExport PoseFeature& operator=(const PoseFeature &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PoseFeature that will be copied.
         */
        eProsima_user_DllExport PoseFeature& operator=(PoseFeature &&x);
        
        /*!
         * @brief This function sets a value in member probability
         * @param _probability New value for member probability
         */
        inline eProsima_user_DllExport void probability(double _probability)
        {
            m_probability = _probability;
        }

        /*!
         * @brief This function returns the value of member probability
         * @return Value of member probability
         */
        inline eProsima_user_DllExport double probability() const
        {
            return m_probability;
        }

        /*!
         * @brief This function returns a reference to member probability
         * @return Reference to member probability
         */
        inline eProsima_user_DllExport double& probability()
        {
            return m_probability;
        }
        /*!
         * @brief This function copies the value in member position
         * @param _position New value to be copied in member position
         */
        inline eProsima_user_DllExport void position(const RTC::Pose2D &_position)
        {
            m_position = _position;
        }

        /*!
         * @brief This function moves the value in member position
         * @param _position New value to be moved in member position
         */
        inline eProsima_user_DllExport void position(RTC::Pose2D &&_position)
        {
            m_position = std::move(_position);
        }

        /*!
         * @brief This function returns a constant reference to member position
         * @return Constant reference to member position
         */
        inline eProsima_user_DllExport const RTC::Pose2D& position() const
        {
            return m_position;
        }

        /*!
         * @brief This function returns a reference to member position
         * @return Reference to member position
         */
        inline eProsima_user_DllExport RTC::Pose2D& position()
        {
            return m_position;
        }
        /*!
         * @brief This function copies the value in member covariance
         * @param _covariance New value to be copied in member covariance
         */
        inline eProsima_user_DllExport void covariance(const RTC::Covariance2D &_covariance)
        {
            m_covariance = _covariance;
        }

        /*!
         * @brief This function moves the value in member covariance
         * @param _covariance New value to be moved in member covariance
         */
        inline eProsima_user_DllExport void covariance(RTC::Covariance2D &&_covariance)
        {
            m_covariance = std::move(_covariance);
        }

        /*!
         * @brief This function returns a constant reference to member covariance
         * @return Constant reference to member covariance
         */
        inline eProsima_user_DllExport const RTC::Covariance2D& covariance() const
        {
            return m_covariance;
        }

        /*!
         * @brief This function returns a reference to member covariance
         * @return Reference to member covariance
         */
        inline eProsima_user_DllExport RTC::Covariance2D& covariance()
        {
            return m_covariance;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PoseFeature& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_probability;
        RTC::Pose2D m_position;
        RTC::Covariance2D m_covariance;
    };
    typedef std::vector<RTC::PoseFeature> PoseFeatureList;
    /*!
     * @brief This class represents the structure LineFeature defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class LineFeature
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport LineFeature();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~LineFeature();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::LineFeature that will be copied.
         */
        eProsima_user_DllExport LineFeature(const LineFeature &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::LineFeature that will be copied.
         */
        eProsima_user_DllExport LineFeature(LineFeature &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::LineFeature that will be copied.
         */
        eProsima_user_DllExport LineFeature& operator=(const LineFeature &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::LineFeature that will be copied.
         */
        eProsima_user_DllExport LineFeature& operator=(LineFeature &&x);
        
        /*!
         * @brief This function sets a value in member probability
         * @param _probability New value for member probability
         */
        inline eProsima_user_DllExport void probability(double _probability)
        {
            m_probability = _probability;
        }

        /*!
         * @brief This function returns the value of member probability
         * @return Value of member probability
         */
        inline eProsima_user_DllExport double probability() const
        {
            return m_probability;
        }

        /*!
         * @brief This function returns a reference to member probability
         * @return Reference to member probability
         */
        inline eProsima_user_DllExport double& probability()
        {
            return m_probability;
        }
        /*!
         * @brief This function sets a value in member rho
         * @param _rho New value for member rho
         */
        inline eProsima_user_DllExport void rho(double _rho)
        {
            m_rho = _rho;
        }

        /*!
         * @brief This function returns the value of member rho
         * @return Value of member rho
         */
        inline eProsima_user_DllExport double rho() const
        {
            return m_rho;
        }

        /*!
         * @brief This function returns a reference to member rho
         * @return Reference to member rho
         */
        inline eProsima_user_DllExport double& rho()
        {
            return m_rho;
        }
        /*!
         * @brief This function sets a value in member alpha
         * @param _alpha New value for member alpha
         */
        inline eProsima_user_DllExport void alpha(double _alpha)
        {
            m_alpha = _alpha;
        }

        /*!
         * @brief This function returns the value of member alpha
         * @return Value of member alpha
         */
        inline eProsima_user_DllExport double alpha() const
        {
            return m_alpha;
        }

        /*!
         * @brief This function returns a reference to member alpha
         * @return Reference to member alpha
         */
        inline eProsima_user_DllExport double& alpha()
        {
            return m_alpha;
        }
        /*!
         * @brief This function copies the value in member covariance
         * @param _covariance New value to be copied in member covariance
         */
        inline eProsima_user_DllExport void covariance(const RTC::PointCovariance2D &_covariance)
        {
            m_covariance = _covariance;
        }

        /*!
         * @brief This function moves the value in member covariance
         * @param _covariance New value to be moved in member covariance
         */
        inline eProsima_user_DllExport void covariance(RTC::PointCovariance2D &&_covariance)
        {
            m_covariance = std::move(_covariance);
        }

        /*!
         * @brief This function returns a constant reference to member covariance
         * @return Constant reference to member covariance
         */
        inline eProsima_user_DllExport const RTC::PointCovariance2D& covariance() const
        {
            return m_covariance;
        }

        /*!
         * @brief This function returns a reference to member covariance
         * @return Reference to member covariance
         */
        inline eProsima_user_DllExport RTC::PointCovariance2D& covariance()
        {
            return m_covariance;
        }
        /*!
         * @brief This function copies the value in member start
         * @param _start New value to be copied in member start
         */
        inline eProsima_user_DllExport void start(const RTC::Point2D &_start)
        {
            m_start = _start;
        }

        /*!
         * @brief This function moves the value in member start
         * @param _start New value to be moved in member start
         */
        inline eProsima_user_DllExport void start(RTC::Point2D &&_start)
        {
            m_start = std::move(_start);
        }

        /*!
         * @brief This function returns a constant reference to member start
         * @return Constant reference to member start
         */
        inline eProsima_user_DllExport const RTC::Point2D& start() const
        {
            return m_start;
        }

        /*!
         * @brief This function returns a reference to member start
         * @return Reference to member start
         */
        inline eProsima_user_DllExport RTC::Point2D& start()
        {
            return m_start;
        }
        /*!
         * @brief This function copies the value in member end
         * @param _end New value to be copied in member end
         */
        inline eProsima_user_DllExport void end(const RTC::Point2D &_end)
        {
            m_end = _end;
        }

        /*!
         * @brief This function moves the value in member end
         * @param _end New value to be moved in member end
         */
        inline eProsima_user_DllExport void end(RTC::Point2D &&_end)
        {
            m_end = std::move(_end);
        }

        /*!
         * @brief This function returns a constant reference to member end
         * @return Constant reference to member end
         */
        inline eProsima_user_DllExport const RTC::Point2D& end() const
        {
            return m_end;
        }

        /*!
         * @brief This function returns a reference to member end
         * @return Reference to member end
         */
        inline eProsima_user_DllExport RTC::Point2D& end()
        {
            return m_end;
        }
        /*!
         * @brief This function sets a value in member startSighted
         * @param _startSighted New value for member startSighted
         */
        inline eProsima_user_DllExport void startSighted(bool _startSighted)
        {
            m_startSighted = _startSighted;
        }

        /*!
         * @brief This function returns the value of member startSighted
         * @return Value of member startSighted
         */
        inline eProsima_user_DllExport bool startSighted() const
        {
            return m_startSighted;
        }

        /*!
         * @brief This function returns a reference to member startSighted
         * @return Reference to member startSighted
         */
        inline eProsima_user_DllExport bool& startSighted()
        {
            return m_startSighted;
        }
        /*!
         * @brief This function sets a value in member endSighted
         * @param _endSighted New value for member endSighted
         */
        inline eProsima_user_DllExport void endSighted(bool _endSighted)
        {
            m_endSighted = _endSighted;
        }

        /*!
         * @brief This function returns the value of member endSighted
         * @return Value of member endSighted
         */
        inline eProsima_user_DllExport bool endSighted() const
        {
            return m_endSighted;
        }

        /*!
         * @brief This function returns a reference to member endSighted
         * @return Reference to member endSighted
         */
        inline eProsima_user_DllExport bool& endSighted()
        {
            return m_endSighted;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::LineFeature& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_probability;
        double m_rho;
        double m_alpha;
        RTC::PointCovariance2D m_covariance;
        RTC::Point2D m_start;
        RTC::Point2D m_end;
        bool m_startSighted;
        bool m_endSighted;
    };
    typedef std::vector<RTC::LineFeature> LineFeatureList;
    /*!
     * @brief This class represents the structure Features defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Features
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Features();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Features();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Features that will be copied.
         */
        eProsima_user_DllExport Features(const Features &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Features that will be copied.
         */
        eProsima_user_DllExport Features(Features &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Features that will be copied.
         */
        eProsima_user_DllExport Features& operator=(const Features &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Features that will be copied.
         */
        eProsima_user_DllExport Features& operator=(Features &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member pointFeatures
         * @param _pointFeatures New value to be copied in member pointFeatures
         */
        inline eProsima_user_DllExport void pointFeatures(const RTC::PointFeatureList &_pointFeatures)
        {
            m_pointFeatures = _pointFeatures;
        }

        /*!
         * @brief This function moves the value in member pointFeatures
         * @param _pointFeatures New value to be moved in member pointFeatures
         */
        inline eProsima_user_DllExport void pointFeatures(RTC::PointFeatureList &&_pointFeatures)
        {
            m_pointFeatures = std::move(_pointFeatures);
        }

        /*!
         * @brief This function returns a constant reference to member pointFeatures
         * @return Constant reference to member pointFeatures
         */
        inline eProsima_user_DllExport const RTC::PointFeatureList& pointFeatures() const
        {
            return m_pointFeatures;
        }

        /*!
         * @brief This function returns a reference to member pointFeatures
         * @return Reference to member pointFeatures
         */
        inline eProsima_user_DllExport RTC::PointFeatureList& pointFeatures()
        {
            return m_pointFeatures;
        }
        /*!
         * @brief This function copies the value in member poseFeatures
         * @param _poseFeatures New value to be copied in member poseFeatures
         */
        inline eProsima_user_DllExport void poseFeatures(const RTC::PoseFeatureList &_poseFeatures)
        {
            m_poseFeatures = _poseFeatures;
        }

        /*!
         * @brief This function moves the value in member poseFeatures
         * @param _poseFeatures New value to be moved in member poseFeatures
         */
        inline eProsima_user_DllExport void poseFeatures(RTC::PoseFeatureList &&_poseFeatures)
        {
            m_poseFeatures = std::move(_poseFeatures);
        }

        /*!
         * @brief This function returns a constant reference to member poseFeatures
         * @return Constant reference to member poseFeatures
         */
        inline eProsima_user_DllExport const RTC::PoseFeatureList& poseFeatures() const
        {
            return m_poseFeatures;
        }

        /*!
         * @brief This function returns a reference to member poseFeatures
         * @return Reference to member poseFeatures
         */
        inline eProsima_user_DllExport RTC::PoseFeatureList& poseFeatures()
        {
            return m_poseFeatures;
        }
        /*!
         * @brief This function copies the value in member lineFeatures
         * @param _lineFeatures New value to be copied in member lineFeatures
         */
        inline eProsima_user_DllExport void lineFeatures(const RTC::LineFeatureList &_lineFeatures)
        {
            m_lineFeatures = _lineFeatures;
        }

        /*!
         * @brief This function moves the value in member lineFeatures
         * @param _lineFeatures New value to be moved in member lineFeatures
         */
        inline eProsima_user_DllExport void lineFeatures(RTC::LineFeatureList &&_lineFeatures)
        {
            m_lineFeatures = std::move(_lineFeatures);
        }

        /*!
         * @brief This function returns a constant reference to member lineFeatures
         * @return Constant reference to member lineFeatures
         */
        inline eProsima_user_DllExport const RTC::LineFeatureList& lineFeatures() const
        {
            return m_lineFeatures;
        }

        /*!
         * @brief This function returns a reference to member lineFeatures
         * @return Reference to member lineFeatures
         */
        inline eProsima_user_DllExport RTC::LineFeatureList& lineFeatures()
        {
            return m_lineFeatures;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Features& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::PointFeatureList m_pointFeatures;
        RTC::PoseFeatureList m_poseFeatures;
        RTC::LineFeatureList m_lineFeatures;
    };
    typedef std::vector<RTC::CameraImage> MulticameraImageList;
    /*!
     * @brief This class represents the structure MultiCameraImages defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class MultiCameraImages
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport MultiCameraImages();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~MultiCameraImages();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::MultiCameraImages that will be copied.
         */
        eProsima_user_DllExport MultiCameraImages(const MultiCameraImages &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::MultiCameraImages that will be copied.
         */
        eProsima_user_DllExport MultiCameraImages(MultiCameraImages &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::MultiCameraImages that will be copied.
         */
        eProsima_user_DllExport MultiCameraImages& operator=(const MultiCameraImages &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::MultiCameraImages that will be copied.
         */
        eProsima_user_DllExport MultiCameraImages& operator=(MultiCameraImages &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member images
         * @param _images New value to be copied in member images
         */
        inline eProsima_user_DllExport void images(const RTC::MulticameraImageList &_images)
        {
            m_images = _images;
        }

        /*!
         * @brief This function moves the value in member images
         * @param _images New value to be moved in member images
         */
        inline eProsima_user_DllExport void images(RTC::MulticameraImageList &&_images)
        {
            m_images = std::move(_images);
        }

        /*!
         * @brief This function returns a constant reference to member images
         * @return Constant reference to member images
         */
        inline eProsima_user_DllExport const RTC::MulticameraImageList& images() const
        {
            return m_images;
        }

        /*!
         * @brief This function returns a reference to member images
         * @return Reference to member images
         */
        inline eProsima_user_DllExport RTC::MulticameraImageList& images()
        {
            return m_images;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::MultiCameraImages& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::MulticameraImageList m_images;
    };
    typedef std::vector<RTC::CameraInfo> MulticameraInfoList;
    typedef std::vector<RTC::Geometry3D> MulticameraGeometryList;
    /*!
     * @brief This class represents the structure MulticameraGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class MulticameraGeometry
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport MulticameraGeometry();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~MulticameraGeometry();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::MulticameraGeometry that will be copied.
         */
        eProsima_user_DllExport MulticameraGeometry(const MulticameraGeometry &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::MulticameraGeometry that will be copied.
         */
        eProsima_user_DllExport MulticameraGeometry(MulticameraGeometry &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::MulticameraGeometry that will be copied.
         */
        eProsima_user_DllExport MulticameraGeometry& operator=(const MulticameraGeometry &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::MulticameraGeometry that will be copied.
         */
        eProsima_user_DllExport MulticameraGeometry& operator=(MulticameraGeometry &&x);
        
        /*!
         * @brief This function copies the value in member geometry
         * @param _geometry New value to be copied in member geometry
         */
        inline eProsima_user_DllExport void geometry(const RTC::Geometry3D &_geometry)
        {
            m_geometry = _geometry;
        }

        /*!
         * @brief This function moves the value in member geometry
         * @param _geometry New value to be moved in member geometry
         */
        inline eProsima_user_DllExport void geometry(RTC::Geometry3D &&_geometry)
        {
            m_geometry = std::move(_geometry);
        }

        /*!
         * @brief This function returns a constant reference to member geometry
         * @return Constant reference to member geometry
         */
        inline eProsima_user_DllExport const RTC::Geometry3D& geometry() const
        {
            return m_geometry;
        }

        /*!
         * @brief This function returns a reference to member geometry
         * @return Reference to member geometry
         */
        inline eProsima_user_DllExport RTC::Geometry3D& geometry()
        {
            return m_geometry;
        }
        /*!
         * @brief This function copies the value in member cameraGeometries
         * @param _cameraGeometries New value to be copied in member cameraGeometries
         */
        inline eProsima_user_DllExport void cameraGeometries(const RTC::MulticameraGeometryList &_cameraGeometries)
        {
            m_cameraGeometries = _cameraGeometries;
        }

        /*!
         * @brief This function moves the value in member cameraGeometries
         * @param _cameraGeometries New value to be moved in member cameraGeometries
         */
        inline eProsima_user_DllExport void cameraGeometries(RTC::MulticameraGeometryList &&_cameraGeometries)
        {
            m_cameraGeometries = std::move(_cameraGeometries);
        }

        /*!
         * @brief This function returns a constant reference to member cameraGeometries
         * @return Constant reference to member cameraGeometries
         */
        inline eProsima_user_DllExport const RTC::MulticameraGeometryList& cameraGeometries() const
        {
            return m_cameraGeometries;
        }

        /*!
         * @brief This function returns a reference to member cameraGeometries
         * @return Reference to member cameraGeometries
         */
        inline eProsima_user_DllExport RTC::MulticameraGeometryList& cameraGeometries()
        {
            return m_cameraGeometries;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::MulticameraGeometry& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Geometry3D m_geometry;
        RTC::MulticameraGeometryList m_cameraGeometries;
    };
    /*!
     * @brief This class represents the structure Waypoint2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Waypoint2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Waypoint2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Waypoint2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Waypoint2D that will be copied.
         */
        eProsima_user_DllExport Waypoint2D(const Waypoint2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Waypoint2D that will be copied.
         */
        eProsima_user_DllExport Waypoint2D(Waypoint2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Waypoint2D that will be copied.
         */
        eProsima_user_DllExport Waypoint2D& operator=(const Waypoint2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Waypoint2D that will be copied.
         */
        eProsima_user_DllExport Waypoint2D& operator=(Waypoint2D &&x);
        
        /*!
         * @brief This function copies the value in member target
         * @param _target New value to be copied in member target
         */
        inline eProsima_user_DllExport void target(const RTC::Pose2D &_target)
        {
            m_target = _target;
        }

        /*!
         * @brief This function moves the value in member target
         * @param _target New value to be moved in member target
         */
        inline eProsima_user_DllExport void target(RTC::Pose2D &&_target)
        {
            m_target = std::move(_target);
        }

        /*!
         * @brief This function returns a constant reference to member target
         * @return Constant reference to member target
         */
        inline eProsima_user_DllExport const RTC::Pose2D& target() const
        {
            return m_target;
        }

        /*!
         * @brief This function returns a reference to member target
         * @return Reference to member target
         */
        inline eProsima_user_DllExport RTC::Pose2D& target()
        {
            return m_target;
        }
        /*!
         * @brief This function sets a value in member distanceTolerance
         * @param _distanceTolerance New value for member distanceTolerance
         */
        inline eProsima_user_DllExport void distanceTolerance(double _distanceTolerance)
        {
            m_distanceTolerance = _distanceTolerance;
        }

        /*!
         * @brief This function returns the value of member distanceTolerance
         * @return Value of member distanceTolerance
         */
        inline eProsima_user_DllExport double distanceTolerance() const
        {
            return m_distanceTolerance;
        }

        /*!
         * @brief This function returns a reference to member distanceTolerance
         * @return Reference to member distanceTolerance
         */
        inline eProsima_user_DllExport double& distanceTolerance()
        {
            return m_distanceTolerance;
        }
        /*!
         * @brief This function sets a value in member headingTolerance
         * @param _headingTolerance New value for member headingTolerance
         */
        inline eProsima_user_DllExport void headingTolerance(double _headingTolerance)
        {
            m_headingTolerance = _headingTolerance;
        }

        /*!
         * @brief This function returns the value of member headingTolerance
         * @return Value of member headingTolerance
         */
        inline eProsima_user_DllExport double headingTolerance() const
        {
            return m_headingTolerance;
        }

        /*!
         * @brief This function returns a reference to member headingTolerance
         * @return Reference to member headingTolerance
         */
        inline eProsima_user_DllExport double& headingTolerance()
        {
            return m_headingTolerance;
        }
        /*!
         * @brief This function copies the value in member timeLimit
         * @param _timeLimit New value to be copied in member timeLimit
         */
        inline eProsima_user_DllExport void timeLimit(const RTC::Time &_timeLimit)
        {
            m_timeLimit = _timeLimit;
        }

        /*!
         * @brief This function moves the value in member timeLimit
         * @param _timeLimit New value to be moved in member timeLimit
         */
        inline eProsima_user_DllExport void timeLimit(RTC::Time &&_timeLimit)
        {
            m_timeLimit = std::move(_timeLimit);
        }

        /*!
         * @brief This function returns a constant reference to member timeLimit
         * @return Constant reference to member timeLimit
         */
        inline eProsima_user_DllExport const RTC::Time& timeLimit() const
        {
            return m_timeLimit;
        }

        /*!
         * @brief This function returns a reference to member timeLimit
         * @return Reference to member timeLimit
         */
        inline eProsima_user_DllExport RTC::Time& timeLimit()
        {
            return m_timeLimit;
        }
        /*!
         * @brief This function copies the value in member maxSpeed
         * @param _maxSpeed New value to be copied in member maxSpeed
         */
        inline eProsima_user_DllExport void maxSpeed(const RTC::Velocity2D &_maxSpeed)
        {
            m_maxSpeed = _maxSpeed;
        }

        /*!
         * @brief This function moves the value in member maxSpeed
         * @param _maxSpeed New value to be moved in member maxSpeed
         */
        inline eProsima_user_DllExport void maxSpeed(RTC::Velocity2D &&_maxSpeed)
        {
            m_maxSpeed = std::move(_maxSpeed);
        }

        /*!
         * @brief This function returns a constant reference to member maxSpeed
         * @return Constant reference to member maxSpeed
         */
        inline eProsima_user_DllExport const RTC::Velocity2D& maxSpeed() const
        {
            return m_maxSpeed;
        }

        /*!
         * @brief This function returns a reference to member maxSpeed
         * @return Reference to member maxSpeed
         */
        inline eProsima_user_DllExport RTC::Velocity2D& maxSpeed()
        {
            return m_maxSpeed;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Waypoint2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose2D m_target;
        double m_distanceTolerance;
        double m_headingTolerance;
        RTC::Time m_timeLimit;
        RTC::Velocity2D m_maxSpeed;
    };
    typedef std::vector<RTC::Waypoint2D> Waypoint2DList;
    /*!
     * @brief This class represents the structure Path2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Path2D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Path2D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Path2D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Path2D that will be copied.
         */
        eProsima_user_DllExport Path2D(const Path2D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Path2D that will be copied.
         */
        eProsima_user_DllExport Path2D(Path2D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Path2D that will be copied.
         */
        eProsima_user_DllExport Path2D& operator=(const Path2D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Path2D that will be copied.
         */
        eProsima_user_DllExport Path2D& operator=(Path2D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member waypoints
         * @param _waypoints New value to be copied in member waypoints
         */
        inline eProsima_user_DllExport void waypoints(const RTC::Waypoint2DList &_waypoints)
        {
            m_waypoints = _waypoints;
        }

        /*!
         * @brief This function moves the value in member waypoints
         * @param _waypoints New value to be moved in member waypoints
         */
        inline eProsima_user_DllExport void waypoints(RTC::Waypoint2DList &&_waypoints)
        {
            m_waypoints = std::move(_waypoints);
        }

        /*!
         * @brief This function returns a constant reference to member waypoints
         * @return Constant reference to member waypoints
         */
        inline eProsima_user_DllExport const RTC::Waypoint2DList& waypoints() const
        {
            return m_waypoints;
        }

        /*!
         * @brief This function returns a reference to member waypoints
         * @return Reference to member waypoints
         */
        inline eProsima_user_DllExport RTC::Waypoint2DList& waypoints()
        {
            return m_waypoints;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Path2D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Waypoint2DList m_waypoints;
    };
    /*!
     * @brief This class represents the structure Waypoint3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Waypoint3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Waypoint3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Waypoint3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Waypoint3D that will be copied.
         */
        eProsima_user_DllExport Waypoint3D(const Waypoint3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Waypoint3D that will be copied.
         */
        eProsima_user_DllExport Waypoint3D(Waypoint3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Waypoint3D that will be copied.
         */
        eProsima_user_DllExport Waypoint3D& operator=(const Waypoint3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Waypoint3D that will be copied.
         */
        eProsima_user_DllExport Waypoint3D& operator=(Waypoint3D &&x);
        
        /*!
         * @brief This function copies the value in member target
         * @param _target New value to be copied in member target
         */
        inline eProsima_user_DllExport void target(const RTC::Pose3D &_target)
        {
            m_target = _target;
        }

        /*!
         * @brief This function moves the value in member target
         * @param _target New value to be moved in member target
         */
        inline eProsima_user_DllExport void target(RTC::Pose3D &&_target)
        {
            m_target = std::move(_target);
        }

        /*!
         * @brief This function returns a constant reference to member target
         * @return Constant reference to member target
         */
        inline eProsima_user_DllExport const RTC::Pose3D& target() const
        {
            return m_target;
        }

        /*!
         * @brief This function returns a reference to member target
         * @return Reference to member target
         */
        inline eProsima_user_DllExport RTC::Pose3D& target()
        {
            return m_target;
        }
        /*!
         * @brief This function sets a value in member distanceTolerance
         * @param _distanceTolerance New value for member distanceTolerance
         */
        inline eProsima_user_DllExport void distanceTolerance(double _distanceTolerance)
        {
            m_distanceTolerance = _distanceTolerance;
        }

        /*!
         * @brief This function returns the value of member distanceTolerance
         * @return Value of member distanceTolerance
         */
        inline eProsima_user_DllExport double distanceTolerance() const
        {
            return m_distanceTolerance;
        }

        /*!
         * @brief This function returns a reference to member distanceTolerance
         * @return Reference to member distanceTolerance
         */
        inline eProsima_user_DllExport double& distanceTolerance()
        {
            return m_distanceTolerance;
        }
        /*!
         * @brief This function sets a value in member headingTolerance
         * @param _headingTolerance New value for member headingTolerance
         */
        inline eProsima_user_DllExport void headingTolerance(double _headingTolerance)
        {
            m_headingTolerance = _headingTolerance;
        }

        /*!
         * @brief This function returns the value of member headingTolerance
         * @return Value of member headingTolerance
         */
        inline eProsima_user_DllExport double headingTolerance() const
        {
            return m_headingTolerance;
        }

        /*!
         * @brief This function returns a reference to member headingTolerance
         * @return Reference to member headingTolerance
         */
        inline eProsima_user_DllExport double& headingTolerance()
        {
            return m_headingTolerance;
        }
        /*!
         * @brief This function copies the value in member timeLimit
         * @param _timeLimit New value to be copied in member timeLimit
         */
        inline eProsima_user_DllExport void timeLimit(const RTC::Time &_timeLimit)
        {
            m_timeLimit = _timeLimit;
        }

        /*!
         * @brief This function moves the value in member timeLimit
         * @param _timeLimit New value to be moved in member timeLimit
         */
        inline eProsima_user_DllExport void timeLimit(RTC::Time &&_timeLimit)
        {
            m_timeLimit = std::move(_timeLimit);
        }

        /*!
         * @brief This function returns a constant reference to member timeLimit
         * @return Constant reference to member timeLimit
         */
        inline eProsima_user_DllExport const RTC::Time& timeLimit() const
        {
            return m_timeLimit;
        }

        /*!
         * @brief This function returns a reference to member timeLimit
         * @return Reference to member timeLimit
         */
        inline eProsima_user_DllExport RTC::Time& timeLimit()
        {
            return m_timeLimit;
        }
        /*!
         * @brief This function copies the value in member maxSpeed
         * @param _maxSpeed New value to be copied in member maxSpeed
         */
        inline eProsima_user_DllExport void maxSpeed(const RTC::Velocity3D &_maxSpeed)
        {
            m_maxSpeed = _maxSpeed;
        }

        /*!
         * @brief This function moves the value in member maxSpeed
         * @param _maxSpeed New value to be moved in member maxSpeed
         */
        inline eProsima_user_DllExport void maxSpeed(RTC::Velocity3D &&_maxSpeed)
        {
            m_maxSpeed = std::move(_maxSpeed);
        }

        /*!
         * @brief This function returns a constant reference to member maxSpeed
         * @return Constant reference to member maxSpeed
         */
        inline eProsima_user_DllExport const RTC::Velocity3D& maxSpeed() const
        {
            return m_maxSpeed;
        }

        /*!
         * @brief This function returns a reference to member maxSpeed
         * @return Reference to member maxSpeed
         */
        inline eProsima_user_DllExport RTC::Velocity3D& maxSpeed()
        {
            return m_maxSpeed;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Waypoint3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Pose3D m_target;
        double m_distanceTolerance;
        double m_headingTolerance;
        RTC::Time m_timeLimit;
        RTC::Velocity3D m_maxSpeed;
    };
    typedef std::vector<RTC::Waypoint3D> Waypoint3DList;
    /*!
     * @brief This class represents the structure Path3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Path3D
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Path3D();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Path3D();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::Path3D that will be copied.
         */
        eProsima_user_DllExport Path3D(const Path3D &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::Path3D that will be copied.
         */
        eProsima_user_DllExport Path3D(Path3D &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::Path3D that will be copied.
         */
        eProsima_user_DllExport Path3D& operator=(const Path3D &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::Path3D that will be copied.
         */
        eProsima_user_DllExport Path3D& operator=(Path3D &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member waypoints
         * @param _waypoints New value to be copied in member waypoints
         */
        inline eProsima_user_DllExport void waypoints(const RTC::Waypoint3DList &_waypoints)
        {
            m_waypoints = _waypoints;
        }

        /*!
         * @brief This function moves the value in member waypoints
         * @param _waypoints New value to be moved in member waypoints
         */
        inline eProsima_user_DllExport void waypoints(RTC::Waypoint3DList &&_waypoints)
        {
            m_waypoints = std::move(_waypoints);
        }

        /*!
         * @brief This function returns a constant reference to member waypoints
         * @return Constant reference to member waypoints
         */
        inline eProsima_user_DllExport const RTC::Waypoint3DList& waypoints() const
        {
            return m_waypoints;
        }

        /*!
         * @brief This function returns a reference to member waypoints
         * @return Reference to member waypoints
         */
        inline eProsima_user_DllExport RTC::Waypoint3DList& waypoints()
        {
            return m_waypoints;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::Path3D& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::Waypoint3DList m_waypoints;
    };
    /*!
     * @brief This class represents the structure PointCloudPoint defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PointCloudPoint
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PointCloudPoint();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PointCloudPoint();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PointCloudPoint that will be copied.
         */
        eProsima_user_DllExport PointCloudPoint(const PointCloudPoint &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PointCloudPoint that will be copied.
         */
        eProsima_user_DllExport PointCloudPoint(PointCloudPoint &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PointCloudPoint that will be copied.
         */
        eProsima_user_DllExport PointCloudPoint& operator=(const PointCloudPoint &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PointCloudPoint that will be copied.
         */
        eProsima_user_DllExport PointCloudPoint& operator=(PointCloudPoint &&x);
        
        /*!
         * @brief This function copies the value in member point
         * @param _point New value to be copied in member point
         */
        inline eProsima_user_DllExport void point(const RTC::Point3D &_point)
        {
            m_point = _point;
        }

        /*!
         * @brief This function moves the value in member point
         * @param _point New value to be moved in member point
         */
        inline eProsima_user_DllExport void point(RTC::Point3D &&_point)
        {
            m_point = std::move(_point);
        }

        /*!
         * @brief This function returns a constant reference to member point
         * @return Constant reference to member point
         */
        inline eProsima_user_DllExport const RTC::Point3D& point() const
        {
            return m_point;
        }

        /*!
         * @brief This function returns a reference to member point
         * @return Reference to member point
         */
        inline eProsima_user_DllExport RTC::Point3D& point()
        {
            return m_point;
        }
        /*!
         * @brief This function copies the value in member colour
         * @param _colour New value to be copied in member colour
         */
        inline eProsima_user_DllExport void colour(const RTC::RGBColour &_colour)
        {
            m_colour = _colour;
        }

        /*!
         * @brief This function moves the value in member colour
         * @param _colour New value to be moved in member colour
         */
        inline eProsima_user_DllExport void colour(RTC::RGBColour &&_colour)
        {
            m_colour = std::move(_colour);
        }

        /*!
         * @brief This function returns a constant reference to member colour
         * @return Constant reference to member colour
         */
        inline eProsima_user_DllExport const RTC::RGBColour& colour() const
        {
            return m_colour;
        }

        /*!
         * @brief This function returns a reference to member colour
         * @return Reference to member colour
         */
        inline eProsima_user_DllExport RTC::RGBColour& colour()
        {
            return m_colour;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PointCloudPoint& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Point3D m_point;
        RTC::RGBColour m_colour;
    };
    typedef std::vector<RTC::PointCloudPoint> PointCloudPointList;
    /*!
     * @brief This class represents the structure PointCloud defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PointCloud
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PointCloud();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PointCloud();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PointCloud that will be copied.
         */
        eProsima_user_DllExport PointCloud(const PointCloud &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PointCloud that will be copied.
         */
        eProsima_user_DllExport PointCloud(PointCloud &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PointCloud that will be copied.
         */
        eProsima_user_DllExport PointCloud& operator=(const PointCloud &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PointCloud that will be copied.
         */
        eProsima_user_DllExport PointCloud& operator=(PointCloud &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member points
         * @param _points New value to be copied in member points
         */
        inline eProsima_user_DllExport void points(const RTC::PointCloudPointList &_points)
        {
            m_points = _points;
        }

        /*!
         * @brief This function moves the value in member points
         * @param _points New value to be moved in member points
         */
        inline eProsima_user_DllExport void points(RTC::PointCloudPointList &&_points)
        {
            m_points = std::move(_points);
        }

        /*!
         * @brief This function returns a constant reference to member points
         * @return Constant reference to member points
         */
        inline eProsima_user_DllExport const RTC::PointCloudPointList& points() const
        {
            return m_points;
        }

        /*!
         * @brief This function returns a reference to member points
         * @return Reference to member points
         */
        inline eProsima_user_DllExport RTC::PointCloudPointList& points()
        {
            return m_points;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PointCloud& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::PointCloudPointList m_points;
    };
    /*!
     * @brief This class represents the structure PanTiltAngles defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PanTiltAngles
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PanTiltAngles();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PanTiltAngles();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PanTiltAngles that will be copied.
         */
        eProsima_user_DllExport PanTiltAngles(const PanTiltAngles &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PanTiltAngles that will be copied.
         */
        eProsima_user_DllExport PanTiltAngles(PanTiltAngles &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PanTiltAngles that will be copied.
         */
        eProsima_user_DllExport PanTiltAngles& operator=(const PanTiltAngles &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PanTiltAngles that will be copied.
         */
        eProsima_user_DllExport PanTiltAngles& operator=(PanTiltAngles &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function sets a value in member pan
         * @param _pan New value for member pan
         */
        inline eProsima_user_DllExport void pan(double _pan)
        {
            m_pan = _pan;
        }

        /*!
         * @brief This function returns the value of member pan
         * @return Value of member pan
         */
        inline eProsima_user_DllExport double pan() const
        {
            return m_pan;
        }

        /*!
         * @brief This function returns a reference to member pan
         * @return Reference to member pan
         */
        inline eProsima_user_DllExport double& pan()
        {
            return m_pan;
        }
        /*!
         * @brief This function sets a value in member tilt
         * @param _tilt New value for member tilt
         */
        inline eProsima_user_DllExport void tilt(double _tilt)
        {
            m_tilt = _tilt;
        }

        /*!
         * @brief This function returns the value of member tilt
         * @return Value of member tilt
         */
        inline eProsima_user_DllExport double tilt() const
        {
            return m_tilt;
        }

        /*!
         * @brief This function returns a reference to member tilt
         * @return Reference to member tilt
         */
        inline eProsima_user_DllExport double& tilt()
        {
            return m_tilt;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PanTiltAngles& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        double m_pan;
        double m_tilt;
    };
    /*!
     * @brief This class represents the structure PanTiltState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PanTiltState
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PanTiltState();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PanTiltState();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::PanTiltState that will be copied.
         */
        eProsima_user_DllExport PanTiltState(const PanTiltState &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::PanTiltState that will be copied.
         */
        eProsima_user_DllExport PanTiltState(PanTiltState &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::PanTiltState that will be copied.
         */
        eProsima_user_DllExport PanTiltState& operator=(const PanTiltState &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::PanTiltState that will be copied.
         */
        eProsima_user_DllExport PanTiltState& operator=(PanTiltState &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member angles
         * @param _angles New value to be copied in member angles
         */
        inline eProsima_user_DllExport void angles(const RTC::PanTiltAngles &_angles)
        {
            m_angles = _angles;
        }

        /*!
         * @brief This function moves the value in member angles
         * @param _angles New value to be moved in member angles
         */
        inline eProsima_user_DllExport void angles(RTC::PanTiltAngles &&_angles)
        {
            m_angles = std::move(_angles);
        }

        /*!
         * @brief This function returns a constant reference to member angles
         * @return Constant reference to member angles
         */
        inline eProsima_user_DllExport const RTC::PanTiltAngles& angles() const
        {
            return m_angles;
        }

        /*!
         * @brief This function returns a reference to member angles
         * @return Reference to member angles
         */
        inline eProsima_user_DllExport RTC::PanTiltAngles& angles()
        {
            return m_angles;
        }
        /*!
         * @brief This function sets a value in member panSpeed
         * @param _panSpeed New value for member panSpeed
         */
        inline eProsima_user_DllExport void panSpeed(double _panSpeed)
        {
            m_panSpeed = _panSpeed;
        }

        /*!
         * @brief This function returns the value of member panSpeed
         * @return Value of member panSpeed
         */
        inline eProsima_user_DllExport double panSpeed() const
        {
            return m_panSpeed;
        }

        /*!
         * @brief This function returns a reference to member panSpeed
         * @return Reference to member panSpeed
         */
        inline eProsima_user_DllExport double& panSpeed()
        {
            return m_panSpeed;
        }
        /*!
         * @brief This function sets a value in member tiltSpeed
         * @param _tiltSpeed New value for member tiltSpeed
         */
        inline eProsima_user_DllExport void tiltSpeed(double _tiltSpeed)
        {
            m_tiltSpeed = _tiltSpeed;
        }

        /*!
         * @brief This function returns the value of member tiltSpeed
         * @return Value of member tiltSpeed
         */
        inline eProsima_user_DllExport double tiltSpeed() const
        {
            return m_tiltSpeed;
        }

        /*!
         * @brief This function returns a reference to member tiltSpeed
         * @return Reference to member tiltSpeed
         */
        inline eProsima_user_DllExport double& tiltSpeed()
        {
            return m_tiltSpeed;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::PanTiltState& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::PanTiltAngles m_angles;
        double m_panSpeed;
        double m_tiltSpeed;
    };
    typedef std::vector<RTC::Geometry3D> ElementGeometryList;
    /*!
     * @brief This class represents the structure RangerGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class RangerGeometry
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport RangerGeometry();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~RangerGeometry();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::RangerGeometry that will be copied.
         */
        eProsima_user_DllExport RangerGeometry(const RangerGeometry &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::RangerGeometry that will be copied.
         */
        eProsima_user_DllExport RangerGeometry(RangerGeometry &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::RangerGeometry that will be copied.
         */
        eProsima_user_DllExport RangerGeometry& operator=(const RangerGeometry &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::RangerGeometry that will be copied.
         */
        eProsima_user_DllExport RangerGeometry& operator=(RangerGeometry &&x);
        
        /*!
         * @brief This function copies the value in member geometry
         * @param _geometry New value to be copied in member geometry
         */
        inline eProsima_user_DllExport void geometry(const RTC::Geometry3D &_geometry)
        {
            m_geometry = _geometry;
        }

        /*!
         * @brief This function moves the value in member geometry
         * @param _geometry New value to be moved in member geometry
         */
        inline eProsima_user_DllExport void geometry(RTC::Geometry3D &&_geometry)
        {
            m_geometry = std::move(_geometry);
        }

        /*!
         * @brief This function returns a constant reference to member geometry
         * @return Constant reference to member geometry
         */
        inline eProsima_user_DllExport const RTC::Geometry3D& geometry() const
        {
            return m_geometry;
        }

        /*!
         * @brief This function returns a reference to member geometry
         * @return Reference to member geometry
         */
        inline eProsima_user_DllExport RTC::Geometry3D& geometry()
        {
            return m_geometry;
        }
        /*!
         * @brief This function copies the value in member elementGeometries
         * @param _elementGeometries New value to be copied in member elementGeometries
         */
        inline eProsima_user_DllExport void elementGeometries(const RTC::ElementGeometryList &_elementGeometries)
        {
            m_elementGeometries = _elementGeometries;
        }

        /*!
         * @brief This function moves the value in member elementGeometries
         * @param _elementGeometries New value to be moved in member elementGeometries
         */
        inline eProsima_user_DllExport void elementGeometries(RTC::ElementGeometryList &&_elementGeometries)
        {
            m_elementGeometries = std::move(_elementGeometries);
        }

        /*!
         * @brief This function returns a constant reference to member elementGeometries
         * @return Constant reference to member elementGeometries
         */
        inline eProsima_user_DllExport const RTC::ElementGeometryList& elementGeometries() const
        {
            return m_elementGeometries;
        }

        /*!
         * @brief This function returns a reference to member elementGeometries
         * @return Reference to member elementGeometries
         */
        inline eProsima_user_DllExport RTC::ElementGeometryList& elementGeometries()
        {
            return m_elementGeometries;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::RangerGeometry& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Geometry3D m_geometry;
        RTC::ElementGeometryList m_elementGeometries;
    };
    /*!
     * @brief This class represents the structure RangerConfig defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class RangerConfig
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport RangerConfig();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~RangerConfig();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::RangerConfig that will be copied.
         */
        eProsima_user_DllExport RangerConfig(const RangerConfig &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::RangerConfig that will be copied.
         */
        eProsima_user_DllExport RangerConfig(RangerConfig &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::RangerConfig that will be copied.
         */
        eProsima_user_DllExport RangerConfig& operator=(const RangerConfig &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::RangerConfig that will be copied.
         */
        eProsima_user_DllExport RangerConfig& operator=(RangerConfig &&x);
        
        /*!
         * @brief This function sets a value in member minAngle
         * @param _minAngle New value for member minAngle
         */
        inline eProsima_user_DllExport void minAngle(double _minAngle)
        {
            m_minAngle = _minAngle;
        }

        /*!
         * @brief This function returns the value of member minAngle
         * @return Value of member minAngle
         */
        inline eProsima_user_DllExport double minAngle() const
        {
            return m_minAngle;
        }

        /*!
         * @brief This function returns a reference to member minAngle
         * @return Reference to member minAngle
         */
        inline eProsima_user_DllExport double& minAngle()
        {
            return m_minAngle;
        }
        /*!
         * @brief This function sets a value in member maxAngle
         * @param _maxAngle New value for member maxAngle
         */
        inline eProsima_user_DllExport void maxAngle(double _maxAngle)
        {
            m_maxAngle = _maxAngle;
        }

        /*!
         * @brief This function returns the value of member maxAngle
         * @return Value of member maxAngle
         */
        inline eProsima_user_DllExport double maxAngle() const
        {
            return m_maxAngle;
        }

        /*!
         * @brief This function returns a reference to member maxAngle
         * @return Reference to member maxAngle
         */
        inline eProsima_user_DllExport double& maxAngle()
        {
            return m_maxAngle;
        }
        /*!
         * @brief This function sets a value in member angularRes
         * @param _angularRes New value for member angularRes
         */
        inline eProsima_user_DllExport void angularRes(double _angularRes)
        {
            m_angularRes = _angularRes;
        }

        /*!
         * @brief This function returns the value of member angularRes
         * @return Value of member angularRes
         */
        inline eProsima_user_DllExport double angularRes() const
        {
            return m_angularRes;
        }

        /*!
         * @brief This function returns a reference to member angularRes
         * @return Reference to member angularRes
         */
        inline eProsima_user_DllExport double& angularRes()
        {
            return m_angularRes;
        }
        /*!
         * @brief This function sets a value in member minRange
         * @param _minRange New value for member minRange
         */
        inline eProsima_user_DllExport void minRange(double _minRange)
        {
            m_minRange = _minRange;
        }

        /*!
         * @brief This function returns the value of member minRange
         * @return Value of member minRange
         */
        inline eProsima_user_DllExport double minRange() const
        {
            return m_minRange;
        }

        /*!
         * @brief This function returns a reference to member minRange
         * @return Reference to member minRange
         */
        inline eProsima_user_DllExport double& minRange()
        {
            return m_minRange;
        }
        /*!
         * @brief This function sets a value in member maxRange
         * @param _maxRange New value for member maxRange
         */
        inline eProsima_user_DllExport void maxRange(double _maxRange)
        {
            m_maxRange = _maxRange;
        }

        /*!
         * @brief This function returns the value of member maxRange
         * @return Value of member maxRange
         */
        inline eProsima_user_DllExport double maxRange() const
        {
            return m_maxRange;
        }

        /*!
         * @brief This function returns a reference to member maxRange
         * @return Reference to member maxRange
         */
        inline eProsima_user_DllExport double& maxRange()
        {
            return m_maxRange;
        }
        /*!
         * @brief This function sets a value in member rangeRes
         * @param _rangeRes New value for member rangeRes
         */
        inline eProsima_user_DllExport void rangeRes(double _rangeRes)
        {
            m_rangeRes = _rangeRes;
        }

        /*!
         * @brief This function returns the value of member rangeRes
         * @return Value of member rangeRes
         */
        inline eProsima_user_DllExport double rangeRes() const
        {
            return m_rangeRes;
        }

        /*!
         * @brief This function returns a reference to member rangeRes
         * @return Reference to member rangeRes
         */
        inline eProsima_user_DllExport double& rangeRes()
        {
            return m_rangeRes;
        }
        /*!
         * @brief This function sets a value in member frequency
         * @param _frequency New value for member frequency
         */
        inline eProsima_user_DllExport void frequency(double _frequency)
        {
            m_frequency = _frequency;
        }

        /*!
         * @brief This function returns the value of member frequency
         * @return Value of member frequency
         */
        inline eProsima_user_DllExport double frequency() const
        {
            return m_frequency;
        }

        /*!
         * @brief This function returns a reference to member frequency
         * @return Reference to member frequency
         */
        inline eProsima_user_DllExport double& frequency()
        {
            return m_frequency;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::RangerConfig& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        double m_minAngle;
        double m_maxAngle;
        double m_angularRes;
        double m_minRange;
        double m_maxRange;
        double m_rangeRes;
        double m_frequency;
    };
    typedef std::vector<double> RangeList;
    /*!
     * @brief This class represents the structure RangeData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class RangeData
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport RangeData();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~RangeData();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::RangeData that will be copied.
         */
        eProsima_user_DllExport RangeData(const RangeData &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::RangeData that will be copied.
         */
        eProsima_user_DllExport RangeData(RangeData &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::RangeData that will be copied.
         */
        eProsima_user_DllExport RangeData& operator=(const RangeData &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::RangeData that will be copied.
         */
        eProsima_user_DllExport RangeData& operator=(RangeData &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member ranges
         * @param _ranges New value to be copied in member ranges
         */
        inline eProsima_user_DllExport void ranges(const RTC::RangeList &_ranges)
        {
            m_ranges = _ranges;
        }

        /*!
         * @brief This function moves the value in member ranges
         * @param _ranges New value to be moved in member ranges
         */
        inline eProsima_user_DllExport void ranges(RTC::RangeList &&_ranges)
        {
            m_ranges = std::move(_ranges);
        }

        /*!
         * @brief This function returns a constant reference to member ranges
         * @return Constant reference to member ranges
         */
        inline eProsima_user_DllExport const RTC::RangeList& ranges() const
        {
            return m_ranges;
        }

        /*!
         * @brief This function returns a reference to member ranges
         * @return Reference to member ranges
         */
        inline eProsima_user_DllExport RTC::RangeList& ranges()
        {
            return m_ranges;
        }
        /*!
         * @brief This function copies the value in member geometry
         * @param _geometry New value to be copied in member geometry
         */
        inline eProsima_user_DllExport void geometry(const RTC::RangerGeometry &_geometry)
        {
            m_geometry = _geometry;
        }

        /*!
         * @brief This function moves the value in member geometry
         * @param _geometry New value to be moved in member geometry
         */
        inline eProsima_user_DllExport void geometry(RTC::RangerGeometry &&_geometry)
        {
            m_geometry = std::move(_geometry);
        }

        /*!
         * @brief This function returns a constant reference to member geometry
         * @return Constant reference to member geometry
         */
        inline eProsima_user_DllExport const RTC::RangerGeometry& geometry() const
        {
            return m_geometry;
        }

        /*!
         * @brief This function returns a reference to member geometry
         * @return Reference to member geometry
         */
        inline eProsima_user_DllExport RTC::RangerGeometry& geometry()
        {
            return m_geometry;
        }
        /*!
         * @brief This function copies the value in member config
         * @param _config New value to be copied in member config
         */
        inline eProsima_user_DllExport void config(const RTC::RangerConfig &_config)
        {
            m_config = _config;
        }

        /*!
         * @brief This function moves the value in member config
         * @param _config New value to be moved in member config
         */
        inline eProsima_user_DllExport void config(RTC::RangerConfig &&_config)
        {
            m_config = std::move(_config);
        }

        /*!
         * @brief This function returns a constant reference to member config
         * @return Constant reference to member config
         */
        inline eProsima_user_DllExport const RTC::RangerConfig& config() const
        {
            return m_config;
        }

        /*!
         * @brief This function returns a reference to member config
         * @return Reference to member config
         */
        inline eProsima_user_DllExport RTC::RangerConfig& config()
        {
            return m_config;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::RangeData& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::RangeList m_ranges;
        RTC::RangerGeometry m_geometry;
        RTC::RangerConfig m_config;
    };
    typedef std::vector<double> IntensityList;
    /*!
     * @brief This class represents the structure IntensityData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class IntensityData
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport IntensityData();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~IntensityData();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object RTC::IntensityData that will be copied.
         */
        eProsima_user_DllExport IntensityData(const IntensityData &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object RTC::IntensityData that will be copied.
         */
        eProsima_user_DllExport IntensityData(IntensityData &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object RTC::IntensityData that will be copied.
         */
        eProsima_user_DllExport IntensityData& operator=(const IntensityData &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object RTC::IntensityData that will be copied.
         */
        eProsima_user_DllExport IntensityData& operator=(IntensityData &&x);
        
        /*!
         * @brief This function copies the value in member tm
         * @param _tm New value to be copied in member tm
         */
        inline eProsima_user_DllExport void tm(const RTC::Time &_tm)
        {
            m_tm = _tm;
        }

        /*!
         * @brief This function moves the value in member tm
         * @param _tm New value to be moved in member tm
         */
        inline eProsima_user_DllExport void tm(RTC::Time &&_tm)
        {
            m_tm = std::move(_tm);
        }

        /*!
         * @brief This function returns a constant reference to member tm
         * @return Constant reference to member tm
         */
        inline eProsima_user_DllExport const RTC::Time& tm() const
        {
            return m_tm;
        }

        /*!
         * @brief This function returns a reference to member tm
         * @return Reference to member tm
         */
        inline eProsima_user_DllExport RTC::Time& tm()
        {
            return m_tm;
        }
        /*!
         * @brief This function copies the value in member intensities
         * @param _intensities New value to be copied in member intensities
         */
        inline eProsima_user_DllExport void intensities(const RTC::IntensityList &_intensities)
        {
            m_intensities = _intensities;
        }

        /*!
         * @brief This function moves the value in member intensities
         * @param _intensities New value to be moved in member intensities
         */
        inline eProsima_user_DllExport void intensities(RTC::IntensityList &&_intensities)
        {
            m_intensities = std::move(_intensities);
        }

        /*!
         * @brief This function returns a constant reference to member intensities
         * @return Constant reference to member intensities
         */
        inline eProsima_user_DllExport const RTC::IntensityList& intensities() const
        {
            return m_intensities;
        }

        /*!
         * @brief This function returns a reference to member intensities
         * @return Reference to member intensities
         */
        inline eProsima_user_DllExport RTC::IntensityList& intensities()
        {
            return m_intensities;
        }
        /*!
         * @brief This function copies the value in member geometry
         * @param _geometry New value to be copied in member geometry
         */
        inline eProsima_user_DllExport void geometry(const RTC::RangerGeometry &_geometry)
        {
            m_geometry = _geometry;
        }

        /*!
         * @brief This function moves the value in member geometry
         * @param _geometry New value to be moved in member geometry
         */
        inline eProsima_user_DllExport void geometry(RTC::RangerGeometry &&_geometry)
        {
            m_geometry = std::move(_geometry);
        }

        /*!
         * @brief This function returns a constant reference to member geometry
         * @return Constant reference to member geometry
         */
        inline eProsima_user_DllExport const RTC::RangerGeometry& geometry() const
        {
            return m_geometry;
        }

        /*!
         * @brief This function returns a reference to member geometry
         * @return Reference to member geometry
         */
        inline eProsima_user_DllExport RTC::RangerGeometry& geometry()
        {
            return m_geometry;
        }
        /*!
         * @brief This function copies the value in member config
         * @param _config New value to be copied in member config
         */
        inline eProsima_user_DllExport void config(const RTC::RangerConfig &_config)
        {
            m_config = _config;
        }

        /*!
         * @brief This function moves the value in member config
         * @param _config New value to be moved in member config
         */
        inline eProsima_user_DllExport void config(RTC::RangerConfig &&_config)
        {
            m_config = std::move(_config);
        }

        /*!
         * @brief This function returns a constant reference to member config
         * @return Constant reference to member config
         */
        inline eProsima_user_DllExport const RTC::RangerConfig& config() const
        {
            return m_config;
        }

        /*!
         * @brief This function returns a reference to member config
         * @return Reference to member config
         */
        inline eProsima_user_DllExport RTC::RangerConfig& config()
        {
            return m_config;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const RTC::IntensityData& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        RTC::Time m_tm;
        RTC::IntensityList m_intensities;
        RTC::RangerGeometry m_geometry;
        RTC::RangerConfig m_config;
    };
    typedef std::vector<uint8_t> RFIDTagData;
}

#endif // _RTC_INTERFACEDATATYPES_H_