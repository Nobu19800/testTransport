// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file BasicDataTypePubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _RTC_BASICDATATYPE_PUBSUBTYPES_H_
#define _RTC_BASICDATATYPE_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

#include "BasicDataType.h"

namespace RTC
{
    /*!
     * @brief This class represents the TopicDataType of the type Time defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Time type;

    	TimePubSubType();
    	virtual ~TimePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedState defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedStatePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedState type;

    	TimedStatePubSubType();
    	virtual ~TimedStatePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedShort defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedShortPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedShort type;

    	TimedShortPubSubType();
    	virtual ~TimedShortPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedLong defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedLongPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedLong type;

    	TimedLongPubSubType();
    	virtual ~TimedLongPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedUShort defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedUShortPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedUShort type;

    	TimedUShortPubSubType();
    	virtual ~TimedUShortPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedULong defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedULongPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedULong type;

    	TimedULongPubSubType();
    	virtual ~TimedULongPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedFloat defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedFloatPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedFloat type;

    	TimedFloatPubSubType();
    	virtual ~TimedFloatPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedDouble defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedDoublePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedDouble type;

    	TimedDoublePubSubType();
    	virtual ~TimedDoublePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedChar defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedCharPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedChar type;

    	TimedCharPubSubType();
    	virtual ~TimedCharPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedBoolean defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedBooleanPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedBoolean type;

    	TimedBooleanPubSubType();
    	virtual ~TimedBooleanPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedOctet defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedOctetPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedOctet type;

    	TimedOctetPubSubType();
    	virtual ~TimedOctetPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedString defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedStringPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedString type;

    	TimedStringPubSubType();
    	virtual ~TimedStringPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedShortSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedShortSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedShortSeq type;

    	TimedShortSeqPubSubType();
    	virtual ~TimedShortSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedLongSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedLongSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedLongSeq type;

    	TimedLongSeqPubSubType();
    	virtual ~TimedLongSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedUShortSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedUShortSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedUShortSeq type;

    	TimedUShortSeqPubSubType();
    	virtual ~TimedUShortSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedULongSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedULongSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedULongSeq type;

    	TimedULongSeqPubSubType();
    	virtual ~TimedULongSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedFloatSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedFloatSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedFloatSeq type;

    	TimedFloatSeqPubSubType();
    	virtual ~TimedFloatSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedDoubleSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedDoubleSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedDoubleSeq type;

    	TimedDoubleSeqPubSubType();
    	virtual ~TimedDoubleSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedCharSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedCharSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedCharSeq type;

    	TimedCharSeqPubSubType();
    	virtual ~TimedCharSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedBooleanSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedBooleanSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedBooleanSeq type;

    	TimedBooleanSeqPubSubType();
    	virtual ~TimedBooleanSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedOctetSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedOctetSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedOctetSeq type;

    	TimedOctetSeqPubSubType();
    	virtual ~TimedOctetSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedStringSeq defined by the user in the IDL file.
     * @ingroup BASICDATATYPE
     */
    class TimedStringSeqPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedStringSeq type;

    	TimedStringSeqPubSubType();
    	virtual ~TimedStringSeqPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
}

#endif // _RTC_BASICDATATYPE_PUBSUBTYPES_H_