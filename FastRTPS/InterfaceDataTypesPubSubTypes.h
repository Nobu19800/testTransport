// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file InterfaceDataTypesPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _RTC_INTERFACEDATATYPES_PUBSUBTYPES_H_
#define _RTC_INTERFACEDATATYPES_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

#include "InterfaceDataTypes.h"

namespace RTC
{
    /*!
     * @brief This class represents the TopicDataType of the type ActArrayActuatorPos defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorPosPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef ActArrayActuatorPos type;

    	ActArrayActuatorPosPubSubType();
    	virtual ~ActArrayActuatorPosPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type ActArrayActuatorSpeed defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorSpeedPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef ActArrayActuatorSpeed type;

    	ActArrayActuatorSpeedPubSubType();
    	virtual ~ActArrayActuatorSpeedPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type ActArrayActuatorCurrent defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorCurrentPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef ActArrayActuatorCurrent type;

    	ActArrayActuatorCurrentPubSubType();
    	virtual ~ActArrayActuatorCurrentPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };

    /*!
     * @brief This class represents the TopicDataType of the type Actuator defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActuatorPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Actuator type;

    	ActuatorPubSubType();
    	virtual ~ActuatorPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::Actuator> ActuatorList;
    /*!
     * @brief This class represents the TopicDataType of the type ActArrayState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayStatePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef ActArrayState type;

    	ActArrayStatePubSubType();
    	virtual ~ActArrayStatePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };

    /*!
     * @brief This class represents the TopicDataType of the type ActArrayActuatorGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayActuatorGeometryPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef ActArrayActuatorGeometry type;

    	ActArrayActuatorGeometryPubSubType();
    	virtual ~ActArrayActuatorGeometryPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::ActArrayActuatorGeometry> ActArrayActuatorGeometryList;
    /*!
     * @brief This class represents the TopicDataType of the type ActArrayGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class ActArrayGeometryPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef ActArrayGeometry type;

    	ActArrayGeometryPubSubType();
    	virtual ~ActArrayGeometryPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type BumperGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class BumperGeometryPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef BumperGeometry type;

    	BumperGeometryPubSubType();
    	virtual ~BumperGeometryPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::BumperGeometry> BumperGeometryList;
    /*!
     * @brief This class represents the TopicDataType of the type BumperArrayGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class BumperArrayGeometryPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef BumperArrayGeometry type;

    	BumperArrayGeometryPubSubType();
    	virtual ~BumperArrayGeometryPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type CameraImage defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class CameraImagePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef CameraImage type;

    	CameraImagePubSubType();
    	virtual ~CameraImagePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
#if (FASTRTPS_VERSION_MAJOR <= 1) && (FASTRTPS_VERSION_MINOR <= 6)
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
#else
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle, bool force_md5 = false);
#endif
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type CameraInfo defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class CameraInfoPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef CameraInfo type;

    	CameraInfoPubSubType();
    	virtual ~CameraInfoPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type FiducialInfo defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class FiducialInfoPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef FiducialInfo type;

    	FiducialInfoPubSubType();
    	virtual ~FiducialInfoPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::FiducialInfo> FiducialInfoList;
    /*!
     * @brief This class represents the TopicDataType of the type Fiducials defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class FiducialsPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Fiducials type;

    	FiducialsPubSubType();
    	virtual ~FiducialsPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type FiducialFOV defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class FiducialFOVPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef FiducialFOV type;

    	FiducialFOVPubSubType();
    	virtual ~FiducialFOVPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type GPSTime defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GPSTimePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef GPSTime type;

    	GPSTimePubSubType();
    	virtual ~GPSTimePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };

    /*!
     * @brief This class represents the TopicDataType of the type GPSData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GPSDataPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef GPSData type;

    	GPSDataPubSubType();
    	virtual ~GPSDataPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };

    /*!
     * @brief This class represents the TopicDataType of the type GripperState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GripperStatePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef GripperState type;

    	GripperStatePubSubType();
    	virtual ~GripperStatePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type GripperGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class GripperGeometryPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef GripperGeometry type;

    	GripperGeometryPubSubType();
    	virtual ~GripperGeometryPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type INSData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class INSDataPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef INSData type;

    	INSDataPubSubType();
    	virtual ~INSDataPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };

    /*!
     * @brief This class represents the TopicDataType of the type LimbState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class LimbStatePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef LimbState type;

    	LimbStatePubSubType();
    	virtual ~LimbStatePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Hypothesis2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypothesis2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Hypothesis2D type;

    	Hypothesis2DPubSubType();
    	virtual ~Hypothesis2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::Hypothesis2D> Hypothesis2DList;
    /*!
     * @brief This class represents the TopicDataType of the type Hypotheses2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypotheses2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Hypotheses2D type;

    	Hypotheses2DPubSubType();
    	virtual ~Hypotheses2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Hypothesis3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypothesis3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Hypothesis3D type;

    	Hypothesis3DPubSubType();
    	virtual ~Hypothesis3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::Hypothesis3D> Hypothesis3DList;
    /*!
     * @brief This class represents the TopicDataType of the type Hypotheses3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Hypotheses3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Hypotheses3D type;

    	Hypotheses3DPubSubType();
    	virtual ~Hypotheses3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type OGMapConfig defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class OGMapConfigPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef OGMapConfig type;

    	OGMapConfigPubSubType();
    	virtual ~OGMapConfigPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<uint8_t> OGMapCells;
    /*!
     * @brief This class represents the TopicDataType of the type OGMapTile defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class OGMapTilePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef OGMapTile type;

    	OGMapTilePubSubType();
    	virtual ~OGMapTilePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type PointFeature defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PointFeaturePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PointFeature type;

    	PointFeaturePubSubType();
    	virtual ~PointFeaturePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::PointFeature> PointFeatureList;
    /*!
     * @brief This class represents the TopicDataType of the type PoseFeature defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PoseFeaturePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PoseFeature type;

    	PoseFeaturePubSubType();
    	virtual ~PoseFeaturePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::PoseFeature> PoseFeatureList;
    /*!
     * @brief This class represents the TopicDataType of the type LineFeature defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class LineFeaturePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef LineFeature type;

    	LineFeaturePubSubType();
    	virtual ~LineFeaturePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::LineFeature> LineFeatureList;
    /*!
     * @brief This class represents the TopicDataType of the type Features defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class FeaturesPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Features type;

    	FeaturesPubSubType();
    	virtual ~FeaturesPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::CameraImage> MulticameraImageList;
    /*!
     * @brief This class represents the TopicDataType of the type MultiCameraImages defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class MultiCameraImagesPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef MultiCameraImages type;

    	MultiCameraImagesPubSubType();
    	virtual ~MultiCameraImagesPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::CameraInfo> MulticameraInfoList;
    typedef std::vector<RTC::Geometry3D> MulticameraGeometryList;
    /*!
     * @brief This class represents the TopicDataType of the type MulticameraGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class MulticameraGeometryPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef MulticameraGeometry type;

    	MulticameraGeometryPubSubType();
    	virtual ~MulticameraGeometryPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Waypoint2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Waypoint2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Waypoint2D type;

    	Waypoint2DPubSubType();
    	virtual ~Waypoint2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::Waypoint2D> Waypoint2DList;
    /*!
     * @brief This class represents the TopicDataType of the type Path2D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Path2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Path2D type;

    	Path2DPubSubType();
    	virtual ~Path2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Waypoint3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Waypoint3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Waypoint3D type;

    	Waypoint3DPubSubType();
    	virtual ~Waypoint3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::Waypoint3D> Waypoint3DList;
    /*!
     * @brief This class represents the TopicDataType of the type Path3D defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class Path3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Path3D type;

    	Path3DPubSubType();
    	virtual ~Path3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type PointCloudPoint defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PointCloudPointPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PointCloudPoint type;

    	PointCloudPointPubSubType();
    	virtual ~PointCloudPointPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::PointCloudPoint> PointCloudPointList;
    /*!
     * @brief This class represents the TopicDataType of the type PointCloud defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PointCloudPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PointCloud type;

    	PointCloudPubSubType();
    	virtual ~PointCloudPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type PanTiltAngles defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PanTiltAnglesPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PanTiltAngles type;

    	PanTiltAnglesPubSubType();
    	virtual ~PanTiltAnglesPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type PanTiltState defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class PanTiltStatePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PanTiltState type;

    	PanTiltStatePubSubType();
    	virtual ~PanTiltStatePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<RTC::Geometry3D> ElementGeometryList;
    /*!
     * @brief This class represents the TopicDataType of the type RangerGeometry defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class RangerGeometryPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef RangerGeometry type;

    	RangerGeometryPubSubType();
    	virtual ~RangerGeometryPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type RangerConfig defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class RangerConfigPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef RangerConfig type;

    	RangerConfigPubSubType();
    	virtual ~RangerConfigPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<double> RangeList;
    /*!
     * @brief This class represents the TopicDataType of the type RangeData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class RangeDataPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef RangeData type;

    	RangeDataPubSubType();
    	virtual ~RangeDataPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<double> IntensityList;
    /*!
     * @brief This class represents the TopicDataType of the type IntensityData defined by the user in the IDL file.
     * @ingroup INTERFACEDATATYPES
     */
    class IntensityDataPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef IntensityData type;

    	IntensityDataPubSubType();
    	virtual ~IntensityDataPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    typedef std::vector<uint8_t> RFIDTagData;
}

#endif // _RTC_INTERFACEDATATYPES_PUBSUBTYPES_H_