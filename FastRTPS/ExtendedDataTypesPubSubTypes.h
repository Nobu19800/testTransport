// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ExtendedDataTypesPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _RTC_EXTENDEDDATATYPES_PUBSUBTYPES_H_
#define _RTC_EXTENDEDDATATYPES_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

#include "ExtendedDataTypes.h"

namespace RTC
{
    /*!
     * @brief This class represents the TopicDataType of the type RGBColour defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class RGBColourPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef RGBColour type;

    	RGBColourPubSubType();
    	virtual ~RGBColourPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Point2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Point2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Point2D type;

    	Point2DPubSubType();
    	virtual ~Point2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Vector2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Vector2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Vector2D type;

    	Vector2DPubSubType();
    	virtual ~Vector2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Pose2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Pose2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Pose2D type;

    	Pose2DPubSubType();
    	virtual ~Pose2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Velocity2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Velocity2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Velocity2D type;

    	Velocity2DPubSubType();
    	virtual ~Velocity2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Acceleration2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Acceleration2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Acceleration2D type;

    	Acceleration2DPubSubType();
    	virtual ~Acceleration2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type PoseVel2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class PoseVel2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PoseVel2D type;

    	PoseVel2DPubSubType();
    	virtual ~PoseVel2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Size2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Size2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Size2D type;

    	Size2DPubSubType();
    	virtual ~Size2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Geometry2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Geometry2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Geometry2D type;

    	Geometry2DPubSubType();
    	virtual ~Geometry2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Covariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Covariance2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Covariance2D type;

    	Covariance2DPubSubType();
    	virtual ~Covariance2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type PointCovariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class PointCovariance2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PointCovariance2D type;

    	PointCovariance2DPubSubType();
    	virtual ~PointCovariance2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Carlike defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class CarlikePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Carlike type;

    	CarlikePubSubType();
    	virtual ~CarlikePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type SpeedHeading2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class SpeedHeading2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef SpeedHeading2D type;

    	SpeedHeading2DPubSubType();
    	virtual ~SpeedHeading2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Point3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Point3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Point3D type;

    	Point3DPubSubType();
    	virtual ~Point3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Vector3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Vector3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Vector3D type;

    	Vector3DPubSubType();
    	virtual ~Vector3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Orientation3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Orientation3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Orientation3D type;

    	Orientation3DPubSubType();
    	virtual ~Orientation3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Pose3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Pose3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Pose3D type;

    	Pose3DPubSubType();
    	virtual ~Pose3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Velocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Velocity3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Velocity3D type;

    	Velocity3DPubSubType();
    	virtual ~Velocity3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type AngularVelocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class AngularVelocity3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef AngularVelocity3D type;

    	AngularVelocity3DPubSubType();
    	virtual ~AngularVelocity3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Acceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Acceleration3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Acceleration3D type;

    	Acceleration3DPubSubType();
    	virtual ~Acceleration3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type AngularAcceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class AngularAcceleration3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef AngularAcceleration3D type;

    	AngularAcceleration3DPubSubType();
    	virtual ~AngularAcceleration3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type PoseVel3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class PoseVel3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef PoseVel3D type;

    	PoseVel3DPubSubType();
    	virtual ~PoseVel3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Size3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Size3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Size3D type;

    	Size3DPubSubType();
    	virtual ~Size3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Geometry3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Geometry3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Geometry3D type;

    	Geometry3DPubSubType();
    	virtual ~Geometry3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Covariance3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class Covariance3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Covariance3D type;

    	Covariance3DPubSubType();
    	virtual ~Covariance3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type SpeedHeading3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class SpeedHeading3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef SpeedHeading3D type;

    	SpeedHeading3DPubSubType();
    	virtual ~SpeedHeading3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type OAP defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class OAPPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef OAP type;

    	OAPPubSubType();
    	virtual ~OAPPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedRGBColour defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedRGBColourPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedRGBColour type;

    	TimedRGBColourPubSubType();
    	virtual ~TimedRGBColourPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedPoint2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoint2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedPoint2D type;

    	TimedPoint2DPubSubType();
    	virtual ~TimedPoint2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedVector2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVector2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedVector2D type;

    	TimedVector2DPubSubType();
    	virtual ~TimedVector2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedPose2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPose2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedPose2D type;

    	TimedPose2DPubSubType();
    	virtual ~TimedPose2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedVelocity2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVelocity2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedVelocity2D type;

    	TimedVelocity2DPubSubType();
    	virtual ~TimedVelocity2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedAcceleration2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAcceleration2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedAcceleration2D type;

    	TimedAcceleration2DPubSubType();
    	virtual ~TimedAcceleration2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedPoseVel2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoseVel2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedPoseVel2D type;

    	TimedPoseVel2DPubSubType();
    	virtual ~TimedPoseVel2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedSize2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSize2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedSize2D type;

    	TimedSize2DPubSubType();
    	virtual ~TimedSize2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedGeometry2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedGeometry2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedGeometry2D type;

    	TimedGeometry2DPubSubType();
    	virtual ~TimedGeometry2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedCovariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedCovariance2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedCovariance2D type;

    	TimedCovariance2DPubSubType();
    	virtual ~TimedCovariance2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedPointCovariance2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPointCovariance2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedPointCovariance2D type;

    	TimedPointCovariance2DPubSubType();
    	virtual ~TimedPointCovariance2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedCarlike defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedCarlikePubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedCarlike type;

    	TimedCarlikePubSubType();
    	virtual ~TimedCarlikePubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedSpeedHeading2D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSpeedHeading2DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedSpeedHeading2D type;

    	TimedSpeedHeading2DPubSubType();
    	virtual ~TimedSpeedHeading2DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedPoint3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoint3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedPoint3D type;

    	TimedPoint3DPubSubType();
    	virtual ~TimedPoint3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedVector3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVector3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedVector3D type;

    	TimedVector3DPubSubType();
    	virtual ~TimedVector3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedOrientation3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedOrientation3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedOrientation3D type;

    	TimedOrientation3DPubSubType();
    	virtual ~TimedOrientation3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedPose3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPose3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedPose3D type;

    	TimedPose3DPubSubType();
    	virtual ~TimedPose3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedVelocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedVelocity3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedVelocity3D type;

    	TimedVelocity3DPubSubType();
    	virtual ~TimedVelocity3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedAngularVelocity3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAngularVelocity3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedAngularVelocity3D type;

    	TimedAngularVelocity3DPubSubType();
    	virtual ~TimedAngularVelocity3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedAcceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAcceleration3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedAcceleration3D type;

    	TimedAcceleration3DPubSubType();
    	virtual ~TimedAcceleration3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedAngularAcceleration3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedAngularAcceleration3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedAngularAcceleration3D type;

    	TimedAngularAcceleration3DPubSubType();
    	virtual ~TimedAngularAcceleration3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedPoseVel3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedPoseVel3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedPoseVel3D type;

    	TimedPoseVel3DPubSubType();
    	virtual ~TimedPoseVel3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedSize3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSize3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedSize3D type;

    	TimedSize3DPubSubType();
    	virtual ~TimedSize3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedGeometry3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedGeometry3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedGeometry3D type;

    	TimedGeometry3DPubSubType();
    	virtual ~TimedGeometry3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedCovariance3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedCovariance3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedCovariance3D type;

    	TimedCovariance3DPubSubType();
    	virtual ~TimedCovariance3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedSpeedHeading3D defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedSpeedHeading3DPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedSpeedHeading3D type;

    	TimedSpeedHeading3DPubSubType();
    	virtual ~TimedSpeedHeading3DPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedOAP defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedOAPPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedOAP type;

    	TimedOAPPubSubType();
    	virtual ~TimedOAPPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type Quaternion defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class QuaternionPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef Quaternion type;

    	QuaternionPubSubType();
    	virtual ~QuaternionPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    /*!
     * @brief This class represents the TopicDataType of the type TimedQuaternion defined by the user in the IDL file.
     * @ingroup EXTENDEDDATATYPES
     */
    class TimedQuaternionPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef TimedQuaternion type;

    	TimedQuaternionPubSubType();
    	virtual ~TimedQuaternionPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
}

#endif // _RTC_EXTENDEDDATATYPES_PUBSUBTYPES_H_