// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "testDataPort.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static const char* _0RL_enumMember_testOpenRTM_mPortStatus[] = { "PORT_OK", "PORT_ERROR", "BUFFER_FULL", "BUFFER_EMPTY", "BUFFER_TIMEOUT", "UNKNOWN_ERROR" };
static CORBA::TypeCode_ptr _0RL_tc_testOpenRTM_mPortStatus = CORBA::TypeCode::PR_enum_tc("IDL:testOpenRTM/PortStatus:1.0", "PortStatus", _0RL_enumMember_testOpenRTM_mPortStatus, 6, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace testOpenRTM { 
  const ::CORBA::TypeCode_ptr _tc_PortStatus = _0RL_tc_testOpenRTM_mPortStatus;
} 
#else
const ::CORBA::TypeCode_ptr testOpenRTM::_tc_PortStatus = _0RL_tc_testOpenRTM_mPortStatus;
#endif

static CORBA::TypeCode_ptr _0RL_tc_testOpenRTM_mCdrData = CORBA::TypeCode::PR_alias_tc("IDL:testOpenRTM/CdrData:1.0", "CdrData", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace testOpenRTM { 
  const ::CORBA::TypeCode_ptr _tc_CdrData = _0RL_tc_testOpenRTM_mCdrData;
} 
#else
const ::CORBA::TypeCode_ptr testOpenRTM::_tc_CdrData = _0RL_tc_testOpenRTM_mCdrData;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace testOpenRTM { 
  const ::CORBA::TypeCode_ptr _tc_InPortCdr = CORBA::TypeCode::PR_interface_tc("IDL:testOpenRTM/InPortCdr:1.0", "InPortCdr", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr testOpenRTM::_tc_InPortCdr = CORBA::TypeCode::PR_interface_tc("IDL:testOpenRTM/InPortCdr:1.0", "InPortCdr", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace testOpenRTM { 
  const ::CORBA::TypeCode_ptr _tc_OutPortCdr = CORBA::TypeCode::PR_interface_tc("IDL:testOpenRTM/OutPortCdr:1.0", "OutPortCdr", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr testOpenRTM::_tc_OutPortCdr = CORBA::TypeCode::PR_interface_tc("IDL:testOpenRTM/OutPortCdr:1.0", "OutPortCdr", &_0RL_tcTrack);
#endif

static void _0RL_testOpenRTM_mPortStatus_marshal_fn(cdrStream& _s, void* _v)
{
  testOpenRTM::PortStatus* _p = (testOpenRTM::PortStatus*)_v;
  *_p >>= _s;
}
static void _0RL_testOpenRTM_mPortStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  testOpenRTM::PortStatus* _p = (testOpenRTM::PortStatus*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, testOpenRTM::PortStatus _s)
{
  _a.PR_insert(_0RL_tc_testOpenRTM_mPortStatus,
               _0RL_testOpenRTM_mPortStatus_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, testOpenRTM::PortStatus& _s)
{
  return _a.PR_extract(_0RL_tc_testOpenRTM_mPortStatus,
                       _0RL_testOpenRTM_mPortStatus_unmarshal_fn,
                       &_s);
}

static void _0RL_testOpenRTM_mCdrData_marshal_fn(cdrStream& _s, void* _v)
{
  testOpenRTM::CdrData* _p = (testOpenRTM::CdrData*)_v;
  *_p >>= _s;
}
static void _0RL_testOpenRTM_mCdrData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  testOpenRTM::CdrData* _p = new testOpenRTM::CdrData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_testOpenRTM_mCdrData_destructor_fn(void* _v)
{
  testOpenRTM::CdrData* _p = (testOpenRTM::CdrData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const testOpenRTM::CdrData& _s)
{
  testOpenRTM::CdrData* _p = new testOpenRTM::CdrData(_s);
  _a.PR_insert(_0RL_tc_testOpenRTM_mCdrData,
               _0RL_testOpenRTM_mCdrData_marshal_fn,
               _0RL_testOpenRTM_mCdrData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, testOpenRTM::CdrData* _sp)
{
  _a.PR_insert(_0RL_tc_testOpenRTM_mCdrData,
               _0RL_testOpenRTM_mCdrData_marshal_fn,
               _0RL_testOpenRTM_mCdrData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, testOpenRTM::CdrData*& _sp)
{
  return _a >>= (const testOpenRTM::CdrData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const testOpenRTM::CdrData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_testOpenRTM_mCdrData,
                    _0RL_testOpenRTM_mCdrData_unmarshal_fn,
                    _0RL_testOpenRTM_mCdrData_marshal_fn,
                    _0RL_testOpenRTM_mCdrData_destructor_fn,
                    _v)) {
    _sp = (const testOpenRTM::CdrData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_testOpenRTM_mInPortCdr_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_testOpenRTM_mInPortCdr_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(testOpenRTM::InPortCdr::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_testOpenRTM_mInPortCdr_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, testOpenRTM::InPortCdr_ptr _o)
{
  testOpenRTM::InPortCdr_ptr _no = testOpenRTM::InPortCdr::_duplicate(_o);
  _a.PR_insert(testOpenRTM::_tc_InPortCdr,
               _0RL_testOpenRTM_mInPortCdr_marshal_fn,
               _0RL_testOpenRTM_mInPortCdr_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, testOpenRTM::InPortCdr_ptr* _op)
{
  _a.PR_insert(testOpenRTM::_tc_InPortCdr,
               _0RL_testOpenRTM_mInPortCdr_marshal_fn,
               _0RL_testOpenRTM_mInPortCdr_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = testOpenRTM::InPortCdr::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, testOpenRTM::InPortCdr_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(testOpenRTM::_tc_InPortCdr,
                    _0RL_testOpenRTM_mInPortCdr_unmarshal_fn,
                    _0RL_testOpenRTM_mInPortCdr_marshal_fn,
                    _0RL_testOpenRTM_mInPortCdr_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (testOpenRTM::InPortCdr_ptr)_r->_ptrToObjRef(testOpenRTM::InPortCdr::_PD_repoId);
    else
      _o = testOpenRTM::InPortCdr::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_testOpenRTM_mOutPortCdr_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_testOpenRTM_mOutPortCdr_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(testOpenRTM::OutPortCdr::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_testOpenRTM_mOutPortCdr_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, testOpenRTM::OutPortCdr_ptr _o)
{
  testOpenRTM::OutPortCdr_ptr _no = testOpenRTM::OutPortCdr::_duplicate(_o);
  _a.PR_insert(testOpenRTM::_tc_OutPortCdr,
               _0RL_testOpenRTM_mOutPortCdr_marshal_fn,
               _0RL_testOpenRTM_mOutPortCdr_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, testOpenRTM::OutPortCdr_ptr* _op)
{
  _a.PR_insert(testOpenRTM::_tc_OutPortCdr,
               _0RL_testOpenRTM_mOutPortCdr_marshal_fn,
               _0RL_testOpenRTM_mOutPortCdr_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = testOpenRTM::OutPortCdr::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, testOpenRTM::OutPortCdr_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(testOpenRTM::_tc_OutPortCdr,
                    _0RL_testOpenRTM_mOutPortCdr_unmarshal_fn,
                    _0RL_testOpenRTM_mOutPortCdr_marshal_fn,
                    _0RL_testOpenRTM_mOutPortCdr_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (testOpenRTM::OutPortCdr_ptr)_r->_ptrToObjRef(testOpenRTM::OutPortCdr::_PD_repoId);
    else
      _o = testOpenRTM::OutPortCdr::_nil();
    return 1;
  }
  return 0;
}

